<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>搭建一个简洁的资源下载站点</title>
      <link href="/2020/06/13/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E6%B4%81%E7%9A%84%E4%B8%8B%E8%BD%BD%E7%AB%99%E7%82%B9/"/>
      <url>/2020/06/13/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E6%B4%81%E7%9A%84%E4%B8%8B%E8%BD%BD%E7%AB%99%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建一个简洁的资源下载站点"><a href="#搭建一个简洁的资源下载站点" class="headerlink" title="搭建一个简洁的资源下载站点"></a>搭建一个简洁的资源下载站点</h1><p>参考页面：<a href="https://download.rocc.top" target="_blank" rel="noopener">https://download.rocc.top</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置 nginx 源</span></span><br><span class="line">cat &gt; /etc/yum.repos.d/nginx.repo &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[nginx-mainline]</span><br><span class="line">name=nginx mainline repo</span><br><span class="line">baseurl=http://nginx.org/packages/mainline/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=<span class="literal">true</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 nginx</span></span><br><span class="line">yum install nginx-1.19.0 -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 nginx 源码包</span></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line">wget https://nginx.org/download/nginx-1.19.0.tar.gz</span><br><span class="line">tar xf nginx-1.19.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖包</span></span><br><span class="line">yum install git gcc-c++ pcre-devel zlib-devel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 fancyindex 美化模块</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/aperezdc/ngx-fancyindex.git /tmp/fancyindex</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新编译安装 nginx</span></span><br><span class="line"><span class="built_in">cd</span> nginx-1.19.0/</span><br><span class="line">./configure --prefix=/etc/nginx --add-module=../fancyindex --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/<span class="built_in">log</span>/nginx/error.log --http-log-path=/var/<span class="built_in">log</span>/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt=<span class="string">'-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC'</span> --with-ld-opt=<span class="string">'-Wl,-z,relro -Wl,-z,now -pie'</span></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载主题包</span></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Naereen/Nginx-Fancyindex-Theme.git</span><br><span class="line">mkdir /www/download -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 Nginx-Fancyindex-Theme-light 主题目录复制到站点根目录</span></span><br><span class="line">cp -r Nginx-Fancyindex-Theme/Nginx-Fancyindex-Theme-light/ /www/download</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 nginx 子配置文件</span></span><br><span class="line">cat &gt; /etc/nginx/conf.d/download.conf &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">server &#123;</span><br><span class="line">  listen          80;</span><br><span class="line">  server_name     download.rocc.top;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    root            /www/download;</span><br><span class="line">    autoindex       on;</span><br><span class="line">    autoindex_localtime on;</span><br><span class="line">    autoindex_exact_size off;</span><br><span class="line">    autoindex_format html;</span><br><span class="line">    charset utf-8,gbk;</span><br><span class="line">    fancyindex on;</span><br><span class="line">    fancyindex_exact_size off;</span><br><span class="line">    fancyindex_localtime on;</span><br><span class="line">    fancyindex_header <span class="string">"/Nginx-Fancyindex-Theme-light/header.html"</span>;</span><br><span class="line">    fancyindex_footer <span class="string">"/Nginx-Fancyindex-Theme-light/footer.html"</span>;</span><br><span class="line">    fancyindex_ignore <span class="string">"Nginx-Fancyindex-Theme-light"</span>;</span><br><span class="line">    fancyindex_name_length 255;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$request_filename</span> ~* ^.*?\.(txt|doc|pdf|rar|gz|zip|docx|exe|xlsx|ppt|pptx)$)</span><br><span class="line">    &#123;</span><br><span class="line">      add_header Content-Disposition attachment;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 nginx 服务并加入开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx &amp;&amp; systemctl start nginx.service</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> download </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GlusterFS 分布式存储</title>
      <link href="/2020/06/07/GlusterFS%20%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8/"/>
      <url>/2020/06/07/GlusterFS%20%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="GlusterFS-分布式存储系统"><a href="#GlusterFS-分布式存储系统" class="headerlink" title="GlusterFS 分布式存储系统"></a>GlusterFS 分布式存储系统</h1><p>Gluster File System 是一个开源的分布式文件系统，是 Scale 存储的核心，能够处理千数量级的客户端。是整合了许多存储块（server）通过 Infiniband RDMA 或者 TCP/IP 方式互联的一个并行的网络文件系统。</p><h2 id="CentOS-7-安装-GlusterFS"><a href="#CentOS-7-安装-GlusterFS" class="headerlink" title="CentOS 7 安装 GlusterFS"></a>CentOS 7 安装 GlusterFS</h2><p>官方参考文档：<a href="https://wiki.centos.org/SpecialInterestGroup/Storage/gluster-Quickstart" target="_blank" rel="noopener">https://wiki.centos.org/SpecialInterestGroup/Storage/gluster-Quickstart</a></p><table><thead><tr><th>主机名</th><th>IP</th><th>角色</th></tr></thead><tbody><tr><td>node1</td><td>10.0.0.3</td><td>GlusterFS 节点，客户端节点</td></tr><tr><td>node2</td><td>10.0.1.3</td><td>GlusterFS 节点</td></tr><tr><td>node3</td><td>10.0.2.3</td><td>GlusterFS 节点</td></tr></tbody></table><h3 id="1-安装服务（在所有-GlusterFS-节点和客户端操作）"><a href="#1-安装服务（在所有-GlusterFS-节点和客户端操作）" class="headerlink" title="1. 安装服务（在所有 GlusterFS 节点和客户端操作）"></a>1. 安装服务（在所有 GlusterFS 节点和客户端操作）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装所需的 YUM 源</span></span><br><span class="line">yum install centos-release-gluster</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 glusterfs 服务</span></span><br><span class="line">yum install glusterfs-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务并设置为开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> glusterd &amp;&amp; systemctl start glusterd</span><br></pre></td></tr></table></figure><h3 id="2-配置集群可信池（在任一节点操作即可）"><a href="#2-配置集群可信池（在任一节点操作即可）" class="headerlink" title="2. 配置集群可信池（在任一节点操作即可）"></a>2. 配置集群可信池（在任一节点操作即可）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将其他节点添加到集群中（node1 操作）</span></span><br><span class="line">gluster peer probe 10.0.1.3</span><br><span class="line">gluster peer probe 10.0.2.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查集群状态</span></span><br><span class="line">gluster peer status</span><br></pre></td></tr></table></figure><h3 id="3-设置-GlusterFS-卷（在任一节点操作即可）"><a href="#3-设置-GlusterFS-卷（在任一节点操作即可）" class="headerlink" title="3. 设置 GlusterFS 卷（在任一节点操作即可）"></a>3. 设置 GlusterFS 卷（在任一节点操作即可）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个名称为 data_rep 的复制卷</span></span><br><span class="line">gluster volume create data_rep replica 3 transport tcp 10.0.0.3:/replica 10.0.1.3:/replica 10.0.2.3:/replica force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 data_rep 复制卷</span></span><br><span class="line">gluster volume start data_rep</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有卷的状态信息</span></span><br><span class="line">gluster volume info</span><br></pre></td></tr></table></figure><h3 id="4-客户端挂载测试"><a href="#4-客户端挂载测试" class="headerlink" title="4. 客户端挂载测试"></a>4. 客户端挂载测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 挂载任意节点 IP:卷名(node1 操作)</span></span><br><span class="line">mount -t glusterfs 10.0.0.3:data_rep /mnt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 /mnt 目录下创建 26 个文件(node1 操作)</span></span><br><span class="line">touch /mnt/&#123;a..z&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看各节点 /replica 目录中是否存在这些文件（node1 node2 node3 查看）</span></span><br><span class="line">ls /replica | wc -l</span><br></pre></td></tr></table></figure><h2 id="卷的种类"><a href="#卷的种类" class="headerlink" title="卷的种类"></a>卷的种类</h2><p><strong>1、分布式卷</strong>（Distributed Volume）</p><p>  又称哈希卷，近似于 RAID0，文件没有分片，文件根据hash算法写入各个节点的硬盘上，优点是容量大，缺点是没冗余。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建分布卷</span></span><br><span class="line">gluster volume create data_glu transport tcp 10.0.0.3:/glu 10.0.1.3:/glu force</span><br></pre></td></tr></table></figure><p><strong>2、复制卷</strong>（Replicated Volume）</p><p>相当于 RAID1，复制的份数，决定集群的大小，通常与分布式卷或者条带卷组合使用，解决前两种存储卷的冗余缺陷。缺点是磁盘利用率低。  复本卷在创建时可指定复本的数量，通常为 2 或者 3，复本在存储时会在卷的不同 brick 上，因此有几个复本就必须提供至少多个 brick，当其中一台服务器失效后，可以从另一台服务器读取数据，因此复制 GlusterFS 卷提高了数据可靠性的同时，还提供了数据冗余的功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建复制卷</span></span><br><span class="line">gluster volume create data_rep replica 2 transport tcp 10.0.0.3:/replica 10.0.1.3:/replica force</span><br></pre></td></tr></table></figure><p><strong>3、分布式复制卷</strong>（Distributed Replicated Volume）</p><p>分布式复制卷结合了分布式和复制卷的特点，看起来类似 RAID10，但其实不同，RAID10 其实质是条带化，但分布式复制卷则没有。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建分布式复制卷</span></span><br><span class="line">gluster volume create <span class="built_in">test</span>-volume replica 2 transport tcp \</span><br><span class="line">server1:/exp1 server2:/exp2 server3:/exp3 server4:/exp4</span><br></pre></td></tr></table></figure><p><strong>4、条带卷</strong>（Striped Volume）</p><p>相当于 RAID0，文件是分片均匀写在各个节点的硬盘上的，优点是分布式读写，性能整体较好。缺点是没冗余，分片随机读写可能会导致硬盘 IOPS 饱和。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建条带卷</span></span><br><span class="line">volume create datavol3 stripe 2 transport tcp 10.0.0.3:/data3 10.0.1.3:/data3 force</span><br></pre></td></tr></table></figure><p><strong>5、分布式条带卷</strong>（Distributed Striped Volume）</p><p>当单个文件的体型十分巨大，客户端数量更多时，条带卷已经无法满足需求，此时将分布式与条带化结合起来是一个比较好的选择。其性能与服务器数量有关。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gluster volume create <span class="built_in">test</span>-volume stripe 4 transport tcp \</span><br><span class="line">server1:/exp1 server2:/exp2 server3:/exp3 server4:/exp4 \</span><br><span class="line">server5:/exp5 server6:/exp6 server7:/exp7 server8:/exp8</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> glusterfs </tag>
            
            <tag> 分布式存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubeadm 部署 kubernetes v1.18.2 集群（腾讯云版）</title>
      <link href="/2020/05/01/Kubeadm%20%E9%83%A8%E7%BD%B2%20kubernetes%20v1.18.2%20%E9%9B%86%E7%BE%A4/"/>
      <url>/2020/05/01/Kubeadm%20%E9%83%A8%E7%BD%B2%20kubernetes%20v1.18.2%20%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Kubeadm-部署-kubernetes-v1-18-2-集群（腾讯云版）"><a href="#Kubeadm-部署-kubernetes-v1-18-2-集群（腾讯云版）" class="headerlink" title="Kubeadm 部署 kubernetes v1.18.2 集群（腾讯云版）"></a>Kubeadm 部署 kubernetes v1.18.2 集群（腾讯云版）</h1><h2 id="主机规划"><a href="#主机规划" class="headerlink" title="主机规划"></a>主机规划</h2><table><thead><tr><th>主机名</th><th>IP 地址</th><th>推荐 CPU 和 内存 配置</th></tr></thead><tbody><tr><td>k8s-master</td><td>10.0.0.3</td><td>&gt; 2 核 2 G (关闭 swap 分区)</td></tr><tr><td>k8s-node1</td><td>10.0.1.3</td><td>&gt; 2 核 2 G (关闭 swap 分区)</td></tr><tr><td>k8s-node2</td><td>10.0.2.3</td><td>&gt; 2 核 2 G (关闭 swap 分区)</td></tr></tbody></table><h2 id="升级内核"><a href="#升级内核" class="headerlink" title="升级内核"></a>升级内核</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入 GPG 公钥，安装最新版内核（所有主机均操作）</span></span><br><span class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span><br><span class="line">yum --disablerepo=<span class="string">"*"</span> --enablerepo=<span class="string">"elrepo-kernel"</span> list available</span><br><span class="line">yum --enablerepo=elrepo-kernel install kernel-ml -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 GRUB 默认启动项（所有主机均操作）</span></span><br><span class="line">sed -i <span class="string">'/GRUB_DEFAULT=/c GRUB_DEFAULT=0'</span> /etc/default/grub</span><br><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启（所有主机均操作）</span></span><br><span class="line">init 6</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除旧内核【慎用】（所有主机均操作）</span></span><br><span class="line">rpm -qa | grep kernel | grep -v kernel-ml* | xargs yum remove -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新所有软件（所有主机均操作）</span></span><br><span class="line">yum update -y</span><br></pre></td></tr></table></figure><h2 id="配置-Host-解析"><a href="#配置-Host-解析" class="headerlink" title="配置 Host 解析"></a>配置 Host 解析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有主机均操作</span></span><br><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt; EOF</span><br><span class="line">10.0.0.3 k8s-master</span><br><span class="line">10.0.1.3 k8s-node1</span><br><span class="line">10.0.2.3 k8s-node2</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="关闭-swap-分区"><a href="#关闭-swap-分区" class="headerlink" title="关闭 swap 分区"></a>关闭 swap 分区</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有主机均操作</span></span><br><span class="line">swapoff -a</span><br><span class="line">sed -i <span class="string">'/swap/s/^/#/g'</span> /etc/fstab</span><br></pre></td></tr></table></figure><h2 id="安装-Docker-引擎"><a href="#安装-Docker-引擎" class="headerlink" title="安装 Docker 引擎"></a>安装 Docker 引擎</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署 Docker（所有主机均操作）</span></span><br><span class="line">wget -O /etc/yum.repos.d/docker-ce.repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">sed -i <span class="string">'s+download.docker.com+mirrors.cloud.tencent.com/docker-ce+'</span> /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">yum install docker-ce -y</span><br><span class="line">systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置腾讯云 docker 镜像加速（所有主机均操作）</span></span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">"registry-mirrors"</span>: [</span><br><span class="line">       <span class="string">"https://mirror.ccs.tencentyun.com"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="安装-Kubernetes-组件"><a href="#安装-Kubernetes-组件" class="headerlink" title="安装 Kubernetes 组件"></a>安装 Kubernetes 组件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置 kubernetes 源（所有主机均操作）</span></span><br><span class="line">cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; EOF </span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 kubelet kubeadm kubectl 组件（所有主机均操作）</span></span><br><span class="line">yum install -y kubelet-1.18.2 kubeadm-1.18.2 kubectl-1.18.2</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置内核模块相关参数（所有主机均操作）</span></span><br><span class="line">cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class="line">net.bridge.bridge-nf-call-iptables=1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sysctl -p /etc/sysctl.d/k8s.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略使用 swap 分区的警告</span></span><br><span class="line"><span class="comment"># echo KUBELET_EXTRA_ARGS="--fail-swap-on=false" &gt; /etc/sysconfig/kubelet</span></span><br></pre></td></tr></table></figure><h2 id="Master-节点导入镜像"><a href="#Master-节点导入镜像" class="headerlink" title="Master 节点导入镜像"></a>Master 节点导入镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载镜像（仅 Master 节点操作）</span></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.18.2</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.18.2</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.18.2</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.18.2</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.3-0</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.6.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新打标（仅 Master 节点操作）</span></span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.18.2 k8s.gcr.io/kube-apiserver:v1.18.2</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.18.2 k8s.gcr.io/kube-controller-manager:v1.18.2</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.18.2 k8s.gcr.io/kube-scheduler:v1.18.2</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.18.2 k8s.gcr.io/kube-proxy:v1.18.2</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2 k8s.gcr.io/pause:3.2</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.3-0 k8s.gcr.io/etcd:3.4.3-0</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.6.7 k8s.gcr.io/coredns:1.6.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除旧镜像（仅 Master 节点操作）</span></span><br><span class="line">docker image rm registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.18.2</span><br><span class="line">docker image rm registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.18.2</span><br><span class="line">docker image rm registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.18.2</span><br><span class="line">docker image rm registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.18.2</span><br><span class="line">docker image rm registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2</span><br><span class="line">docker image rm registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.3-0</span><br><span class="line">docker image rm registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.6.7</span><br></pre></td></tr></table></figure><h2 id="Worker-节点导入镜像"><a href="#Worker-节点导入镜像" class="headerlink" title="Worker 节点导入镜像"></a>Worker 节点导入镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入镜像（仅 Node1 和 Node2 节点操作）</span></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.6.7</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.18.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新打标（仅 Node1 和 Node2 节点操作）</span></span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.6.7 k8s.gcr.io/coredns:1.6.7</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2 k8s.gcr.io/pause:3.2</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.18.2 k8s.gcr.io/kube-proxy:v1.18.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除旧镜像（仅 Node1 和 Node2 节点操作）</span></span><br><span class="line">docker image rm registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.6.7</span><br><span class="line">docker image rm registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2</span><br><span class="line">docker image rm registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.18.2</span><br></pre></td></tr></table></figure><h2 id="Kubeadm-初始化集群"><a href="#Kubeadm-初始化集群" class="headerlink" title="Kubeadm 初始化集群"></a>Kubeadm 初始化集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化集群（仅 Master 节点操作）</span></span><br><span class="line">kubeadm init --kubernetes-version=1.18.2 --pod-network-cidr=10.244.0.0/16 --service-cidr=10.96.0.0/12 --ignore-preflight-errors=Swap --ignore-preflight-errors=NumCPU</span><br><span class="line"></span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制初始化完成后的最后 2 行提示内容在从节点上执行(分别在 node1 node2 上执行) </span></span><br><span class="line"><span class="comment"># 请自行复制初始化完成后的最后 2 行提示内容从节点上执行，以下内容仅供参考</span></span><br><span class="line"><span class="comment"># kubeadm join 3.3.3.80:6443 --token 5u4vdz.7bbwnxltoeupxddp \</span></span><br><span class="line"><span class="comment">#    --discovery-token-ca-cert-hash sha256:4642090e953981bad15b1a5c1ec8cf8bdc32be681a7e348bfd5910e06fe8c2bb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 CNI 网络插件（仅 Master 节点操作）</span></span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><h2 id="查看集群信息"><a href="#查看集群信息" class="headerlink" title="查看集群信息"></a>查看集群信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Master</span></span><br><span class="line">kubectl cluster-info</span><br><span class="line">kubectl get nodes</span><br><span class="line">kubectl get pods -n kube-system -o wide</span><br></pre></td></tr></table></figure><h2 id="添加命令自动补全"><a href="#添加命令自动补全" class="headerlink" title="添加命令自动补全"></a>添加命令自动补全</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Master</span></span><br><span class="line">echo 'source &lt;(kubectl completion bash)' &gt;&gt; /etc/profile.d/kubectl.sh</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="解决-Worker-节点宕掉需-5-分钟后才能被感知的问题"><a href="#解决-Worker-节点宕掉需-5-分钟后才能被感知的问题" class="headerlink" title="解决 Worker 节点宕掉需 5 分钟后才能被感知的问题"></a>解决 Worker 节点宕掉需 5 分钟后才能被感知的问题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 Master 节点配置中添加两项参数</span></span><br><span class="line">vim /etc/kubernetes/manifests/kube-apiserver.yaml</span><br><span class="line">    - --default-not-ready-toleration-seconds=5</span><br><span class="line">    - --default-unreachable-toleration-seconds=5</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制部署 kubernetes 集群</title>
      <link href="/2020/01/01/Kubernetes%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%83%A8%E7%BD%B2%E9%9B%86%E7%BE%A4/"/>
      <url>/2020/01/01/Kubernetes%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%83%A8%E7%BD%B2%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="部署单-Master-集群"><a href="#部署单-Master-集群" class="headerlink" title="部署单 Master 集群"></a>部署单 Master 集群</h2><p><a href="https://www.notion.so/a0467bc248ea42d2a57b3bb340bef27b" target="_blank" rel="noopener">集群规划</a></p><h3 id="初始化服务器"><a href="#初始化服务器" class="headerlink" title="初始化服务器"></a>初始化服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.关闭防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld &amp;&amp; systemctl stop firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.关闭 selinux</span></span><br><span class="line">sed -i <span class="string">'/^SELINUX=/c SELINUX=disabled'</span> /etc/selinux/config</span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.关闭 swap 分区</span></span><br><span class="line">swapoff -a</span><br><span class="line">sed -i <span class="string">'/swap/s/^/#/g'</span> /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.配置主机名</span></span><br><span class="line">hostnamectl <span class="built_in">set</span>-hostname k8s-master     <span class="comment"># master 主机执行</span></span><br><span class="line">hostnamectl <span class="built_in">set</span>-hostname k8s-node01     <span class="comment"># node01 主机执行</span></span><br><span class="line">hostnamectl <span class="built_in">set</span>-hostname k8s-node02     <span class="comment"># node02 主机执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.配置相互解析</span></span><br><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt; EOF</span><br><span class="line">172.16.1.10 k8s-master</span><br><span class="line">172.16.1.2 k8s-node01</span><br><span class="line">172.16.1.3 k8s-node02</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.配置时间同步</span></span><br><span class="line">yum install chrony -y</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">"/^#allow/c allow 10.0.0.0/16"</span> /etc/chrony.conf  <span class="comment"># 仅 master 主机执行</span></span><br><span class="line">sed -i <span class="string">"/^#local/c local stratum 10"</span> /etc/chrony.conf   <span class="comment"># 仅 master 主机执行</span></span><br><span class="line"></span><br><span class="line">sed -i <span class="string">"/^server /s@^@#@g"</span> /etc/chrony.conf         <span class="comment"># 仅 node 主机执行</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"server 172.16.1.10 iburst"</span> &gt;&gt; /etc/chrony.conf    <span class="comment"># 仅 node 主机执行</span></span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd &amp;&amp; systemctl start chronyd</span><br><span class="line"></span><br><span class="line">chronyc sources     <span class="comment"># 检查 node 主机是否同步成功</span></span><br></pre></td></tr></table></figure><h3 id="部署-docker"><a href="#部署-docker" class="headerlink" title="部署 docker"></a>部署 docker</h3><p><strong>所有主机</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署 docker</span></span><br><span class="line">wget -O /etc/yum.repos.d/docker-ce.repo &lt;https://download.docker.com/linux/centos/docker-ce.repo&gt;</span><br><span class="line">sed -i <span class="string">'s+download.docker.com+mirrors.cloud.tencent.com/docker-ce+'</span> /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">yum install docker-ce -y</span><br><span class="line">systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置腾讯云 docker 镜像加速</span></span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">"registry-mirrors"</span>: [</span><br><span class="line">       <span class="string">"&lt;https://mirror.ccs.tencentyun.com&gt;"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="部署-etcd"><a href="#部署-etcd" class="headerlink" title="部署 etcd"></a>部署 etcd</h3><h3 id="颁发证书"><a href="#颁发证书" class="headerlink" title="颁发证书"></a>颁发证书</h3><p><strong>k8s-master</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 cfssl 工具</span></span><br><span class="line">wget &lt;https://pkg.cfssl.org/R1.2/cfssl_linux-amd64&gt;</span><br><span class="line">wget &lt;https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64&gt;</span><br><span class="line">wget &lt;https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64&gt;</span><br><span class="line">chmod +x cfssl_linux-amd64 cfssljson_linux-amd64 cfssl-certinfo_linux-amd64</span><br><span class="line">mv cfssl_linux-amd64 /usr/<span class="built_in">local</span>/bin/cfssl</span><br><span class="line">mv cfssljson_linux-amd64 /usr/<span class="built_in">local</span>/bin/cfssljson</span><br><span class="line">mv cfssl-certinfo_linux-amd64 /usr/<span class="built_in">local</span>/bin/cfssl-certinfo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成自签证书</span></span><br><span class="line">mkdir -p /ssl/etcd</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$_</span></span><br><span class="line"></span><br><span class="line">cat &gt; ca-csr.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"etcd CA"</span>,</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"ShenZhen"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"ShenZhen"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt; ca-config.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"signing"</span>: &#123;</span><br><span class="line">    <span class="string">"default"</span>: &#123;</span><br><span class="line">      <span class="string">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"profiles"</span>: &#123;</span><br><span class="line">      <span class="string">"www"</span>: &#123;</span><br><span class="line">         <span class="string">"expiry"</span>: <span class="string">"87600h"</span>,</span><br><span class="line">         <span class="string">"usages"</span>: [</span><br><span class="line">            <span class="string">"signing"</span>,</span><br><span class="line">            <span class="string">"key encipherment"</span>,</span><br><span class="line">            <span class="string">"server auth"</span>,</span><br><span class="line">            <span class="string">"client auth"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt; server-csr.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"etcd"</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [</span><br><span class="line">    <span class="string">"172.16.1.10"</span>,</span><br><span class="line">    <span class="string">"172.16.1.2"</span>,</span><br><span class="line">    <span class="string">"172.16.1.3"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"ShenZhen"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"ShenZhen"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=www server-csr.json | cfssljson -bare server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否生成了 4 个 pem 文件</span></span><br><span class="line">ls *pem | wc -l</span><br></pre></td></tr></table></figure><h3 id="安装-etcd"><a href="#安装-etcd" class="headerlink" title="安装 etcd"></a>安装 etcd</h3><p><strong>k8s-master</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 etcd</span></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line">wget &lt;https://download.rocc.top/kubernetes/etcd/etcd-v3.3.17-linux-amd64.tar.gz&gt;</span><br><span class="line">tar xf etcd-v3.3.17-linux-amd64.tar.gz</span><br><span class="line">mkdir /opt/etcd/&#123;bin,cfg,ssl&#125; -p</span><br><span class="line">mv etcd-v3.3.17-linux-amd64/etcd* /opt/etcd/bin/</span><br><span class="line">chmod +x /opt/etcd/bin/* </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 etcd 配置文件</span></span><br><span class="line">cat &gt; /opt/etcd/cfg/etcd.conf &lt;&lt; EOF</span><br><span class="line"><span class="comment">#[Member]</span></span><br><span class="line">ETCD_NAME=<span class="string">"etcd-1"</span></span><br><span class="line">ETCD_DATA_DIR=<span class="string">"/var/lib/etcd/default.etcd"</span></span><br><span class="line">ETCD_LISTEN_PEER_URLS=<span class="string">"&lt;https://172.16.1.10:2380&gt;"</span></span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=<span class="string">"&lt;https://172.16.1.10:2379&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[Clustering]</span></span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="string">"&lt;https://172.16.1.10:2380&gt;"</span></span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=<span class="string">"&lt;https://172.16.1.10:2379&gt;"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER=<span class="string">"etcd-1=https://172.16.1.10:2380,etcd-2=https://172.16.1.2:2380,etcd-3=https://172.16.1.3:2380"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN=<span class="string">"etcd-cluster"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER_STATE=<span class="string">"new"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># ETCD_NAME 节点名称</span></span><br><span class="line"><span class="comment"># ETCD_DATA_DIR 数据目录</span></span><br><span class="line"><span class="comment"># ETCD_LISTEN_PEER_URLS 集群通信监听地址</span></span><br><span class="line"><span class="comment"># ETCD_LISTEN_CLIENT_URLS 客户端访问监听地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ETCD_INITIAL_ADVERTISE_PEER_URLS 集群通告地址</span></span><br><span class="line"><span class="comment"># ETCD_ADVERTISE_CLIENT_URLS 客户端通告地址</span></span><br><span class="line"><span class="comment"># ETCD_INITIAL_CLUSTER 集群节点地址</span></span><br><span class="line"><span class="comment"># ETCD_INITIAL_CLUSTER_TOKEN 集群Token</span></span><br><span class="line"><span class="comment"># ETCD_INITIAL_CLUSTER_STATE 加入集群的当前状态，new是新集群，existing表示加入已有集群</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 systemd 管理</span></span><br><span class="line">cat &gt; /usr/lib/systemd/system/etcd.service &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Etcd Server</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">EnvironmentFile=/opt/etcd/cfg/etcd.conf</span><br><span class="line">ExecStart=/opt/etcd/bin/etcd \\</span><br><span class="line">--name=<span class="variable">$&#123;ETCD_NAME&#125;</span> \\</span><br><span class="line">--data-dir=<span class="variable">$&#123;ETCD_DATA_DIR&#125;</span> \\</span><br><span class="line">--listen-peer-urls=<span class="variable">$&#123;ETCD_LISTEN_PEER_URLS&#125;</span> \\</span><br><span class="line">--listen-client-urls=<span class="variable">$&#123;ETCD_LISTEN_CLIENT_URLS&#125;</span>,&lt;http://127.0.0.1:2379&gt; \\</span><br><span class="line">--advertise-client-urls=<span class="variable">$&#123;ETCD_ADVERTISE_CLIENT_URLS&#125;</span> \\</span><br><span class="line">--initial-advertise-peer-urls=<span class="variable">$&#123;ETCD_INITIAL_ADVERTISE_PEER_URLS&#125;</span> \\</span><br><span class="line">--initial-cluster=<span class="variable">$&#123;ETCD_INITIAL_CLUSTER&#125;</span> \\</span><br><span class="line">--initial-cluster-token=<span class="variable">$&#123;ETCD_INITIAL_CLUSTER_TOKEN&#125;</span> \\</span><br><span class="line">--initial-cluster-state=new \\</span><br><span class="line">--cert-file=/opt/etcd/ssl/server.pem \\</span><br><span class="line">--key-file=/opt/etcd/ssl/server-key.pem \\</span><br><span class="line">--peer-cert-file=/opt/etcd/ssl/server.pem \\</span><br><span class="line">--peer-key-file=/opt/etcd/ssl/server-key.pem \\</span><br><span class="line">--trusted-ca-file=/opt/etcd/ssl/ca.pem \\</span><br><span class="line">--peer-trusted-ca-file=/opt/etcd/ssl/ca.pem</span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝证书</span></span><br><span class="line">cp /ssl/etcd/*pem /opt/etcd/ssl/</span><br></pre></td></tr></table></figure><p><strong>k8s-master</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t dsa -P <span class="string">''</span> -f ~/.ssh/id_dsa &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">ssh-copy-id k8s-node01</span><br><span class="line">ssh-copy-id k8s-node02</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 etcd 发送到 node 节点</span></span><br><span class="line">scp /usr/lib/systemd/system/etcd.service k8s-node01:/usr/lib/systemd/system/etcd.service</span><br><span class="line">scp /usr/lib/systemd/system/etcd.service k8s-node02:/usr/lib/systemd/system/etcd.service</span><br><span class="line">scp -r /opt/etcd k8s-node01:/opt</span><br><span class="line">scp -r /opt/etcd k8s-node02:/opt</span><br></pre></td></tr></table></figure><p><strong>k8s-node01</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 etcd 配置文件</span></span><br><span class="line">cat &gt; /opt/etcd/cfg/etcd.conf &lt;&lt; EOF</span><br><span class="line">ETCD_NAME=<span class="string">"etcd-2"</span></span><br><span class="line">ETCD_DATA_DIR=<span class="string">"/var/lib/etcd/default.etcd"</span></span><br><span class="line">ETCD_LISTEN_PEER_URLS=<span class="string">"&lt;https://172.16.1.2:2380&gt;"</span></span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=<span class="string">"&lt;https://172.16.1.2:2379&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[Clustering]</span></span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="string">"&lt;https://172.16.1.2:2380&gt;"</span></span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=<span class="string">"&lt;https://172.16.1.2:2379&gt;"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER=<span class="string">"etcd-1=https://172.16.1.10:2380,etcd-2=https://172.16.1.2:2380,etcd-3=https://172.16.1.3:2380"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN=<span class="string">"etcd-cluster"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER_STATE=<span class="string">"new"</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p><strong>k8s-node02</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 etcd 配置文件</span></span><br><span class="line">cat &gt; /opt/etcd/cfg/etcd.conf &lt;&lt; EOF</span><br><span class="line">ETCD_NAME=<span class="string">"etcd-3"</span></span><br><span class="line">ETCD_DATA_DIR=<span class="string">"/var/lib/etcd/default.etcd"</span></span><br><span class="line">ETCD_LISTEN_PEER_URLS=<span class="string">"&lt;https://172.16.1.3:2380&gt;"</span></span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=<span class="string">"&lt;https://172.16.1.3:2379&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[Clustering]</span></span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="string">"&lt;https://172.16.1.3:2380&gt;"</span></span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=<span class="string">"&lt;https://172.16.1.3:2379&gt;"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER=<span class="string">"etcd-1=https://172.16.1.10:2380,etcd-2=https://172.16.1.2:2380,etcd-3=https://172.16.1.3:2380"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN=<span class="string">"etcd-cluster"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER_STATE=<span class="string">"new"</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p><strong>启动 etcd</strong> （依次启动三个节点）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> etcd &amp;&amp; systemctl start etcd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查各节点健康状况</span></span><br><span class="line">/opt/etcd/bin/etcdctl --ca-file=/opt/etcd/ssl/ca.pem --cert-file=/opt/etcd/ssl/server.pem --key-file=/opt/etcd/ssl/server-key.pem --endpoints=<span class="string">"&lt;https://172.16.1.10:2379&gt;,&lt;https://172.16.1.2:2379&gt;,&lt;https://172.16.1.3:2379&gt;"</span> cluster-health</span><br></pre></td></tr></table></figure><h3 id="部署-flannel-网络"><a href="#部署-flannel-网络" class="headerlink" title="部署 flannel 网络"></a>部署 flannel 网络</h3><p><strong>node 节点</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写入预定义子网段</span></span><br><span class="line"><span class="built_in">cd</span> /opt/etcd/ssl</span><br><span class="line">/opt/etcd/bin/etcdctl \\</span><br><span class="line">--ca-file=ca.pem --cert-file=server.pem --key-file=server-key.pem \\</span><br><span class="line">--endpoints=<span class="string">"&lt;https://172.16.1.2:2379&gt;,&lt;https://172.16.1.3:2379&gt;,&lt;https://172.16.1.1:2379&gt;"</span> \\</span><br><span class="line"><span class="built_in">set</span> /coreos.com/network/config  <span class="string">'&#123; "Network": "172.17.76.0/16", "Backend": &#123;"Type": "vxlan"&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">/opt/etcd/bin/etcdctl \\</span><br><span class="line">--ca-file=ca.pem --cert-file=server.pem --key-file=server-key.pem \\</span><br><span class="line">--endpoints=<span class="string">"&lt;https://172.16.1.2:2379&gt;,&lt;https://172.16.1.3:2379&gt;,&lt;https://172.16.1.1:2379&gt;"</span> \\</span><br><span class="line">get /coreos.com/network/config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载二进制包</span></span><br><span class="line">mkdir /opt/kubernetes/&#123;bin,cfg,ssl,logs&#125; -p</span><br><span class="line"><span class="built_in">cd</span> /opt/kubernetes/bin</span><br><span class="line"><span class="comment"># wget &lt;https://github.com/coreos/flannel/releases/download/v0.11.0/flannel-v0.11.0-linux-amd64.tar.gz&gt;</span></span><br><span class="line">wget &lt;https://download.rocc.top/kubernetes/flannel/flannel-v0.11.0/flanneld&gt;</span><br><span class="line">wget &lt;https://download.rocc.top/kubernetes/flannel/flannel-v0.11.0/mk-docker-opts.sh&gt;</span><br><span class="line">chmod +x /opt/kubernetes/bin/*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置文件</span></span><br><span class="line">cat &gt; /opt/kubernetes/cfg/flanneld.conf &lt;&lt; EOF</span><br><span class="line">FLANNEL_OPTIONS=<span class="string">"\\</span></span><br><span class="line"><span class="string">--etcd-endpoints=https://172.16.1.2:2379,&lt;https://172.16.1.3:2379&gt; \\</span></span><br><span class="line"><span class="string">--etcd-cafile=/opt/etcd/ssl/ca.pem -etcd-certfile=/opt/etcd/ssl/server.pem \\</span></span><br><span class="line"><span class="string">--etcd-keyfile=/opt/etcd/ssl/server-key.pem"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 systemd 管理</span></span><br><span class="line">cat &gt; /usr/lib/systemd/system/flanneld.service &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Flanneld overlay address etcd agent</span><br><span class="line">After=network-online.target network.target</span><br><span class="line">Before=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">EnvironmentFile=/opt/kubernetes/cfg/flanneld.conf</span><br><span class="line">ExecStart=/opt/kubernetes/bin/flanneld --ip-masq <span class="variable">$FLANNEL_OPTIONS</span></span><br><span class="line">ExecStartPost=/opt/kubernetes/bin/mk-docker-opts.sh -k DOCKER_NETWORK_OPTIONS -d /run/flannel/subnet.env</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 docker 启动指定子网段</span></span><br><span class="line">cat &gt; /usr/lib/systemd/system/docker.service &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line">After=network-online.target firewalld.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">EnvironmentFile=/run/flannel/subnet.env</span><br><span class="line">ExecStart=/usr/bin/dockerd <span class="variable">$DOCKER_NETWORK_OPTIONS</span></span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">Delegate=yes</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">StartLimitBurst=3</span><br><span class="line">StartLimitInterval=60s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> flanneld &amp;&amp; systemctl start flanneld</span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看网络</span></span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure><h3 id="Master-节点部署组件"><a href="#Master-节点部署组件" class="headerlink" title="Master 节点部署组件"></a>Master 节点部署组件</h3><h3 id="颁发证书-1"><a href="#颁发证书-1" class="headerlink" title="颁发证书"></a>颁发证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">mkdir /ssl/k8s</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$_</span></span><br><span class="line"></span><br><span class="line">cat &gt; ca-config.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"signing"</span>: &#123;</span><br><span class="line">    <span class="string">"default"</span>: &#123;</span><br><span class="line">      <span class="string">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"profiles"</span>: &#123;</span><br><span class="line">      <span class="string">"kubernetes"</span>: &#123;</span><br><span class="line">         <span class="string">"expiry"</span>: <span class="string">"87600h"</span>,</span><br><span class="line">         <span class="string">"usages"</span>: [</span><br><span class="line">            <span class="string">"signing"</span>,</span><br><span class="line">            <span class="string">"key encipherment"</span>,</span><br><span class="line">            <span class="string">"server auth"</span>,</span><br><span class="line">            <span class="string">"client auth"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt; ca-csr.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"ShenZhen"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"ShenZhen"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 apiserver 证书</span></span><br><span class="line">cat &gt; server-csr.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [</span><br><span class="line">      <span class="string">"3.3.3.1"</span>,</span><br><span class="line">      <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      <span class="string">"172.16.1.10"</span>,</span><br><span class="line">      <span class="string">"kubernetes"</span>,</span><br><span class="line">      <span class="string">"kubernetes.default"</span>,</span><br><span class="line">      <span class="string">"kubernetes.default.svc"</span>,</span><br><span class="line">      <span class="string">"kubernetes.default.svc.cluster"</span>,</span><br><span class="line">      <span class="string">"kubernetes.default.svc.cluster.local"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"ShenZhen"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"ShenZhen"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes server-csr.json | cfssljson -bare server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 kube-proxy 证书</span></span><br><span class="line">cat &gt; kube-proxy-csr.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"system:kube-proxy"</span>,</span><br><span class="line">  <span class="string">"hosts"</span>: [],</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"ShenZhen"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"ShenZhen"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否生成了 6 个 pem 文件</span></span><br><span class="line">ls *pem | wc -l</span><br></pre></td></tr></table></figure><h3 id="部署-apiserver-组件"><a href="#部署-apiserver-组件" class="headerlink" title="部署 apiserver 组件"></a>部署 apiserver 组件</h3><p><strong>master</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载二进制文件</span></span><br><span class="line">mkdir /opt/kubernetes/&#123;bin,cfg,ssl,logs&#125; -p</span><br><span class="line"> cp /ssl/k8s/*pem /opt/kubernetes/ssl/</span><br><span class="line"><span class="built_in">cd</span> /opt/kubernetes/bin</span><br><span class="line">wget &lt;https://download.rocc.top/kubernetes/v1.17.0/kubernetes-server/server/bin/kube-apiserver&gt;</span><br><span class="line">wget &lt;https://download.rocc.top/kubernetes/v1.17.0/kubernetes-server/server/bin/kube-scheduler&gt;</span><br><span class="line">wget &lt;https://download.rocc.top/kubernetes/v1.17.0/kubernetes-server/server/bin/kube-controller-manager&gt;</span><br><span class="line">wget &lt;https://download.rocc.top/kubernetes/v1.17.0/kubernetes-server/server/bin/kubectl&gt;</span><br><span class="line">chmod +x /opt/kubernetes/bin/*</span><br><span class="line">cp /opt/kubernetes/bin/* /bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 token 文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'a113e32020e784c521c13alan19lcan,kubelet-bootstrap,10001,"system:kubelet-bootstrap"'</span> &gt; /opt/kubernetes/cfg/token.csv </span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一列：随机字符串</span></span><br><span class="line"><span class="comment"># 第二列：用户名</span></span><br><span class="line"><span class="comment"># 第三列：UID</span></span><br><span class="line"><span class="comment"># 第四列：用户组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 apiserver 配置文件</span></span><br><span class="line">cat &gt; /opt/kubernetes/cfg/kube-apiserver.conf &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">KUBE_APISERVER_OPTS=<span class="string">"--logtostderr=true \\</span></span><br><span class="line"><span class="string">--v=3 \\</span></span><br><span class="line"><span class="string">--log-dir=/opt/kubernetes/logs \\</span></span><br><span class="line"><span class="string">--etcd-servers=https://172.16.1.10:2379,&lt;https://172.16.1.2:2379&gt;,&lt;https://172.16.1.3:2379&gt; \\</span></span><br><span class="line"><span class="string">--bind-address=172.16.1.10 \\</span></span><br><span class="line"><span class="string">--secure-port=6443 \\</span></span><br><span class="line"><span class="string">--advertise-address=172.16.1.10 \\</span></span><br><span class="line"><span class="string">--allow-privileged=true \\</span></span><br><span class="line"><span class="string">--service-cluster-ip-range=10.0.0.0/24 \\</span></span><br><span class="line"><span class="string">--enable-admission-plugins=NamespaceLifecycle,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota,NodeRestriction \\</span></span><br><span class="line"><span class="string">--authorization-mode=RBAC,Node \\</span></span><br><span class="line"><span class="string">--enable-bootstrap-token-auth=true \\</span></span><br><span class="line"><span class="string">--token-auth-file=/opt/kubernetes/cfg/token.csv \\</span></span><br><span class="line"><span class="string">--service-node-port-range=30000-32767 \\</span></span><br><span class="line"><span class="string">--kubelet-client-certificate=/opt/kubernetes/ssl/server.pem  \\</span></span><br><span class="line"><span class="string">--kubelet-client-key=/opt/kubernetes/ssl/server-key.pem \\</span></span><br><span class="line"><span class="string">--tls-cert-file=/opt/kubernetes/ssl/server.pem  \\</span></span><br><span class="line"><span class="string">--tls-private-key-file=/opt/kubernetes/ssl/server-key.pem \\</span></span><br><span class="line"><span class="string">--client-ca-file=/opt/kubernetes/ssl/ca.pem \\</span></span><br><span class="line"><span class="string">--service-account-key-file=/opt/kubernetes/ssl/ca-key.pem \\</span></span><br><span class="line"><span class="string">--etcd-cafile=/opt/etcd/ssl/ca.pem \\</span></span><br><span class="line"><span class="string">--etcd-certfile=/opt/etcd/ssl/server.pem \\</span></span><br><span class="line"><span class="string">--etcd-keyfile=/opt/etcd/ssl/server-key.pem \\</span></span><br><span class="line"><span class="string">--audit-log-maxage=30 \\</span></span><br><span class="line"><span class="string">--audit-log-maxbackup=3 \\</span></span><br><span class="line"><span class="string">--audit-log-maxsize=100 \\</span></span><br><span class="line"><span class="string">--audit-log-path=/opt/kubernetes/logs/k8s-audit.log"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说明：</span></span><br><span class="line"><span class="comment"># –logtostderr                      启用日志</span></span><br><span class="line"><span class="comment"># —v                                日志等级</span></span><br><span class="line"><span class="comment"># –etcd-servers etcd                集群地址</span></span><br><span class="line"><span class="comment"># –bind-address                     监听地址</span></span><br><span class="line"><span class="comment"># –secure-port https                安全端口</span></span><br><span class="line"><span class="comment"># –advertise-address                集群通告地址</span></span><br><span class="line"><span class="comment"># –allow-privileged                 启用授权</span></span><br><span class="line"><span class="comment"># –service-cluster-ip-range         Service 虚拟 IP 地址段</span></span><br><span class="line"><span class="comment"># –enable-admission-plugins         准入控制模块</span></span><br><span class="line"><span class="comment"># –authorization-mode           认证授权，启用 RBAC 授权和节点自管理</span></span><br><span class="line"><span class="comment"># –enable-bootstrap-token-auth  启用 TLS bootstrap 功能</span></span><br><span class="line"><span class="comment"># –token-auth-file              token 文件</span></span><br><span class="line"><span class="comment"># –service-node-port-range      Service Node 类型默认分配端口范围</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 systemd 管理</span></span><br><span class="line">cat &gt; /usr/lib/systemd/system/kube-apiserver.service &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes API Server</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">After=etcd.service</span><br><span class="line">Wants=etcd.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/opt/kubernetes/cfg/kube-apiserver.conf</span><br><span class="line">ExecStart=/opt/kubernetes/bin/kube-apiserver <span class="variable">$KUBE_APISERVER_OPTS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> kube-apiserver &amp;&amp; systemctl start kube-apiserver</span><br></pre></td></tr></table></figure><h3 id="部署-scheduler-组件"><a href="#部署-scheduler-组件" class="headerlink" title="部署 scheduler 组件"></a>部署 scheduler 组件</h3><p><strong>master</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 scheduler 配置文件</span></span><br><span class="line">cat &gt; /opt/kubernetes/cfg/kube-scheduler.conf &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">KUBE_SCHEDULER_OPTS=<span class="string">"--logtostderr=true \\</span></span><br><span class="line"><span class="string">--v=3 \\</span></span><br><span class="line"><span class="string">--log-dir=/opt/kubernetes/logs \\</span></span><br><span class="line"><span class="string">--master=127.0.0.1:8080 \\</span></span><br><span class="line"><span class="string">--address=127.0.0.1 \\</span></span><br><span class="line"><span class="string">--leader-elect"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># –master 连接本地 apiserver</span></span><br><span class="line"><span class="comment"># –leader-elect 当该组件启动多个时，自动选举（HA）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 systemd 管理</span></span><br><span class="line">cat &gt; /usr/lib/systemd/system/kube-scheduler.service &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Scheduler</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/opt/kubernetes/cfg/kube-scheduler.conf</span><br><span class="line">ExecStart=/opt/kubernetes/bin/kube-scheduler <span class="variable">$KUBE_SCHEDULER_OPTS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> kube-scheduler &amp;&amp; systemctl start kube-scheduler</span><br></pre></td></tr></table></figure><h3 id="部署-controller-manager-组件"><a href="#部署-controller-manager-组件" class="headerlink" title="部署 controller-manager 组件"></a>部署 controller-manager 组件</h3><p><strong>master</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建配置文件</span></span><br><span class="line">cat &gt; /opt/kubernetes/cfg/kube-controller-manager.conf &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">KUBE_CONTROLLER_MANAGER_OPTS=<span class="string">"--logtostderr=true \\</span></span><br><span class="line"><span class="string">--v=5 \\</span></span><br><span class="line"><span class="string">--log-dir=/opt/kubernetes/logs \\</span></span><br><span class="line"><span class="string">--leader-elect=true \\</span></span><br><span class="line"><span class="string">--master=127.0.0.1:8080 \\</span></span><br><span class="line"><span class="string">--address=127.0.0.1 \\</span></span><br><span class="line"><span class="string">--allocate-node-cidrs=true \\</span></span><br><span class="line"><span class="string">--cluster-cidr=10.244.0.0/16 \\</span></span><br><span class="line"><span class="string">--service-cluster-ip-range=10.0.0.0/24 \\</span></span><br><span class="line"><span class="string">--cluster-name=kubernetes \\</span></span><br><span class="line"><span class="string">--cluster-signing-cert-file=/opt/kubernetes/ssl/ca.pem \\</span></span><br><span class="line"><span class="string">--cluster-signing-key-file=/opt/kubernetes/ssl/ca-key.pem  \\</span></span><br><span class="line"><span class="string">--root-ca-file=/opt/kubernetes/ssl/ca.pem \\</span></span><br><span class="line"><span class="string">--service-account-private-key-file=/opt/kubernetes/ssl/ca-key.pem \\</span></span><br><span class="line"><span class="string">--experimental-cluster-signing-duration=87600h0m0s"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 systemd 管理</span></span><br><span class="line">cat &gt; /usr/lib/systemd/system/kube-controller-manager.service &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Controller Manager</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/opt/kubernetes/cfg/kube-controller-manager.conf</span><br><span class="line">ExecStart=/opt/kubernetes/bin/kube-controller-manager <span class="variable">$KUBE_CONTROLLER_MANAGER_OPTS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> kube-controller-manager &amp;&amp; systemctl restart kube-controller-manager</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查</span></span><br><span class="line">kubectl get cs</span><br></pre></td></tr></table></figure><h3 id="Node-节点部署组件"><a href="#Node-节点部署组件" class="headerlink" title="Node 节点部署组件"></a>Node 节点部署组件</h3><p><strong>master</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 kubelet-bootstrap 用户绑定到系统集群角色</span></span><br><span class="line">kubectl create clusterrolebinding kubelet-bootstrap \\</span><br><span class="line">  --clusterrole=system:node-bootstrapper \\</span><br><span class="line">  --user=kubelet-bootstrap</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /opt/kubernetes/ssl/</span><br><span class="line">cat &gt; kubernetes.sh &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 kubelet bootstrapping kubeconfig </span></span><br><span class="line">BOOTSTRAP_TOKEN=a113e32020e784c521c13alan19lcan</span><br><span class="line">KUBE_APISERVER=<span class="string">"&lt;https://172.16.1.10:6443&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置集群参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \\</span><br><span class="line">  --certificate-authority=./ca.pem \\</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \\</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \\</span><br><span class="line">  --kubeconfig=bootstrap.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置客户端认证参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials kubelet-bootstrap \\</span><br><span class="line">  --token=<span class="variable">$&#123;BOOTSTRAP_TOKEN&#125;</span> \\</span><br><span class="line">  --kubeconfig=bootstrap.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置上下文参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-context default \\</span><br><span class="line">  --cluster=kubernetes \\</span><br><span class="line">  --user=kubelet-bootstrap \\</span><br><span class="line">  --kubeconfig=bootstrap.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认上下文</span></span><br><span class="line">kubectl config use-context default --kubeconfig=bootstrap.kubeconfig</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 kube-proxy kubeconfig 文件</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \\</span><br><span class="line">  --certificate-authority=./ca.pem \\</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \\</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \\</span><br><span class="line">  --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials kube-proxy \\</span><br><span class="line">  --client-certificate=./kube-proxy.pem \\</span><br><span class="line">  --client-key=./kube-proxy-key.pem \\</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \\</span><br><span class="line">  --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line">kubectl config <span class="built_in">set</span>-context default \\</span><br><span class="line">  --cluster=kubernetes \\</span><br><span class="line">  --user=kube-proxy \\</span><br><span class="line">  --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sh kubernetes.sh</span><br><span class="line">scp bootstrap.kubeconfig kube-proxy.kubeconfig k8s-node01:/opt/kubernetes/cfg/</span><br><span class="line">scp bootstrap.kubeconfig kube-proxy.kubeconfig k8s-node02:/opt/kubernetes/cfg/</span><br><span class="line">scp ca.pem kube-proxy.pem kube-proxy-key.pem k8s-node01:/opt/kubernetes/ssl/</span><br><span class="line">scp ca.pem kube-proxy.pem kube-proxy-key.pem k8s-node02:/opt/kubernetes/ssl/</span><br></pre></td></tr></table></figure><h3 id="部署-kubelet-组件"><a href="#部署-kubelet-组件" class="headerlink" title="部署 kubelet 组件"></a>部署 kubelet 组件</h3><p><strong>node01</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/kubernetes/bin/</span><br><span class="line">wget &lt;https://download.rocc.top/kubernetes/v1.17.0/kubernetes-server/server/bin/kubelet&gt;</span><br><span class="line">wget &lt;https://download.rocc.top/kubernetes/v1.17.0/kubernetes-server/server/bin/kube-proxy&gt;</span><br><span class="line">chmod +x *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置文件</span></span><br><span class="line">cat &gt; /opt/kubernetes/cfg/kubelet.config &lt;&lt; EOF</span><br><span class="line">kind: KubeletConfiguration</span><br><span class="line">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class="line">address: 172.16.1.2</span><br><span class="line">port: 10250</span><br><span class="line">readOnlyPort: 10255</span><br><span class="line">cgroupDriver: cgroupfs</span><br><span class="line">clusterDNS: [<span class="string">"10.0.0.2"</span>]</span><br><span class="line">clusterDomain: cluster.local</span><br><span class="line">failSwapOn: <span class="literal">false</span></span><br><span class="line">authentication:</span><br><span class="line">  anonymous:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt; /opt/kubernetes/cfg/kubelet.conf &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">KUBELET_OPTS=<span class="string">"--logtostderr=true \\</span></span><br><span class="line"><span class="string">--v=3 \\</span></span><br><span class="line"><span class="string">--hostname-override=k8s-node01 \\</span></span><br><span class="line"><span class="string">--kubeconfig=/opt/kubernetes/cfg/kubelet.kubeconfig \\</span></span><br><span class="line"><span class="string">--bootstrap-kubeconfig=/opt/kubernetes/cfg/bootstrap.kubeconfig \\</span></span><br><span class="line"><span class="string">--config=/opt/kubernetes/cfg/kubelet.config \\</span></span><br><span class="line"><span class="string">--cert-dir=/opt/kubernetes/ssl \\</span></span><br><span class="line"><span class="string">--pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google-containers/pause-amd64:3.0"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="comment"># –hostname-override            在集群中显示的主机名</span></span><br><span class="line"><span class="comment"># –kubeconfig                   指定 kubeconfig 文件位置，会自动生成</span></span><br><span class="line"><span class="comment"># –bootstrap-kubeconfig         指定刚才生成的 bootstrap.kubeconfig 文件</span></span><br><span class="line"><span class="comment"># –cert-dir                     颁发证书存放位置</span></span><br><span class="line"><span class="comment"># –pod-infra-container-image    管理 Pod 网络的镜像</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 systemd 管理</span></span><br><span class="line">cat &gt; /usr/lib/systemd/system/kubelet.service &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kubelet</span><br><span class="line">After=docker.service</span><br><span class="line">Requires=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=/opt/kubernetes/cfg/kubelet.conf</span><br><span class="line">ExecStart=/opt/kubernetes/bin/kubelet <span class="variable">$KUBELET_OPTS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">KillMode=process</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure><p><strong>node02</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/kubernetes/bin/</span><br><span class="line">wget &lt;https://download.rocc.top/kubernetes/v1.17.0/kubernetes-server/server/bin/kubelet&gt;</span><br><span class="line">wget &lt;https://download.rocc.top/kubernetes/v1.17.0/kubernetes-server/server/bin/kube-proxy&gt;</span><br><span class="line">chmod +x *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置文件</span></span><br><span class="line">cat &gt; /opt/kubernetes/cfg/kubelet.config &lt;&lt; EOF</span><br><span class="line">kind: KubeletConfiguration</span><br><span class="line">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class="line">address: 172.16.1.3</span><br><span class="line">port: 10250</span><br><span class="line">readOnlyPort: 10255</span><br><span class="line">cgroupDriver: cgroupfs</span><br><span class="line">clusterDNS: [<span class="string">"10.0.0.2"</span>]</span><br><span class="line">clusterDomain: cluster.local</span><br><span class="line">failSwapOn: <span class="literal">false</span></span><br><span class="line">authentication:</span><br><span class="line">  anonymous:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt; /opt/kubernetes/cfg/kubelet.conf &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">KUBELET_OPTS=<span class="string">"--logtostderr=true \\</span></span><br><span class="line"><span class="string">--v=3 \\</span></span><br><span class="line"><span class="string">--log-dir=/opt/kubernetes/logs \\</span></span><br><span class="line"><span class="string">--network-plugin=cni \\</span></span><br><span class="line"><span class="string">--hostname-override=k8s-node02 \\</span></span><br><span class="line"><span class="string">--kubeconfig=/opt/kubernetes/cfg/kubelet.kubeconfig \\</span></span><br><span class="line"><span class="string">--bootstrap-kubeconfig=/opt/kubernetes/cfg/bootstrap.kubeconfig \\</span></span><br><span class="line"><span class="string">--config=/opt/kubernetes/cfg/kubelet.config \\</span></span><br><span class="line"><span class="string">--cert-dir=/opt/kubernetes/ssl \\</span></span><br><span class="line"><span class="string">--pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google-containers/pause-amd64:3.0"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="comment"># –hostname-override            在集群中显示的主机名</span></span><br><span class="line"><span class="comment"># –kubeconfig                   指定 kubeconfig 文件位置，会自动生成</span></span><br><span class="line"><span class="comment"># –bootstrap-kubeconfig         指定刚才生成的 bootstrap.kubeconfig 文件</span></span><br><span class="line"><span class="comment"># –cert-dir                     颁发证书存放位置</span></span><br><span class="line"><span class="comment"># –pod-infra-container-image    管理 Pod 网络的镜像</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 systemd 管理</span></span><br><span class="line">cat &gt; /usr/lib/systemd/system/kubelet.service &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kubelet</span><br><span class="line">After=docker.service</span><br><span class="line">Requires=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=/opt/kubernetes/cfg/kubelet.conf</span><br><span class="line">ExecStart=/opt/kubernetes/bin/kubelet <span class="variable">$KUBELET_OPTS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">KillMode=process</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure><p><strong>master</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl certificate approve `kubectl get csr | awk <span class="string">'NR&gt;1&#123;print $1&#125;'</span>`</span><br></pre></td></tr></table></figure><h3 id="部署-kube-proxy-组件"><a href="#部署-kube-proxy-组件" class="headerlink" title="部署 kube-proxy 组件"></a>部署 kube-proxy 组件</h3><p><strong>node01</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 kube-proxy 配置文件</span></span><br><span class="line">cat &gt; /opt/kubernetes/cfg/kube-proxy.conf &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">KUBE_PROXY_OPTS=<span class="string">"--logtostderr=true \\</span></span><br><span class="line"><span class="string">--v=4 \\</span></span><br><span class="line"><span class="string">--hostname-override=172.16.1.2 \\</span></span><br><span class="line"><span class="string">--cluster-cidr=10.0.0.0/24 \\</span></span><br><span class="line"><span class="string">--kubeconfig=/opt/kubernetes/cfg/kube-proxy.kubeconfig"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 systemd 管理 Kube-proxy 组件</span></span><br><span class="line">cat &gt; /usr/lib/systemd/system/kube-proxy.service &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Proxy</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/opt/kubernetes/cfg/kube-proxy.conf</span><br><span class="line">ExecStart=/opt/kubernetes/bin/kube-proxy <span class="variable">$KUBE_PROXY_OPTS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> kube-proxy &amp;&amp; systemctl start kube-proxy</span><br></pre></td></tr></table></figure><p><strong>node02</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 kube-proxy 配置文件</span></span><br><span class="line">cat &gt; /opt/kubernetes/cfg/kube-proxy.conf &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">KUBE_PROXY_OPTS=<span class="string">"--logtostderr=true \\</span></span><br><span class="line"><span class="string">--v=4 \\</span></span><br><span class="line"><span class="string">--hostname-override=172.16.1.3 \\</span></span><br><span class="line"><span class="string">--cluster-cidr=10.0.0.0/24 \\</span></span><br><span class="line"><span class="string">--kubeconfig=/opt/kubernetes/cfg/kube-proxy.kubeconfig"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 systemd 管理 Kube-proxy 组件</span></span><br><span class="line">cat &gt; /usr/lib/systemd/system/kube-proxy.service &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Proxy</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/opt/kubernetes/cfg/kube-proxy.conf</span><br><span class="line">ExecStart=/opt/kubernetes/bin/kube-proxy <span class="variable">$KUBE_PROXY_OPTS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> kube-proxy &amp;&amp; systemctl start kube-proxy</span><br></pre></td></tr></table></figure><h3 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h3><p><strong>node</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget &lt;https://download.rocc.top/kubernetes/cni/cni-plugins-linux-amd64-v0.8.5.tgz&gt;</span><br><span class="line">mkdir -p /opt/cni/bin /etc/cni/net.d/</span><br><span class="line">tar xf cni-plugins-linux-amd64-v0.8.5.tgz -C /opt/cni/bin/</span><br></pre></td></tr></table></figure><p><strong><em>master\</em></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f &lt;https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml&gt;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl run nginx --image&#x3D;nginx --replicas&#x3D;3</span><br><span class="line">kubectl expose deployment nginx --port&#x3D;80 --type&#x3D;NodePort</span><br><span class="line">kubectl get svc</span><br></pre></td></tr></table></figure><h3 id="安装-kuboard-可视化界面"><a href="#安装-kuboard-可视化界面" class="headerlink" title="安装 kuboard 可视化界面"></a>安装 kuboard 可视化界面</h3><p><strong>master</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f &lt;https://kuboard.cn/install-script/kuboard.yaml&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看运行状态</span></span><br><span class="line">kubectl get pods -l k8s.eip.work/name=kuboard -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 token</span></span><br><span class="line">kubectl -n kube-system get secret $(kubectl -n kube-system get secret | grep kuboard-user | awk <span class="string">'&#123;print $1&#125;'</span>) -o go-template=<span class="string">'&#123;&#123;.data.token&#125;&#125;'</span> | base64 -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看暴露的端口</span></span><br><span class="line">kubectl get svc -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问任意 node 节点的 IP:暴露的端口</span></span><br></pre></td></tr></table></figure><h3 id="安装-coredns"><a href="#安装-coredns" class="headerlink" title="安装 coredns"></a>安装 coredns</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;https://github.com/coredns/deployment.git&gt;</span><br><span class="line"><span class="built_in">cd</span> deployment/kubernetes</span><br><span class="line">yum install jq -y</span><br><span class="line">./deploy.sh -i 3.3.3.254 &gt; coredns.yaml</span><br><span class="line">kubectl apply -f coredns.yaml</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 基础入门</title>
      <link href="/2019/10/01/Docker%20%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
      <url>/2019/10/01/Docker%20%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-简介"><a href="#Docker-简介" class="headerlink" title="Docker 简介"></a>Docker 简介</h1><h3 id="Docker-是什么"><a href="#Docker-是什么" class="headerlink" title="Docker 是什么"></a>Docker 是什么</h3><p>简单地讲，可以将 Docker 容器理解为一种轻量级的沙盒（ sandbox）。 每个容器内运行着一个或多个应用，不同的容器相互隔离，容器之间也可以通过网络互相通信。容器的创建和停止十分快速，几乎跟创建和终止原生应用一致；另外，容器自身对系统资源的额外需求也十分有限，远远低于传统虚拟机。很多时候，甚至直接把容器当作应用本身也没有任何问题。</p><h3 id="Docker-的好处"><a href="#Docker-的好处" class="headerlink" title="Docker 的好处"></a>Docker 的好处</h3><p>以服务器迁移为例，Docker 提供了一种更为聪明的方式，通过容器来打包应用、解耦应用和运行平台。这意味着迁移的时候，只需要在新的服务器上启动需要的容器就可以了，无论新旧服务器是否是同一类型的平台。这无疑将帮助我们节约大量的宝贵时间，并降低部署过程出现问题的风险。</p><h3 id="Docker-在开发和运维中的优势"><a href="#Docker-在开发和运维中的优势" class="headerlink" title="Docker 在开发和运维中的优势"></a>Docker 在开发和运维中的优势</h3><ul><li><p>更快速的交付和部署</p><p>使用 Docker ，开发人员可以使用镜像来快速构建一套标准的开发环境；开发完成之后，测试和运维人员可以直接使用完全相同的环境来部署代码。只要是开发测试过的代码，就可以确保在生产环境无缝运行。Docker 可以快速创建和删除容器，实现快速迭代，节约开发、测试、部署的大量时间。并且，整个过程全程可见，使团队更容易理解应用的创建和工作过程。</p></li><li><p>更高效的资源利用</p><p>运行 Docker 容器不需要额外的虚拟化管理程序（ Virtual MachineManager, VMM ，以及 Hypervisor ）的支持， Docker 是内核级的虚拟化，可以实现更高的性能，同时对资源的额外需求很低。与传统虚拟机方式相比， Docker 的性能要提高 1 ~ 2 个数量级。</p></li><li><p>更轻松的迁移和扩展</p><p>Docker 容器几乎可以在任意的平台上运行，包括物理机、虚拟机、公有云、私有云、个人电脑、 服务器等，同时支持主流的操作系统发行版本。这种兼容性让用户可以在不同平台之间轻松地迁移应用。</p></li><li><p>更简单的更新管理</p><p>使用 Dockerfile ，只需要小小的配置修改，就可以替代以往大量的更新工作。所有修改都以增量的方式被分发和更新，从而实现自动化并且高效的容器管理。</p></li></ul><h3 id="Docker-核心概念"><a href="#Docker-核心概念" class="headerlink" title="Docker 核心概念"></a>Docker 核心概念</h3><ol><li>Docker 镜像</li></ol><p>Docker 镜像类似于虚拟机镜像，可以将它理解为一个只读的模板。</p><p>例如，一个镜像可以包含一个基本的操作系统环境，里面仅安装了 Apache 应用程序（或用户需要的其他软件） 可以把它称为一个 Apache 镜像。</p><p>镜像是创建 Docker 容器的基础。</p><p>通过版本管理和增量的文件系统， Docker 提供了一套十分简单的机制来创建和更新现有的镜像，用户甚至可以从网上下载一个已经做好的应用镜像，并直接使用。</p><ol start="2"><li>Docker 容器</li></ol><p>Docker 容器类似于一个轻量级的沙箱， Docker 利用容器来运行和隔离应用容器是从镜像创建的应用运行实例 它可以启动、开始、停止、删除，而这些容器都是彼此相互隔离、互不可见的。</p><p>可以把容器看作一个简易版的 Linux 系统环境（包括 root 用户权限、进程空间、用户空间和网络空间等）以及运行在其中的应用程序打包而成的盒子。</p><p>镜像自身是只读的。容器从镜像启动的时候，会在镜像的最上层创建一个可写层。</p><ol start="3"><li>Docker 仓库</li></ol><p>Docker 仓库类似于代码仓库，是 Docker 集中存放镜像文件的场所。</p><p>根据所存储的镜像公开分享与否， Docker 仓库可以分为公开仓库（Public ）和私有仓库（ Private ）两种形式。</p><p>目前，最大的公开仓库是官方提供的 Docker Hub ，其中存放着数量庞大的镜像供用户下国内不少云服务提供商（如腾讯云 阿里云等）也提供了仓库的本地源，可以提供稳定的国内访问。</p><p>当然，用户如果不希望公开分享自己的镜像文件， Docker 也支持用户在本地网络内创建一个只能自己访问的私有仓库。</p><p>当用户创建了自己的镜像之后就可以使用 push 命令将它上传到指定的公有或者私有仓库。这样用户下次在另外一台机器上使用该镜像时，只需要将其从仓库上 pull 下来就可以了。</p><h1 id="安装-Docker-引擎"><a href="#安装-Docker-引擎" class="headerlink" title="安装 Docker 引擎"></a>安装 Docker 引擎</h1><h2 id="Centos-7-环境下安装-Docker"><a href="#Centos-7-环境下安装-Docker" class="headerlink" title="Centos 7 环境下安装 Docker"></a>Centos 7 环境下安装 Docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载官方源</span></span><br><span class="line">wget -O /etc/yum.repos.d/docker-ce.repo &lt;https://download.docker.com/linux/centos/docker-ce.repo&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换为腾讯源</span></span><br><span class="line">sed -i <span class="string">'s+download.docker.com+mirrors.cloud.tencent.com/docker-ce+'</span> /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># yum 安装</span></span><br><span class="line">yum install docker-ce -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 docker 并设置为开机自启</span></span><br><span class="line">systemctl start docker &amp;&amp; systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置腾讯云 docker 镜像加速</span></span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">"registry-mirrors"</span>: [</span><br><span class="line">       <span class="string">"https://mirror.ccs.tencentyun.com"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure><h1 id="基本的-Docker-镜像和容器管理命令"><a href="#基本的-Docker-镜像和容器管理命令" class="headerlink" title="基本的 Docker 镜像和容器管理命令"></a>基本的 Docker 镜像和容器管理命令</h1><h3 id="搜索-docker-hub-仓库中的镜像"><a href="#搜索-docker-hub-仓库中的镜像" class="headerlink" title="搜索 docker hub 仓库中的镜像"></a>搜索 docker hub 仓库中的镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search nginx</span><br></pre></td></tr></table></figure><p>docker search 镜像名称</p><p>-s 数值 ：只显示 STARS 达到指定 数值 以上的镜像。</p><h3 id="获取指定版本的镜像"><a href="#获取指定版本的镜像" class="headerlink" title="获取指定版本的镜像"></a>获取指定版本的镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx:latest</span><br></pre></td></tr></table></figure><p>docker pull 镜像名称：镜像版本</p><p>如果不添加镜像版本，默认会获取最新版本的镜像。</p><h3 id="查看已下载的镜像"><a href="#查看已下载的镜像" class="headerlink" title="查看已下载的镜像"></a>查看已下载的镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>-q ：只显示镜像 ID</p><p>–no-trunc ：不截断内容显示，显示各个参数的全部信息</p><h3 id="删除已下载的镜像"><a href="#删除已下载的镜像" class="headerlink" title="删除已下载的镜像"></a>删除已下载的镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi nginx</span><br></pre></td></tr></table></figure><p>docker rmi ”镜像名称 或 镜像 ID“</p><p>如果有基于该镜像的容器，则需要先删除相关容器后，再进行删除镜像操作。</p><h3 id="运行一个-Nginx-容器"><a href="#运行一个-Nginx-容器" class="headerlink" title="运行一个 Nginx 容器"></a>运行一个 Nginx 容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 81:80 -v /docker/nginx:/usr/share/nginx/html --name web nginx</span><br></pre></td></tr></table></figure><p>docker run -d -p 宿主机端口：容器端口 -v 宿主机目录：容器目录 —name 容器别名 镜像名称</p><p>-d ：后台运行</p><p>-p ：宿主机端口：容器端口，将容器的某个端口映射到宿主机的某个端口</p><p>-v ：宿主机目录：容器目录，将容器的某个目录挂载到宿主机的某个目录</p><p>-e ：当启动容器时传递环境变量及其值</p><p>—name ：容器别名</p><p>—rm ：容器在终止后会立刻删除。—rm 和 -d 参数不能同时使用。</p><h3 id="查看所有运行中的容器"><a href="#查看所有运行中的容器" class="headerlink" title="查看所有运行中的容器"></a>查看所有运行中的容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>-a ：查看所有容器</p><p>-q ：只显示容器 ID</p><p>–no-trunc ：不截断内容显示，显示各个参数的全部信息</p><h3 id="查看容器详细信息（容器-Id-创建时间、路径、状态、镜像、配置等）"><a href="#查看容器详细信息（容器-Id-创建时间、路径、状态、镜像、配置等）" class="headerlink" title="查看容器详细信息（容器 Id 创建时间、路径、状态、镜像、配置等）"></a>查看容器详细信息（容器 Id 创建时间、路径、状态、镜像、配置等）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 453cbf7a755a</span><br></pre></td></tr></table></figure><p>docker inspect ”容器 ID 或 容器别名”</p><h3 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs web</span><br></pre></td></tr></table></figure><p>docker logs “容器名称 或 容器 ID”</p><h3 id="查看容器（在宿主机上的）进程"><a href="#查看容器（在宿主机上的）进程" class="headerlink" title="查看容器（在宿主机上的）进程"></a>查看容器（在宿主机上的）进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top web</span><br></pre></td></tr></table></figure><p>docker top “容器名称 或 容器 ID”</p><h3 id="显示-CPU-、内存、存储、网络等使用情况的统计信息"><a href="#显示-CPU-、内存、存储、网络等使用情况的统计信息" class="headerlink" title="显示 CPU 、内存、存储、网络等使用情况的统计信息"></a>显示 CPU 、内存、存储、网络等使用情况的统计信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stats</span><br></pre></td></tr></table></figure><p>-a ：输出所有容器统计信息，默认仅在运行中</p><h3 id="复制本地文件到容器"><a href="#复制本地文件到容器" class="headerlink" title="复制本地文件到容器"></a>复制本地文件到容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp index.html modest_mendel:/usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure><p>docker cp 本地文件 “容器 ID 或容器别名”:容器目标路径</p><p>－ a ：复制文件会带有原始的 uid/gid 信息</p><p>－ L ：当原路径为软连接时，默认只复制链接信息，使用该选项会复制链接的目标内容</p><h3 id="查看容器内的数据变更情况"><a href="#查看容器内的数据变更情况" class="headerlink" title="查看容器内的数据变更情况"></a>查看容器内的数据变更情况</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker diff modest_mendel</span><br></pre></td></tr></table></figure><p>docker diff  “容器 ID 或容器别名”</p><h3 id="查看容器的端口映射"><a href="#查看容器的端口映射" class="headerlink" title="查看容器的端口映射"></a>查看容器的端口映射</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker port modest_mendel</span><br></pre></td></tr></table></figure><p>docker port “容器 ID 或容器别名”</p><h3 id="访问容器内部系统"><a href="#访问容器内部系统" class="headerlink" title="访问容器内部系统"></a>访问容器内部系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it web bash</span><br></pre></td></tr></table></figure><p>docker exec -it “容器 ID 或容器别名” “容器内部系统中的 shell”</p><h3 id="更新容器运行时的配置"><a href="#更新容器运行时的配置" class="headerlink" title="更新容器运行时的配置"></a>更新容器运行时的配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 限制总配额为 1 秒，容器 test 所占用时间为 10% </span></span><br><span class="line">docker update --cpu-quota 1000000 modest_mendel</span><br><span class="line">docker update --cpu-period 100000 modest_mendel</span><br></pre></td></tr></table></figure><p>－blkio-weight uintl6 ：更新块 IO 限制， 10 ~ 1000 ，默认值为 0，代表无限制；</p><p>－ cpu-period int ：限制 CPU 调度器 CFS (Completely Fair Scheduler ）使用时间，单位为微秒，最小 1000;</p><p>－ cpu-quota int ：限制 CPU 调度器 CFS 配额，单位为微秒，最小 1000;</p><p>－ cpu-rt period int ：限制 CPU 调度器的实时周期，单位为微秒;</p><p>－ cpu-rt runtime int ：限制 CPU 调度器的实时运行时，单位为微秒；</p><p>－ c, -cpu-shares int 限制 CPU 使用份额；</p><p>－ cpus decimal ：限制 CPU 个数；</p><p>－ cpuset-cpus string ：允许使用的 CPU 核，如 0-3, 0,1;</p><p>－ cpuset mems string ：允许使用的内存块，如 0-3, 0, 1;</p><p>－ kernel-memor bytes ：限制使用的内核内存；</p><p>－ m, -memory bytes ：限制使用的内存；</p><p>－memory-reservation bytes ：内存软限制；</p><p>－memory-swap bytes ：内存加上缓存区的限制，-1 表示为对缓冲区无限制；</p><p>－ restart string ：容器退出后的重启策略。</p><h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop web</span><br></pre></td></tr></table></figure><p>docker stop “容器名称 或 容器 ID”</p><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start web</span><br></pre></td></tr></table></figure><p>docker start “容器名称 或 容器 ID”</p><h3 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart web</span><br></pre></td></tr></table></figure><p>docker restart “容器名称 或 容器 ID”</p><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm web</span><br></pre></td></tr></table></figure><p>docker rm “容器名称 或 容器 ID”</p><p>-f ：强制删除。rm 不能删除正在运行的容器，加上 -f 参数可强制删除正在运行的容器。</p><h3 id="构建镜像-dockerfile"><a href="#构建镜像-dockerfile" class="headerlink" title="构建镜像(dockerfile)"></a>构建镜像(dockerfile)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t wp:v1.0 .</span><br></pre></td></tr></table></figure><p>docker build -t 自定义镜像名称：版本  “Dockerfile 文件存放目录的路径”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dockerfile 文件示例</span></span><br><span class="line">cat &gt; Dockerfile &lt;&lt; EOF</span><br><span class="line">FROM nginx:latest</span><br><span class="line"></span><br><span class="line">LABEL version=<span class="string">"1.0"</span> maintainer=<span class="string">"docker user &lt;docker_user@github&gt;"</span></span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">echo</span> Testing Dockerfile ... &gt; /usr/share/nginx/html/index.html</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="导出容器"><a href="#导出容器" class="headerlink" title="导出容器"></a>导出容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">export</span> 2f41f4b4bed1 &gt; nginx-test-images.tar</span><br></pre></td></tr></table></figure><p>docker export “容器 ID 或 容器名称” &gt; 镜像包名称</p><h3 id="导入容器"><a href="#导入容器" class="headerlink" title="导入容器"></a>导入容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker import - new-nginx-test:v1.1 &lt; nginx-test-images.tar</span><br></pre></td></tr></table></figure><p>docker import - 自定义镜像名称：版本 &lt; 镜像包</p><h3 id="创建镜像-根据容器"><a href="#创建镜像-根据容器" class="headerlink" title="创建镜像(根据容器)"></a>创建镜像(根据容器)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -m <span class="string">"testing-001"</span> -a <span class="string">"Alan"</span> 9d0d402af82a <span class="built_in">test</span>-001:v1.0</span><br></pre></td></tr></table></figure><p>docker commit -m “提交信息” -a “作者” “容器 ID” “自定义镜像名称：版本”</p><p>-p ：提交时暂停容器运行。</p><p>-c ：提交的时候执行 Dockerfile 指令，包括 CMD ENTRYPOINT ENV  EXPOSE LABEL ONBUILD USER VOLUME WORKDIR 等；</p><h3 id="保存镜像（生成镜像包文件）"><a href="#保存镜像（生成镜像包文件）" class="headerlink" title="保存镜像（生成镜像包文件）"></a>保存镜像（生成镜像包文件）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将一个镜像保存为一个镜像包文件</span></span><br><span class="line">docker save 590c8328bda3 &gt; save-images-1.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将多个镜像保存为一个镜像包文件</span></span><br><span class="line">docker save -o save-images-2.tar tomcat:latest new-nginx-test:v1.1</span><br></pre></td></tr></table></figure><p>docker save ”镜像 ID 或 镜像名称：版本“ &gt; 镜像包文件名称</p><p>docker save -o 镜像包文件名称 ”镜像 ID 或 镜像名称：版本“ ”镜像 ID 或 镜像名称：版本“ …</p><h3 id="载入镜像（导入镜像包文件）"><a href="#载入镜像（导入镜像包文件）" class="headerlink" title="载入镜像（导入镜像包文件）"></a>载入镜像（导入镜像包文件）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load &lt; save-images-1.tar</span><br></pre></td></tr></table></figure><p>docker load &lt; 镜像包文件</p><h3 id="标记镜像"><a href="#标记镜像" class="headerlink" title="标记镜像"></a>标记镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag wp:v1.0 10.0.2.3:5000/registry-images-test:v1.1</span><br></pre></td></tr></table></figure><p>docker tag ”源容器名称：版本“ ”标记后的容器名称：版本“</p><h1 id="搭建-Docker-私有仓库"><a href="#搭建-Docker-私有仓库" class="headerlink" title="搭建 Docker 私有仓库"></a>搭建 Docker 私有仓库</h1><h2 id="1-搭建私有-Docker-Registry"><a href="#1-搭建私有-Docker-Registry" class="headerlink" title="1. 搭建私有 Docker Registry"></a>1. 搭建私有 Docker Registry</h2><h3 id="方法一：使用-YUM-安装-docker-distribution"><a href="#方法一：使用-YUM-安装-docker-distribution" class="headerlink" title="方法一：使用 YUM 安装 docker-distribution"></a>方法一：使用 YUM 安装 docker-distribution</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-distribution -y</span><br><span class="line">systemctl start docker-distribution &amp;&amp; systemctl <span class="built_in">enable</span> docker-distribution</span><br></pre></td></tr></table></figure><h3 id="方式二：使用容器运行"><a href="#方式二：使用容器运行" class="headerlink" title="方式二：使用容器运行"></a>方式二：使用容器运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart always --name registry -p 5000:5000 -v /var/lib/registry:/var/lib/registry -d registry</span><br></pre></td></tr></table></figure><h3 id="解决无法上传下载镜像（默认只支持-https-协议）的问题"><a href="#解决无法上传下载镜像（默认只支持-https-协议）的问题" class="headerlink" title="解决无法上传下载镜像（默认只支持 https 协议）的问题"></a>解决无法上传下载镜像（默认只支持 https 协议）的问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 docker daemon 文件并重启服务</span></span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">"registry-mirrors"</span>: [<span class="string">"&lt;https://mirror.ccs.tencentyun.com&gt;"</span>],</span><br><span class="line">   <span class="string">"insecure-registries"</span>: [<span class="string">"10.0.2.3:5000"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>加入 “insecure-registries”: [“10.0.2.3:5000”] 这项参数，可以理解为将此私有仓库认证为安全仓库。其他客户端需要上传镜像或者从此仓库下载镜像，也需要修改该客户端本地的 docker daemon 文件加入此参数并重启 docker 服务。</p><h3 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需将要上传的镜像标记为指定的名称前缀，例如上传 tomcat 镜像</span></span><br><span class="line">docker tag busybox:latest 10.0.2.3:5000/busybox:v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传指定镜像到私有仓库</span></span><br><span class="line">docker push 10.0.2.3:5000/busybox:v1.0</span><br></pre></td></tr></table></figure><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先删除原有的镜像，确保本地没有此镜像</span></span><br><span class="line">docker rmi 10.0.2.3:5000/busybox:v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从私有仓库拉取指定的镜像</span></span><br><span class="line">docker pull 10.0.2.3:5000/busybox:v1.0</span><br></pre></td></tr></table></figure><h3 id="查看目前有哪些镜像"><a href="#查看目前有哪些镜像" class="headerlink" title="查看目前有哪些镜像"></a>查看目前有哪些镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /var/lib/registry/docker/registry/v2/repositories</span><br></pre></td></tr></table></figure><h2 id="2-搭建私有仓库-Harbor"><a href="#2-搭建私有仓库-Harbor" class="headerlink" title="2. 搭建私有仓库 Harbor"></a>2. 搭建私有仓库 Harbor</h2><p>待完善</p><h1 id="数据卷管理"><a href="#数据卷管理" class="headerlink" title="数据卷管理"></a>数据卷管理</h1><p>数据卷 (Data Volumes) 是一个可供容器使用的特殊目录，它将主机操作系统目录直接映射进容器，类似于 Linux 中的 mount 行为。</p><ul><li>数据卷可以在容器之间共享和重用，容器间传递数据变得高效与方便；</li><li>对数据卷内数据的修改会立刻生效，无论是容器内操作还是本地操作；</li><li>对数据卷的更新不影响镜像，解耦开应用和数据；</li><li>卷会一直存在，直到没有容器使用，可以安全地卸载它。</li></ul><h2 id="创建数据卷"><a href="#创建数据卷" class="headerlink" title="创建数据卷"></a>创建数据卷</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create -d <span class="built_in">local</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>create ：Create a volume inspect ：Display detailed information on one or more volumes ls ：List volumes prune ：Remove all unused local volumes rm ：Remove one or more volumes</p><p>数据卷所在目录：/var/lib/docker/volumes/</p><h2 id="绑定数据卷"><a href="#绑定数据卷" class="headerlink" title="绑定数据卷"></a>绑定数据卷</h2><p>除了使用 volume 子命令来管理数据卷外，还可以在创建容器时将主机本地的任意路径挂载到容器内作为数据卷。</p><p>运行容器时可以使用 -mount 选项来使用数据卷，-mount 支持三种类型的数据卷：</p><ul><li>volume ：普通数据卷，映射到 /var/lib/docker/volumes/ 目录下；</li><li>bind ：绑定数据卷，映射到主机指定路径下；</li><li>tmpfs ：临时数据卷，只存在于内存中。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name web --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,<span class="built_in">source</span>=/www,destination=/usr/share/nginx/html nginx:latest</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">docker run -d --name web -v /www:/usr/share/nginx/html nginx:latest</span><br></pre></td></tr></table></figure><p>Docker 挂载数据卷的默认权限为可读可写(rw)，用户也可以通过 ro 指定为只读：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name web -v /www:/usr/share/nginx/html:ro nginx:latest</span><br></pre></td></tr></table></figure><p>加上 :ro 后，在容器内就无法修改 挂载数据卷内 的数据了。</p><h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><p>如果用户需要在多个容器之间共享一些持续更新的数据，那么最简单的方式就是使用数据卷容器。数据卷容器也是一个容器，它的目的是专门提供数据卷给其他的容器挂载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v /data --name data centos</span><br><span class="line"></span><br><span class="line">docker run -it --volumes-from data --name db01 centos</span><br><span class="line"></span><br><span class="line">docker run -it --volumes-from data --name db02 centos</span><br></pre></td></tr></table></figure><p>db01 和 db02 都挂载同一个数据卷到相同的 /data 目录。</p><p>使用 —volumes-from 参数所挂载数据卷的容器自身并不需要保持运行状态。</p><p>删除 data db01 db02 任意挂载的容器，数据卷并不会被删除。如果要将数据卷删除，必须在删除最后一个还挂载着它的容器时使用 docker rm -v 命令来指定同时删除与容器关联的数据卷。</p><h2 id="利用数据卷容器来迁移数据"><a href="#利用数据卷容器来迁移数据" class="headerlink" title="利用数据卷容器来迁移数据"></a>利用数据卷容器来迁移数据</h2><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份 data 数据卷容器内的数据卷</span></span><br><span class="line">docker run --volumes-from data -v $(<span class="built_in">pwd</span>):/backup --name worker centos tar zcvf /backup/bak.tar /data</span><br></pre></td></tr></table></figure><ol><li>利用 centos 镜像创建一个容器 worker；</li><li>使用 —volumes-from data 参数让 worker 容器挂载 data 容器的数据卷；</li><li>使用 -v $(pwd):/backup 参数挂载本地当前目录到 worker 容器的 /backup 目录</li><li>worker 容器启动后，使用 tar zcvf /backup/bak.tar /data 命令将 /data 下的内容备份到 worker 容器的 /backup/bak.tar ，即宿主机的当前目录下。</li></ol><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --volumes-from data -v $(<span class="built_in">pwd</span>):/backup centos tar xvf /backup/bak.tar -C /data</span><br></pre></td></tr></table></figure><h1 id="端口映射与容器互联"><a href="#端口映射与容器互联" class="headerlink" title="端口映射与容器互联"></a>端口映射与容器互联</h1><h2 id="1-端口映射实现容器访问"><a href="#1-端口映射实现容器访问" class="headerlink" title="1. 端口映射实现容器访问"></a>1. 端口映射实现容器访问</h2><h3 id="随机映射端口到内部容器开放的网络端口"><a href="#随机映射端口到内部容器开放的网络端口" class="headerlink" title="随机映射端口到内部容器开放的网络端口"></a>随机映射端口到内部容器开放的网络端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -P nginx:latest</span><br></pre></td></tr></table></figure><p>0.0.0.0:32770-&gt;80/tcp</p><p>-P ：随机映射一个本机端口到 nginx 容器的 80 端口</p><h3 id="映射到指定端口"><a href="#映射到指定端口" class="headerlink" title="映射到指定端口"></a>映射到指定端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 2080:80 nginx:latest</span><br><span class="line">docker run -d -p 2001:80 -p 2002:443 nginx:latest</span><br></pre></td></tr></table></figure><p>0.0.0.0:2080-&gt;80/tcp</p><p>-p ：映射本地的 2080 端口到 nginx 容器的 80 端口</p><p>0.0.0.0:2001-&gt;80/tcp, 0.0.0.0:2002-&gt;443/tcp</p><p>-p ：分别映射本地的 2001 和 2002 端口到 nginx 容器的 80 和 443 端口</p><h3 id="映射到指定地址的指定端口"><a href="#映射到指定地址的指定端口" class="headerlink" title="映射到指定地址的指定端口"></a>映射到指定地址的指定端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 127.0.0.1:2003:80 nginx:latest</span><br></pre></td></tr></table></figure><p>127.0.0.1:2003-&gt;80/tcp</p><p>-p ：映射 127.0.0.1 地址的 2003 端口到 nginx 容器的 80 端口</p><h3 id="映射到指定地址的随机端口"><a href="#映射到指定地址的随机端口" class="headerlink" title="映射到指定地址的随机端口"></a>映射到指定地址的随机端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 127.0.0.1::80 nginx:latest</span><br></pre></td></tr></table></figure><p>127.0.0.1:32768-&gt;80/tcp</p><h3 id="映射到指定地址的指定-udp-端口"><a href="#映射到指定地址的指定-udp-端口" class="headerlink" title="映射到指定地址的指定 udp 端口"></a>映射到指定地址的指定 udp 端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 127.0.0.1:2004:80/udp nginx:latest</span><br></pre></td></tr></table></figure><p>80/tcp, 127.0.0.1:2004-&gt;80/udp</p><h2 id="2-容器互联"><a href="#2-容器互联" class="headerlink" title="2. 容器互联"></a>2. 容器互联</h2><p>—link 参数可以让容器之间安全地进行交互。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先创建一个数据库容器</span></span><br><span class="line">docker run -d --name db -e MYSQL_ROOT_PASSWORD=linux mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再创建一个 web 容器</span></span><br><span class="line">docker run -d -p 1080:80 --name web --link db:db nginx:latest</span><br></pre></td></tr></table></figure><p>—link 参数格式为 —link name:alias ，其中 name 是要链接的容器名称，alias 是别名。</p><p>Docker 相当于在两个容器之间创建了一个通道，而不直接映射他们的端口到宿主机上。启动 db 容器的时候并没有使用 -p 和 -P 标记，从而避免了暴露数据库服务端口到外部网络。</p><p>Docker 通过两种方式为容器公开连接信息：</p><ul><li>更新环境变量</li><li>更新 /etc/hosts 文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it web sh</span><br><span class="line"><span class="comment"># env</span></span><br><span class="line">DB_PORT_33060_TCP_ADDR=172.17.0.2</span><br><span class="line">HOSTNAME=bf5ac571974b</span><br><span class="line">DB_PORT=tcp://172.17.0.2:3306</span><br><span class="line">DB_PORT_3306_TCP=tcp://172.17.0.2:3306</span><br><span class="line">DB_PORT_33060_TCP_PORT=33060</span><br><span class="line">DB_ENV_MYSQL_VERSION=5.7.30-1debian10</span><br><span class="line">DB_PORT_33060_TCP_PROTO=tcp</span><br><span class="line">HOME=/root</span><br><span class="line">DB_NAME=/web/db</span><br><span class="line">PKG_RELEASE=1~buster</span><br><span class="line">DB_PORT_33060_TCP=tcp://172.17.0.2:33060</span><br><span class="line">TERM=xterm</span><br><span class="line">NGINX_VERSION=1.17.10</span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">NJS_VERSION=0.3.9</span><br><span class="line">DB_ENV_MYSQL_MAJOR=5.7</span><br><span class="line">DB_PORT_3306_TCP_ADDR=172.17.0.2</span><br><span class="line">DB_ENV_MYSQL_ROOT_PASSWORD=linux</span><br><span class="line">PWD=/</span><br><span class="line">DB_ENV_GOSU_VERSION=1.12</span><br><span class="line">DB_PORT_3306_TCP_PORT=3306</span><br><span class="line">DB_PORT_3306_TCP_PROTO=tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># cat /etc/hosts</span></span><br><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0ip6-localnet</span><br><span class="line">ff00::0ip6-mcastprefix</span><br><span class="line">ff02::1ip6-allnodes</span><br><span class="line">ff02::2ip6-allrouters</span><br><span class="line">172.17.0.2db 567c62f44e3d</span><br><span class="line">172.17.0.3bf5ac571974b</span><br></pre></td></tr></table></figure><h1 id="使用-Dockerfile-创建镜像"><a href="#使用-Dockerfile-创建镜像" class="headerlink" title="使用 Dockerfile 创建镜像"></a>使用 Dockerfile 创建镜像</h1><p>Dockerfile 由一行一行的命令语句组成，并且支持以 # 开头的注释行。</p><p>一般而言，Dockerfile 主体内容分为四个部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时的执行指令。</p><p><a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener">Dockerfile reference</a></p><h2 id="指令说明"><a href="#指令说明" class="headerlink" title="指令说明"></a>指令说明</h2><h3 id="1-ARG-定义创建镜像过程中使用的变量"><a href="#1-ARG-定义创建镜像过程中使用的变量" class="headerlink" title="1. ARG 定义创建镜像过程中使用的变量"></a>1. ARG 定义创建镜像过程中使用的变量</h3><p>ARG <name>[=<default value>]</default></name></p><p>在执行 docker build 时，可以通过 –build-arg <varname>=<value> 来为变量赋值。当镜像编译成功后，ARG 指定的变量将不再存在。</value></varname></p><p>Docker 内置了一些预定义的 ARG 变量，用户可以直接使用，无须在 Dockerfile 中声明。</p><ul><li><code>HTTP_PROXY</code></li><li><code>http_proxy</code></li><li><code>HTTPS_PROXY</code></li><li><code>https_proxy</code></li><li><code>FTP_PROXY</code></li><li><code>ftp_proxy</code></li><li><code>NO_PROXY</code></li><li><code>no_proxy</code></li></ul><h3 id="2-FROM-指定创建镜像的基础镜像"><a href="#2-FROM-指定创建镜像的基础镜像" class="headerlink" title="2. FROM 指定创建镜像的基础镜像"></a>2. FROM 指定创建镜像的基础镜像</h3><p>FROM [–platform=<platform>] <image> [AS <name>]</name></image></platform></p><p>FROM [–platform=<platform>] <image>[:<tag>] [AS <name>]</name></tag></image></platform></p><p>FROM [–platform=<platform>] <image>[@<digest>] [AS <name>]</name></digest></image></platform></p><p>Dockerfile 中的第一条指令必须是 FROM 指令（ARG 除外）。如果在同一个 Dockerfile 中创建多个镜像时，可以使用多个 FROM 指令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ARG VERSION=latest</span><br><span class="line">FROM centos:<span class="variable">$&#123;VERSION&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-LABEL-为生成的镜像添加元数据标签信息"><a href="#3-LABEL-为生成的镜像添加元数据标签信息" class="headerlink" title="3. LABEL 为生成的镜像添加元数据标签信息"></a>3. LABEL 为生成的镜像添加元数据标签信息</h3><p>LABEL <key>=<value> <key>=<value> <key>=<value> …</value></key></value></key></value></key></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LABEL version=<span class="string">"1.0.0"</span></span><br><span class="line">LABEL author=<span class="string">"alan@yahoo"</span> date=<span class="string">"2020-05-20"</span></span><br><span class="line">LABEL description=<span class="string">"This text illustrates \\</span></span><br><span class="line"><span class="string">that label-values can span multiple lines."</span></span><br></pre></td></tr></table></figure><h3 id="4-EXPOSE-声明容器在运行时服务监听的端口"><a href="#4-EXPOSE-声明容器在运行时服务监听的端口" class="headerlink" title="4. EXPOSE 声明容器在运行时服务监听的端口"></a>4. EXPOSE 声明容器在运行时服务监听的端口</h3><p>EXPOSE <port> [<port>/<protocol>…]</protocol></port></port></p><p>默认情况下，EXPOSE 假定协议为 TCP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE 80 443</span><br><span class="line">EXPOSE 80/udp</span><br></pre></td></tr></table></figure><p>该指令只是起到声明的作用，并不会自动完成端口映射。在启动容器时可以使用 -P 参数完成映射。</p><h3 id="5-ENV-指定环境变量"><a href="#5-ENV-指定环境变量" class="headerlink" title="5. ENV 指定环境变量"></a>5. ENV 指定环境变量</h3><p>在构建阶段中所有后续指令的环境中使用，在镜像启动的容器中也会存在。</p><p>ENV <key> <value> 或者 ENV <key>=<value> …</value></key></value></key></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ENV myName=<span class="string">"John Doe"</span> myDog=Rex\\ The\\ Dog \\</span><br><span class="line">    myCat=fluffy</span><br><span class="line">ENV myName John Doe</span><br><span class="line">ENV myDog Rex The Dog</span><br></pre></td></tr></table></figure><p>指令指定的环境变量在容器运行时可以被覆盖掉，如 docker run -e myName=Alan nginx:latest 。</p><p>使用 ENV 指令定义的环境变量，始终会覆盖 ARG 同名的变量。</p><p>当一条 ENV 指令中同时为多个环境变量赋值，并且值也是从环境变量中读取时，会为变量都赋值后再更新。如下指令，最终结果为 key1=value1 key2=value2 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENV key1=value2</span><br><span class="line">ENV key1=value1 key2=<span class="variable">$&#123;key1&#125;</span></span><br></pre></td></tr></table></figure><h3 id="6-ENTRYPOINT-指定镜像的默认入口命令"><a href="#6-ENTRYPOINT-指定镜像的默认入口命令" class="headerlink" title="6. ENTRYPOINT 指定镜像的默认入口命令"></a>6. ENTRYPOINT 指定镜像的默认入口命令</h3><p>该入口命令会在容器启动时作为根命令执行（pid 1 号进程），所有传入值作为该命令的参数。</p><p>支持两种格式：</p><p>ENTRYPOINT [“executable”, “param1”, “param2”]  ：exec 调用执行</p><p>ENTRYPOINT command param1 param2  ：shell 中执行</p><p>CMD 指令指定值将作为根命令的参数。</p><p>每个 Dockerfile 中只能有一个 ENTRYPOINT，当指定多个时，只有最后一个生效。</p><p>在启动容器时，可以被 —entrypoint 参数覆盖掉。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">ENTRYPOINT [<span class="string">"top"</span>, <span class="string">"-b"</span>]</span><br><span class="line">CMD [<span class="string">"-c"</span>]</span><br></pre></td></tr></table></figure><h3 id="7-VOLUME-创建一个数据卷挂载点"><a href="#7-VOLUME-创建一个数据卷挂载点" class="headerlink" title="7. VOLUME 创建一个数据卷挂载点"></a>7. VOLUME 创建一个数据卷挂载点</h3><p>VOLUME /data 或者 VOLUME [“/data”]</p><p>运行容器时可以从本地主机或其它容器挂载数据卷，一般用于存放数据库和需要保持的数据等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">RUN mkdir /myvol</span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">"hello world"</span> &gt; /myvol/greeting</span><br><span class="line">VOLUME /myvol</span><br></pre></td></tr></table></figure><h3 id="8-USER-指定构建镜像和运行容器时的用户和可选的用户组"><a href="#8-USER-指定构建镜像和运行容器时的用户和可选的用户组" class="headerlink" title="8. USER 指定构建镜像和运行容器时的用户和可选的用户组"></a>8. USER 指定构建镜像和运行容器时的用户和可选的用户组</h3><p>USER <user>[:<group>] 或者 USER <UID>[:<GID>]</GID></UID></group></user></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM microsoft/windowsservercore</span><br><span class="line"><span class="comment"># Create Windows user in the container</span></span><br><span class="line">RUN net user /add patrick</span><br><span class="line"><span class="comment"># Set it for subsequent commands</span></span><br><span class="line">USER patrick</span><br></pre></td></tr></table></figure><p>docker run 运行容器时，可以通过 -u 参数来覆盖所指定的用户。</p><h3 id="9-WORKDIR-指定工作目录"><a href="#9-WORKDIR-指定工作目录" class="headerlink" title="9. WORKDIR 指定工作目录"></a>9. WORKDIR 指定工作目录</h3><p>WORKDIR /path/to/workdir</p><p>Dockerfile 中其后的命令 RUN、CMD、ENTRYPOINT、ADD、COPY 等命令都会在该目录下执行。</p><p>该 WORKDIR 指令可以在中多次使用Dockerfile。如果提供了相对路径，则它将相对于上一条 WORKDIR 指令的路径 。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /a</span><br><span class="line">WORKDIR b</span><br><span class="line">WORKDIR c</span><br><span class="line">RUN <span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><p>最终的输出 pwd 命令结果将是 /a/b/c 。</p><p>使用 docker run 运行容器时，可以通过 -w 参数覆盖构建时所设置的工作目录。</p><h3 id="10-ONBUILD-当该镜像用作另一个构建的基础镜像时，将会自动执行的操作指令"><a href="#10-ONBUILD-当该镜像用作另一个构建的基础镜像时，将会自动执行的操作指令" class="headerlink" title="10. ONBUILD 当该镜像用作另一个构建的基础镜像时，将会自动执行的操作指令"></a>10. ONBUILD 当该镜像用作另一个构建的基础镜像时，将会自动执行的操作指令</h3><p>ONBUILD <INSTRUCTION></INSTRUCTION></p><p>当该镜像被作为 Dockerfile 中的基础镜像的时候，使用 docker build 构建镜像时，会首先执行基础镜像中配置的 ONBUILD 指令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">ONBUILD RUN mkdir /onbuild-testing</span><br><span class="line"><span class="comment"># 使用上述 Dockerfile 构建镜像后（镜像命名为 c1:latest），基于该镜像启动容器后并不会发现 /onbuild-testing 目录。</span></span><br><span class="line"></span><br><span class="line">FROM c1:latest</span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">"hello world"</span> &gt; /m</span><br><span class="line"><span class="comment"># 使用上述 Dockerfile 构建镜像后，发现 /onbuild-testing 目录存在。</span></span><br></pre></td></tr></table></figure><h3 id="11-STOPSIGNAL-指定容器退出时所要被发送的系统调用信号"><a href="#11-STOPSIGNAL-指定容器退出时所要被发送的系统调用信号" class="headerlink" title="11. STOPSIGNAL 指定容器退出时所要被发送的系统调用信号"></a>11. STOPSIGNAL 指定容器退出时所要被发送的系统调用信号</h3><p>STOPSIGNAL signal</p><p>所使用的信号(signal)必须是内核系统调用表中的合法的值，如 SIGKILL 或 9 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kill -l</span></span><br><span class="line"> 1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP</span><br><span class="line"> 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL10) SIGUSR1</span><br><span class="line">11) SIGSEGV12) SIGUSR213) SIGPIPE14) SIGALRM15) SIGTERM</span><br><span class="line">16) SIGSTKFLT17) SIGCHLD18) SIGCONT19) SIGSTOP20) SIGTSTP</span><br><span class="line">21) SIGTTIN22) SIGTTOU23) SIGURG24) SIGXCPU25) SIGXFSZ</span><br><span class="line">26) SIGVTALRM27) SIGPROF28) SIGWINCH29) SIGIO30) SIGPWR</span><br><span class="line">31) SIGSYS34) SIGRTMIN35) SIGRTMIN+136) SIGRTMIN+237) SIGRTMIN+3</span><br><span class="line">38) SIGRTMIN+439) SIGRTMIN+540) SIGRTMIN+641) SIGRTMIN+742) SIGRTMIN+8</span><br><span class="line">43) SIGRTMIN+944) SIGRTMIN+1045) SIGRTMIN+1146) SIGRTMIN+1247) SIGRTMIN+13</span><br><span class="line">48) SIGRTMIN+1449) SIGRTMIN+1550) SIGRTMAX-1451) SIGRTMAX-1352) SIGRTMAX-12</span><br><span class="line">53) SIGRTMAX-1154) SIGRTMAX-1055) SIGRTMAX-956) SIGRTMAX-857) SIGRTMAX-7</span><br><span class="line">58) SIGRTMAX-659) SIGRTMAX-560) SIGRTMAX-461) SIGRTMAX-362) SIGRTMAX-2</span><br><span class="line">63) SIGRTMAX-164) SIGRTMAX</span><br></pre></td></tr></table></figure><h3 id="12-HEALTHCHECK-配置如何测试容器以检查其是否仍在工作"><a href="#12-HEALTHCHECK-配置如何测试容器以检查其是否仍在工作" class="headerlink" title="12. HEALTHCHECK 配置如何测试容器以检查其是否仍在工作"></a>12. HEALTHCHECK 配置如何测试容器以检查其是否仍在工作</h3><p>该 HEALTHCHECK 指令有两种形式：</p><ul><li>HEALTHCHECK [OPTIONS] CMD command （通过在容器内部运行命令来检查容器的运行状况）</li><li>HEALTHCHECK NONE （禁用从基础镜像中继承的任何运行状况检查）</li></ul><p>OPYIONS 支持如下参数：</p><ul><li><code>--interval=DURATION</code>（默认值：<code>30s</code>）每次检查后的间隔数秒</li><li><code>--timeout=DURATION</code>（默认值：<code>30s</code>）每次检查等待结果的超时时间</li><li><code>--start-period=DURATION</code>（默认值：<code>0s</code>）开始时间段为需要时间进行引导的容器提供了初始化时间。在此期间内的探针故障将不计入最大重试次数。但是，如果运行状况检查在启动期间成功，则认为该容器已启动，并且所有连续失败将计入最大重试次数。</li><li><code>--retries=N</code>（默认值：<code>3</code>）如果检测失败，需要重试几次才最终判定为失败</li></ul><h3 id="13-SHELL-设置执行命令时所使用的默认-shell-类型"><a href="#13-SHELL-设置执行命令时所使用的默认-shell-类型" class="headerlink" title="13. SHELL 设置执行命令时所使用的默认 shell 类型"></a>13. SHELL 设置执行命令时所使用的默认 shell 类型</h3><p>SHELL [“executable”, “parameters”]</p><p>Linux 上，默认值为 [“/bin/sh”, “-c”] 。</p><p>该 SHELL 指令可以出现多次。每个 SHELL 指令将覆盖所有先前的 SHELL 指令，并影响所有后续的指令。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FROM microsoft/windowsservercore</span><br><span class="line"></span><br><span class="line"><span class="comment"># Executed as cmd /S /C echo default</span></span><br><span class="line">RUN <span class="built_in">echo</span> default</span><br><span class="line"></span><br><span class="line"><span class="comment"># Executed as cmd /S /C powershell -command Write-Host default</span></span><br><span class="line">RUN powershell -<span class="built_in">command</span> Write-Host default</span><br><span class="line"></span><br><span class="line"><span class="comment"># Executed as powershell -command Write-Host hello</span></span><br><span class="line">SHELL [<span class="string">"powershell"</span>, <span class="string">"-command"</span>]</span><br><span class="line">RUN Write-Host hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># Executed as cmd /S /C echo hello</span></span><br><span class="line">SHELL [<span class="string">"cmd"</span>, <span class="string">"/S"</span>, <span class="string">"/C"</span>]</span><br><span class="line">RUN <span class="built_in">echo</span> hello</span><br></pre></td></tr></table></figure><h3 id="14-RUN-运行指定命令"><a href="#14-RUN-运行指定命令" class="headerlink" title="14. RUN 运行指定命令"></a>14. RUN 运行指定命令</h3><p>RUN <command> 或者 RUN [“executable”, “param1”, “param2”]</p><p>后者指令会被解析为 JSON 数组，因此必须使用双引号。</p><p>前者默认在 shell 终端中运行命令，即 /bin/sh -c ；后者则使用 exec 执行，不会启动 shell 环境。</p><p>指定使用其他终端类型也可以通过第二种方式实现，例如 RUN [“/bin/bash”,”-c”,”echo hello”] 。</p><p>每条 RUN 指令会在当前镜像基础上执行指定命令，并提交为新的镜像层。当命令较长时可以使用反斜杠 \ 换行。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RUN /bin/bash -c <span class="string">'source $HOME/.bashrc; \\</span></span><br><span class="line"><span class="string">echo $HOME'</span></span><br></pre></td></tr></table></figure><h3 id="15-CMD-指定容器启动时默认执行的命令"><a href="#15-CMD-指定容器启动时默认执行的命令" class="headerlink" title="15. CMD 指定容器启动时默认执行的命令"></a>15. CMD 指定容器启动时默认执行的命令</h3><p>该 CMD 指令具有三种形式：</p><ul><li><code>CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code>（<em>exec</em> 形式，推荐形式）</li><li><code>CMD [&quot;param1&quot;,&quot;param2&quot;]</code>（作为 <em>ENTRYPOINT 的默认参数</em>）</li><li><code>CMD command param1 param2</code>（在默认的 shell 中执行）</li></ul><p>每个 Dockerfile 中只能有一条 CMD 指令。如果指定了多条，则只有最后一条会被执行。</p><p>如果在启动容器时手动指定了运行的命令（作为 run 命令的参数），则会覆盖掉 CMD 指定的命令。</p><h3 id="16-ADD-添加内容到镜像"><a href="#16-ADD-添加内容到镜像" class="headerlink" title="16. ADD 添加内容到镜像"></a>16. ADD 添加内容到镜像</h3><p>ADD [–chown=<user>:<group>] <src>… <dest></dest></src></group></user></p><p>ADD [–chown=<user>:<group>] [“<src>“,… “<dest>“]</dest></src></group></user></p><p>该命令将复制指定的 <src> 路径下的内容到镜像中的 <dest> 路径下。目标路径不存在时，会自动创建。</dest></src></p><p>其中 <src> 可以是 Dockerfile 所在目录的一个相对路径（文件或目录）；也可以是一个 URL；还可以是一个 tar 文件（将自动解压为目录）。<dest> 可以是镜像内的绝对路径，也可以是相对于工作目录（WORKDIR）的相对路径。</dest></src></p><p><src> 路径支持通配符，如 ADD hom* /mydir/ 。</src></p><h3 id="17-COPY-复制内容到镜像"><a href="#17-COPY-复制内容到镜像" class="headerlink" title="17. COPY 复制内容到镜像"></a>17. COPY 复制内容到镜像</h3><p>COPY [–chown=<user>:<group>] <src>… <dest> COPY [–chown=<user>:<group>] [“<src>“,… “<dest>“]</dest></src></group></user></dest></src></group></user></p><p>复制本地主机的 <src> 路径下的内容到镜像中的 <dest> 。目标路径不存在时，会自动创建。<src> 路径支持通配符。</src></dest></src></p><ul><li>该<code>&lt;src&gt;</code>路径必须在 Dockerfile 当前目录内; 不能跳出 Dockerfile 目录。例如：<code>COPY ../something /something</code> 将不能成功执行构建。</li><li>如果<code>&lt;src&gt;</code>是目录，则将复制目录的整个内容，包括文件系统元数据。目录本身不被复制，仅其内容被复制。</li><li>如果<code>&lt;src&gt;</code>是任何其他类型的文件，则将其及其元数据一起单独复制。在这种情况下，如果<code>&lt;dest&gt;</code>以斜杠结尾<code>/</code>，则将其视为目录，并将其内容<code>&lt;src&gt;</code>写入<code>&lt;dest&gt;/base(&lt;src&gt;)</code>。</li><li>如果<code>&lt;src&gt;</code>直接或由于使用通配符而指定了多个资源，则该资源<code>&lt;dest&gt;</code>必须是目录，并且必须以斜杠结尾<code>/</code>。</li><li>如果<code>&lt;dest&gt;</code>不以斜杠结尾，则将其视为常规文件，并将其内容<code>&lt;src&gt;</code>写入<code>&lt;dest&gt;</code>。</li><li>如果<code>&lt;dest&gt;</code>不存在，它将与路径中所有缺少的目录一起创建。</li></ul><h2 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h2><p>可以通过 docker build 命令来创建镜像。</p><p>docker build [OPTIONS] PATH | URL | -</p><p>该命令将读取指定路径下的 Dockerfile，并将该路径下所有的数据作为上下文（Context）发送给 Docker 服务端。Docker 服务端校验 Dockerfile 格式通过后，逐条执行其中定义的指令，碰到 ADD、COPY 和 RUN 指令会生成一层镜像。最终如果创建镜像成功，会返回最终的镜像 ID 。</p><p>可以通过 .dockerignore 文件（每一行添加一条匹配模式）来让 Docker 忽略匹配路径或文件，在创建镜像时不将无关的数据发送到服务端。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; .dockerignore &lt;&lt; EOF</span><br><span class="line">*/temp*</span><br><span class="line">*/*/temp*</span><br><span class="line">tmp?</span><br><span class="line">~*</span><br><span class="line">Dockerfile</span><br><span class="line">!README.md</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>dockerignore 文件中模式语法支持 Golang 风格的路径正则格式</li><li><ul><li>表示任意多个字符</li></ul></li><li>？ 表示单个任意字符</li><li>！表示不匹配（即不忽略指定的路径或文件）</li></ul><h3 id="多步骤构建"><a href="#多步骤构建" class="headerlink" title="多步骤构建"></a>多步骤构建</h3><p>多步骤构建主要是为了解决一些在容器中进行编译工作，然后运行时容器只需要编译的结果，不需要整个编译环境被依赖，减少镜像的大小。</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FROM golang:1.9 as builder <span class="comment"># define stage name as builder</span></span><br><span class="line">RUN mkdir -p /go/src/<span class="built_in">test</span></span><br><span class="line">WORKDIR /go/src/<span class="built_in">test</span></span><br><span class="line">COPY main.go</span><br><span class="line">RUN CGO_ENABLED=O GOOS=linux go build -o app</span><br><span class="line"></span><br><span class="line">FROM alpine:latest</span><br><span class="line">RUN apk –no-cache add ca-certificates</span><br><span class="line">WORKDIR /root/</span><br><span class="line">COPY –from=builder /go/src/<span class="built_in">test</span>/app . <span class="comment"># copy file from the builder stage</span></span><br><span class="line">CMD [<span class="string">"./app"</span>]</span><br></pre></td></tr></table></figure><h3 id="Dockerfile-最佳实践"><a href="#Dockerfile-最佳实践" class="headerlink" title="Dockerfile 最佳实践"></a><strong>Dockerfile 最佳实践</strong></h3><ul><li>精简镜像用途</li><li>选择较小且合适的基础镜像（指定版本，禁用 latest）</li><li>提供注释和维护者信息</li><li>规范使用版本号</li><li>减少镜像层数</li><li>恰当使用多步骤构建</li><li>使用 .dockerignore 文件忽略不必要的数据内容</li><li>清空临时文件和缓存文件</li><li>调整合理的指令顺序（在开启 cache 的情况下，内容不变的指令尽量放在前面）</li><li>减少外部源干扰（如果要从外部引入数据，请指定持久的地址，并带版本信息等）</li></ul><h1 id="系统镜像添加-SSH-服务"><a href="#系统镜像添加-SSH-服务" class="headerlink" title="系统镜像添加 SSH 服务"></a>系统镜像添加 SSH 服务</h1><h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><h3 id="1-创建-ubuntu-sshd-工作目录"><a href="#1-创建-ubuntu-sshd-工作目录" class="headerlink" title="1. 创建 ubuntu_sshd 工作目录"></a>1. 创建 ubuntu_sshd 工作目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ubuntu-sshd</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$_</span></span><br></pre></td></tr></table></figure><h3 id="2-配置-ssh-授权密钥文件"><a href="#2-配置-ssh-授权密钥文件" class="headerlink" title="2. 配置 ssh 授权密钥文件"></a>2. 配置 ssh 授权密钥文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ -f ~/.ssh/id_rsa ] || ssh-keygen -t rsa -f ~/.ssh/id_rsa -N <span class="string">''</span></span><br><span class="line">cat ~/.ssh/id_rsa.pub &gt; authorized_keys</span><br></pre></td></tr></table></figure><h3 id="3-编写-Dockerfile"><a href="#3-编写-Dockerfile" class="headerlink" title="3. 编写 Dockerfile"></a>3. 编写 Dockerfile</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; Dockerfile &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">FROM ubuntu:latest</span><br><span class="line"></span><br><span class="line">LABEL version=<span class="string">"1.0.0"</span> author=<span class="string">"Alan"</span> date=<span class="string">"2020-05-22"</span></span><br><span class="line"></span><br><span class="line">RUN /bin/bash -c <span class="string">"apt-get update; \\</span></span><br><span class="line"><span class="string">apt-get install openssh-server -y; \\</span></span><br><span class="line"><span class="string">mkdir -p /var/run/sshd; \\</span></span><br><span class="line"><span class="string">sed -ri '/session    required/s%^%# %g' /etc/pam.d/sshd; \\</span></span><br><span class="line"><span class="string">rm -rf /var/lib/apt/lists/*"</span></span><br><span class="line"></span><br><span class="line">ADD authorized_keys /root/.ssh/</span><br><span class="line"></span><br><span class="line">EXPOSE 22</span><br><span class="line"></span><br><span class="line">CMD /usr/sbin/sshd -D</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="4-创建镜像"><a href="#4-创建镜像" class="headerlink" title="4. 创建镜像"></a>4. 创建镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t ubuntu-sshd:1.0.0 .</span><br></pre></td></tr></table></figure><h3 id="5-运行容器"><a href="#5-运行容器" class="headerlink" title="5. 运行容器"></a>5. 运行容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 30022:22 ubuntu-sshd:1.0.0</span><br></pre></td></tr></table></figure><h3 id="6-连接测试"><a href="#6-连接测试" class="headerlink" title="6. 连接测试"></a>6. 连接测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh 127.0.0.1 -p 30022 -o StrictHostKeyChecking=no</span><br></pre></td></tr></table></figure><h2 id="Centos"><a href="#Centos" class="headerlink" title="Centos"></a>Centos</h2><h3 id="1-创建-ubuntu-sshd-工作目录-1"><a href="#1-创建-ubuntu-sshd-工作目录-1" class="headerlink" title="1. 创建 ubuntu_sshd 工作目录"></a>1. 创建 ubuntu_sshd 工作目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir centos-sshd</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$_</span></span><br></pre></td></tr></table></figure><h3 id="2-配置-ssh-授权密钥文件-1"><a href="#2-配置-ssh-授权密钥文件-1" class="headerlink" title="2. 配置 ssh 授权密钥文件"></a>2. 配置 ssh 授权密钥文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ -f ~/.ssh/id_rsa ] || ssh-keygen -t rsa -f ~/.ssh/id_rsa -N <span class="string">''</span></span><br><span class="line">cat ~/.ssh/id_rsa.pub &gt; authorized_keys</span><br></pre></td></tr></table></figure><h3 id="3-编写-Dockerfile-1"><a href="#3-编写-Dockerfile-1" class="headerlink" title="3. 编写 Dockerfile"></a>3. 编写 Dockerfile</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; Dockerfile &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">FROM centos:latest</span><br><span class="line"></span><br><span class="line">LABEL version=<span class="string">"1.0.0"</span> author=<span class="string">"Alan"</span> date=<span class="string">"2020-05-22"</span></span><br><span class="line"></span><br><span class="line">RUN /bin/bash -c <span class="string">'yum install openssh-server -y; \\</span></span><br><span class="line"><span class="string">ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N ""; \\</span></span><br><span class="line"><span class="string">ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -N ""; \\</span></span><br><span class="line"><span class="string">ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N ""; \\</span></span><br><span class="line"><span class="string">yum clean all'</span></span><br><span class="line"></span><br><span class="line">ADD authorized_keys /root/.ssh/</span><br><span class="line"></span><br><span class="line">EXPOSE 22</span><br><span class="line"></span><br><span class="line">CMD /usr/sbin/sshd -D</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="4-创建镜像-1"><a href="#4-创建镜像-1" class="headerlink" title="4. 创建镜像"></a>4. 创建镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t centos-sshd:1.0.0 .</span><br></pre></td></tr></table></figure><h3 id="5-运行容器-1"><a href="#5-运行容器-1" class="headerlink" title="5. 运行容器"></a>5. 运行容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 20022:22 centos-sshd:1.0.0</span><br></pre></td></tr></table></figure><h3 id="6-连接测试-1"><a href="#6-连接测试-1" class="headerlink" title="6. 连接测试"></a>6. 连接测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh 127.0.0.1 -p 20022 -o StrictHostKeyChecking=no</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 基础入门</title>
      <link href="/2019/03/20/Python%20%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
      <url>/2019/03/20/Python%20%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="注释与变量声明"><a href="#注释与变量声明" class="headerlink" title="注释与变量声明"></a>注释与变量声明</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ### 注释的分类： </span></span><br><span class="line"><span class="comment"># 1.单行注释 </span></span><br><span class="line"><span class="comment"># print("i have a dream!")</span></span><br><span class="line">a = <span class="string">"i have a dream!"</span></span><br><span class="line">print(a,type(a),id(a))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.多行注释 </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">print('Hi')</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print('I Have a Dream !')</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># ### 变量：可以改变的量，实际上是指内存中的一块存储空间</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 变量的命名规范</span></span><br><span class="line"><span class="string">1. 变量一般由字母数字下划线组成</span></span><br><span class="line"><span class="string">2. 变量区分大小写</span></span><br><span class="line"><span class="string">3. 变量的命名要求能见名知义</span></span><br><span class="line"><span class="string">4. 变量名称不能以数字开头</span></span><br><span class="line"><span class="string">5. 变量名称不能为关键字</span></span><br><span class="line"><span class="string">6. 变量名称避免使用中文</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看关键字</span></span><br><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line">print(keyword.kwlistvar)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 变量的声明</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">a = b = <span class="number">1</span></span><br><span class="line">print(a,b)</span><br><span class="line"></span><br><span class="line">a,b = <span class="number">2</span>,<span class="number">3</span></span><br><span class="line">print(a,b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 变量的交换</span></span><br><span class="line">a,b = <span class="number">5</span>,<span class="number">6</span></span><br><span class="line">a,b = b,a</span><br><span class="line">print(a,b)</span><br><span class="line"></span><br><span class="line">tmp = a</span><br><span class="line">a = b</span><br><span class="line">b = tmp</span><br><span class="line">print(a,b)</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>python 的数据类型可大致可分为 数字 字符串 列表 元组 集合 字典</p><h3 id="1-数字类型"><a href="#1-数字类型" class="headerlink" title="1. 数字类型"></a>1. 数字类型</h3><p>数字类型可分为 整型 浮点型 布尔型 复数型</p><h5 id="整型-int"><a href="#整型-int" class="headerlink" title="整型 int"></a>整型 int</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 整型 int</span></span><br><span class="line">intvar = <span class="number">1</span></span><br><span class="line">print(intvar)<span class="comment"># ==&gt; 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取类型</span></span><br><span class="line">print(type(intvar))<span class="comment"># ==&gt; &lt;class 'int'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取内存地址</span></span><br><span class="line">print(id(intvar))<span class="comment"># ==&gt; 1700364400</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二进制整型</span></span><br><span class="line">intvar = <span class="number">0b111</span></span><br><span class="line">print( intvar,type(intvar),id(intvar) )<span class="comment"># ==&gt; 7 &lt;class 'int'&gt; 1700364592</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 八进制整型</span></span><br><span class="line">intvar = <span class="number">0o111</span></span><br><span class="line">print( intvar,type(intvar),id(intvar) )<span class="comment"># ==&gt; 73 &lt;class 'int'&gt; 1700366704</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 十六进制整型</span></span><br><span class="line">intvar = <span class="number">0x111</span></span><br><span class="line">print( intvar,type(intvar),id(intvar) )<span class="comment"># ==&gt; 273 &lt;class 'int'&gt; 2930551795408</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出整型变量的各种进制数值</span></span><br><span class="line">intvar = <span class="number">511</span></span><br><span class="line">print( <span class="string">'%x'</span> % intvar,<span class="string">'%d'</span> % intvar,<span class="string">'%o'</span> % intvar,bin(intvar) )<span class="comment"># ==&gt; 1ff 511 777 0b111111111</span></span><br><span class="line">print( bin(intvar),oct(intvar),hex(intvar) )<span class="comment"># ==&gt; 0b111111111 0o777 0x1ff</span></span><br></pre></td></tr></table></figure><h5 id="浮点型-float"><a href="#浮点型-float" class="headerlink" title="浮点型 float"></a>浮点型 float</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 浮点型 float</span></span><br><span class="line">floatvar = <span class="number">3.14</span></span><br><span class="line">print( floatvar,type(floatvar),id(floatvar) )<span class="comment"># ==&gt; 3.14 &lt;class 'float'&gt; 1465280307656</span></span><br><span class="line"></span><br><span class="line">floatvar = <span class="number">314e-2</span></span><br><span class="line">print( floatvar,type(floatvar),id(floatvar) )<span class="comment"># ==&gt; 3.14 &lt;class 'float'&gt; 1465280307656</span></span><br><span class="line"></span><br><span class="line">floatvar = <span class="number">0.314e1</span></span><br><span class="line">print( floatvar,type(floatvar),id(floatvar) )<span class="comment"># ==&gt; 3.14 &lt;class 'float'&gt; 1465280307656</span></span><br></pre></td></tr></table></figure><h5 id="布尔型-bool"><a href="#布尔型-bool" class="headerlink" title="布尔型 bool"></a>布尔型 bool</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 布尔型 bool</span></span><br><span class="line"><span class="comment"># True 真   False 假</span></span><br><span class="line">boolvar = <span class="literal">True</span></span><br><span class="line">print( boolvar,type(boolvar),id(boolvar) )<span class="comment"># ==&gt; True &lt;class 'bool'&gt; 1699858864</span></span><br><span class="line"></span><br><span class="line">boolvar = <span class="literal">False</span></span><br><span class="line">print( boolvar,type(boolvar),id(boolvar) )<span class="comment"># ==&gt; False &lt;class 'bool'&gt; 1699858896</span></span><br></pre></td></tr></table></figure><h5 id="复数型-complex"><a href="#复数型-complex" class="headerlink" title="复数型 complex"></a>复数型 complex</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复数型 complex</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">复数 = 实数 + 虚数</span></span><br><span class="line"><span class="string">        6  +  3j</span></span><br><span class="line"><span class="string">j 如果有一个数，它的平方等于 -1，那么这个数就是 j</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">complexvar = <span class="number">6</span> + <span class="number">3j</span></span><br><span class="line">print( complexvar,type(complexvar),id(complexvar) )<span class="comment"># ==&gt; (6+3j) &lt;class 'complex'&gt; 2516763973808</span></span><br><span class="line"></span><br><span class="line">complexvar = <span class="number">33j</span></span><br><span class="line">print( complexvar,type(complexvar),id(complexvar) )<span class="comment"># ==&gt; 33j &lt;class 'complex'&gt; 2516733177552</span></span><br><span class="line"></span><br><span class="line">complexvar = complex(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">print( complexvar,type(complexvar),id(complexvar) )<span class="comment"># ==&gt; (3+2j) &lt;class 'complex'&gt; 2516763973776</span></span><br></pre></td></tr></table></figure><h3 id="2-字符串类型-str"><a href="#2-字符串类型-str" class="headerlink" title="2.字符串类型 str"></a>2.字符串类型 str</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串类型 str</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">转义字符 \</span></span><br><span class="line"><span class="string">1. 把无意义的字符变得有意义</span></span><br><span class="line"><span class="string">2. 把有意义的字符变得无意义</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\n    换行</span></span><br><span class="line"><span class="string">\r回车，将当前位置移到本行开头</span></span><br><span class="line"><span class="string">\t 水平制表符，Tab</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单引号里面的字符串</span></span><br><span class="line">strvar = <span class="string">'I am alan\rI have a \'dream\''</span></span><br><span class="line">print( strvar,type(strvar) )<span class="comment"># ==&gt; I have a 'dream' &lt;class 'str'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单双引号组合使用</span></span><br><span class="line">strvar = <span class="string">"I am alan\rI have a 'dream'"</span></span><br><span class="line">print( strvar,type(strvar) )<span class="comment"># ==&gt; I have a 'dream' &lt;class 'str'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 三引号里面的字符串</span></span><br><span class="line">strvar = <span class="string">'''</span></span><br><span class="line"><span class="string">"I am alan"</span></span><br><span class="line"><span class="string">"I have a 'dream'"</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print( strvar,type(strvar) )</span><br><span class="line"></span><br><span class="line">strvar = <span class="string">"""</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">"I am alan"</span></span><br><span class="line"><span class="string">"I have a 'dream'"</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print( strvar,type(strvar) )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 带有元字符的字符串不转义输出</span></span><br><span class="line">strvar = <span class="string">r'C:\APP\nXshell\rLanguages'</span></span><br><span class="line">print( strvar,type(strvar) )<span class="comment"># ==&gt; C:\APP\nXshell\rLanguages &lt;class 'str'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ### 字符串的格式化</span></span><br><span class="line"><span class="comment"># %d 整型占位符</span></span><br><span class="line">strvar = <span class="string">'I am %d years old'</span> % (<span class="number">3</span>)</span><br><span class="line">print( strvar,type(strvar) )<span class="comment"># ==&gt; I am 3 years old &lt;class 'str'&gt;</span></span><br><span class="line"></span><br><span class="line">strvar = <span class="string">'I am %3d years old'</span> % (<span class="number">3</span>)</span><br><span class="line">print( strvar,type(strvar) )<span class="comment"># ==&gt; I am   3 years old &lt;class 'str'&gt;</span></span><br><span class="line"></span><br><span class="line">strvar = <span class="string">'I am %-3d years old'</span> % (<span class="number">3</span>)</span><br><span class="line">print( strvar,type(strvar) )<span class="comment"># ==&gt; I am 3   years old &lt;class 'str'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># %f 浮点型占位符</span></span><br><span class="line">strvar = <span class="string">'I Have $ %10f'</span> % (<span class="number">99.99</span>)</span><br><span class="line">print( strvar,type(strvar) )<span class="comment"># ==&gt; I Have $  99.990000 &lt;class 'str'&gt;</span></span><br><span class="line"></span><br><span class="line">strvar = <span class="string">'I Have $ %10.3f'</span> % (<span class="number">99.99</span>)</span><br><span class="line">print( strvar,type(strvar) )<span class="comment"># ==&gt; I Have $     99.990 &lt;class 'str'&gt;</span></span><br><span class="line"></span><br><span class="line">strvar = <span class="string">'I Have $ %-10.3f'</span> % (<span class="number">99.99</span>)</span><br><span class="line">print( strvar,type(strvar) )<span class="comment"># ==&gt; I Have $ 99.990     &lt;class 'str'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># %s 字符串占位符</span></span><br><span class="line">strvar = <span class="string">'%s good'</span> % (<span class="string">'I hope the world to be'</span>)</span><br><span class="line">print( strvar,type(strvar) )<span class="comment"># ==&gt; I hope the world to be good &lt;class 'str'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串的特点： 可获取 不可修改 有序</span></span><br><span class="line"><span class="comment"># 定义一个字符串</span></span><br><span class="line"><span class="comment"># 正向索引 0123456789 ................</span></span><br><span class="line">strvar = <span class="string">"I hope the world to be good"</span></span><br><span class="line"><span class="comment"># 逆向索引 ................        -2-1</span></span><br><span class="line">print(strvar[<span class="number">3</span>])<span class="comment"># ==&gt; o</span></span><br><span class="line"><span class="comment"># strvar[3] = bad# 修改会显示 Error</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串的拼接 +</span></span><br><span class="line">strvar = <span class="string">'abc'</span> + <span class="string">'efg'</span></span><br><span class="line"><span class="keyword">print</span> (strvar)<span class="comment"># ==&gt; abcefg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串的重复 *</span></span><br><span class="line">strvar = <span class="string">'abc'</span> * <span class="number">3</span></span><br><span class="line"><span class="keyword">print</span> (strvar)<span class="comment"># ==&gt; abcabcabc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串的跨行拼接 \</span></span><br><span class="line">strvar = <span class="string">'abc'</span> \</span><br><span class="line"><span class="string">'123'</span></span><br><span class="line"><span class="keyword">print</span> (strvar)<span class="comment"># ==&gt; abc123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串的索引</span></span><br><span class="line"><span class="comment">#  012</span></span><br><span class="line">strvar = <span class="string">'abc'</span></span><br><span class="line"><span class="comment">#-3-2-1</span></span><br><span class="line"><span class="keyword">print</span> (strvar[<span class="number">-1</span>])<span class="comment"># ==&gt; c</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串的切片</span></span><br><span class="line"><span class="comment"># 语法: 字符串[开始索引:结束索引:间隔值]</span></span><br><span class="line">strvar = <span class="string">'abcdefg'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从开始索引截取到最后一个字符</span></span><br><span class="line">var = strvar[<span class="number">1</span>:]</span><br><span class="line">print(var)<span class="comment"># ==&gt; bcdefg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从开头截取到指定的结束索引之前</span></span><br><span class="line">var = strvar[:<span class="number">3</span>]</span><br><span class="line">print(var) <span class="comment"># ==&gt; abc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从指定的开始索引截取到指定的结束索引之前</span></span><br><span class="line">var = strvar[<span class="number">2</span>:<span class="number">-1</span>]</span><br><span class="line">print(var)<span class="comment"># ==&gt; cdef</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从指定的开始索引截取到指定的结束索引之前按照指定的间隔截取</span></span><br><span class="line">var = strvar[<span class="number">1</span>:<span class="number">6</span>:<span class="number">2</span>] <span class="comment"># ==&gt; bdf</span></span><br><span class="line">print(var)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不指定开始索引和结束索引,默认从开始截取到最后，即全部截取</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正向截取</span></span><br><span class="line">var = strvar[::<span class="number">4</span>] <span class="comment"># ==&gt; ae</span></span><br><span class="line">print(var)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逆向截取</span></span><br><span class="line">var = strvar[::<span class="number">-1</span>] <span class="comment"># ==&gt; gfedcba字符串反转</span></span><br><span class="line">print(var)</span><br><span class="line"></span><br><span class="line">var = strvar[::<span class="number">-2</span>] <span class="comment"># ==&gt; geca</span></span><br><span class="line">print(var)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 截取所有字符串</span></span><br><span class="line">var = strvar[:]</span><br><span class="line">print(var)<span class="comment"># ==&gt; bcdefg</span></span><br><span class="line"></span><br><span class="line">var = strvar[::]</span><br><span class="line">print(var)<span class="comment"># ==&gt; abcdefg</span></span><br></pre></td></tr></table></figure><h3 id="3-列表类型-list"><a href="#3-列表类型-list" class="headerlink" title="3.列表类型 list"></a>3.列表类型 list</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表型 list []</span></span><br><span class="line"><span class="comment"># 特点：可获取 可修改 有序</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个空列表</span></span><br><span class="line">listvar = []</span><br><span class="line">print( listvar,type(listvar) )<span class="comment"># ==&gt; [] &lt;class 'list'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个普通列表</span></span><br><span class="line"><span class="comment"># 正向索引 0   1    2     3   4     5</span></span><br><span class="line">listvar = [<span class="number">1</span>,<span class="number">1.5</span>,<span class="string">'alan'</span>,<span class="literal">True</span>,<span class="number">3j</span>,<span class="string">"I am C"</span>]</span><br><span class="line"><span class="comment"># 逆向索引 -6  -5   -4    -3  -2   -1</span></span><br><span class="line">print( listvar,type(listvar) )<span class="comment"># ==&gt; [1, 1.5, 'alan', True, 3j, 'I am C'] &lt;class 'list'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取列表中的一个数据</span></span><br><span class="line">listvar = [<span class="number">1</span>,<span class="number">1.5</span>,<span class="string">'alan'</span>,<span class="literal">True</span>,<span class="number">3j</span>,<span class="string">"I am C"</span>]</span><br><span class="line">var = listvar[<span class="number">5</span>]</span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; I am C &lt;class 'str'&gt;</span></span><br><span class="line"></span><br><span class="line">var = listvar[<span class="number">-1</span>]</span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; I am C &lt;class 'str'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取容器类型数据的长度或元素个数(数字类型无法获取) len</span></span><br><span class="line">listvar = [<span class="number">1</span>,<span class="number">1.5</span>,<span class="string">'alan'</span>,<span class="literal">True</span>,<span class="number">3j</span>,<span class="string">"I am C"</span>]</span><br><span class="line">var = len(listvar[<span class="number">2</span>])</span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; 4 &lt;class 'int'&gt;</span></span><br><span class="line"></span><br><span class="line">var = len(listvar)</span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; 6 &lt;class 'int'&gt;</span></span><br><span class="line"></span><br><span class="line">print( len(listvar[<span class="number">2</span>]),len(listvar) )<span class="comment"># ==&gt; 4 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改列表中的元素</span></span><br><span class="line">listvar = [<span class="number">1</span>,<span class="number">1.5</span>,<span class="string">'alan'</span>,<span class="literal">True</span>,<span class="number">3j</span>,<span class="string">"I am C"</span>]</span><br><span class="line">listvar[<span class="number">2</span>] = <span class="string">'yui'</span></span><br><span class="line">print(listvar)<span class="comment"># ==&gt; [1, 1.5, 'yui', True, 3j, 'I am C']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># append 在列表尾部添加一个元素</span></span><br><span class="line">listvar = [<span class="number">1</span>,<span class="number">1.5</span>,<span class="string">'alan'</span>,<span class="literal">True</span>,<span class="number">3j</span>,<span class="string">"I am C"</span>]</span><br><span class="line">listvar.append(<span class="string">'Hi'</span>)</span><br><span class="line">print(listvar)<span class="comment"># ==&gt; [1, 1.5, 'alan', True, 3j, 'I am C', 'Hi']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># extend 在列表尾部添加多个元素</span></span><br><span class="line">listvar = [<span class="number">1</span>,<span class="number">1.5</span>,<span class="string">'alan'</span>,<span class="literal">True</span>,<span class="number">3j</span>,<span class="string">"I am C"</span>]</span><br><span class="line">listvar.extend([<span class="string">'dream'</span>,<span class="string">'over'</span>])</span><br><span class="line">print(listvar)<span class="comment"># ==&gt; [1, 1.5, 'alan', True, 3j, 'I am C', 'dream', 'over']</span></span><br><span class="line"></span><br><span class="line">listvar += [<span class="number">7</span>,<span class="string">'Have'</span>]</span><br><span class="line">print(listvar)<span class="comment"># ==&gt; [1, 1.5, 'alan', True, 3j, 'I am C', 'dream', 'over', 7, 'Have']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># insert 在列表中插入一个元素</span></span><br><span class="line">listvar = [<span class="number">1</span>,<span class="number">1.5</span>,<span class="string">'alan'</span>,<span class="literal">True</span>,<span class="number">3j</span>,<span class="string">"I am C"</span>]</span><br><span class="line">listvar.insert(<span class="number">1</span>,<span class="string">'pig'</span>)<span class="comment"># 将 pig 这个元素插入到该列表中 下标为 1 (即第二个元素)</span></span><br><span class="line">print(listvar)<span class="comment"># ==&gt; [1, 'pig', 1.5, 'alan', True, 3j, 'I am C']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># remove 从列表中删除一个元素</span></span><br><span class="line">listvar = [<span class="number">1</span>,<span class="number">1.5</span>,<span class="string">'alan'</span>,<span class="literal">True</span>,<span class="number">3j</span>,<span class="string">"I am C"</span>]</span><br><span class="line">listvar.remove(<span class="literal">True</span>)</span><br><span class="line">print(listvar)<span class="comment"># ==&gt; [1.5, 'alan', True, 3j, 'I am C']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># del 语句 删除一个元素</span></span><br><span class="line">listvar = [<span class="number">1</span>,<span class="number">1.5</span>,<span class="string">'alan'</span>,<span class="literal">True</span>,<span class="number">3j</span>,<span class="string">"I am C"</span>]</span><br><span class="line"><span class="keyword">del</span> listvar[<span class="number">0</span>]</span><br><span class="line">print(listvar)<span class="comment"># ==&gt; [1.5, 'alan', True, 3j, 'I am C']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pop 删除/取出一个元素</span></span><br><span class="line">listvar = [<span class="number">1</span>,<span class="number">1.5</span>,<span class="string">'alan'</span>,<span class="literal">True</span>,<span class="number">3j</span>,<span class="string">"I am C"</span>]</span><br><span class="line">listvar.pop(<span class="number">1</span>)<span class="comment"># 如果 () 里面为空，则默认 删除/取出 最后一个元素</span></span><br><span class="line"><span class="keyword">print</span> (listvar)<span class="comment"># ==&gt; [1, 'alan', True, 3j, 'I am C']</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ### 列表分片</span></span><br><span class="line"><span class="comment"># 原列表不会发生任何改变</span></span><br><span class="line"><span class="comment"># 打印列表中从下标为 1 ~ 3 之间的所有元素(不包括 3)</span></span><br><span class="line">listvar = [<span class="number">1</span>,<span class="number">1.5</span>,<span class="string">'alan'</span>,<span class="literal">True</span>,<span class="number">3j</span>,<span class="string">"I am C"</span>]</span><br><span class="line">print(listvar[<span class="number">1</span>:<span class="number">3</span>])<span class="comment"># ==&gt; [1.5, 'alan']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印列表中从下标为 0 ~ 3 之间的所有元素(不包括 3)</span></span><br><span class="line">listvar = [<span class="number">1</span>,<span class="number">1.5</span>,<span class="string">'alan'</span>,<span class="literal">True</span>,<span class="number">3j</span>,<span class="string">"I am C"</span>]</span><br><span class="line">print(listvar[:<span class="number">3</span>])<span class="comment"># ==&gt; [1, 1.5, 'alan']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印列表中从下标为 1 ~ 最后一个 之间的所有元素(包括 最后一个)</span></span><br><span class="line">listvar = [<span class="number">1</span>,<span class="number">1.5</span>,<span class="string">'alan'</span>,<span class="literal">True</span>,<span class="number">3j</span>,<span class="string">"I am C"</span>]</span><br><span class="line">print(listvar[<span class="number">1</span>:])<span class="comment"># ==&gt; [1.5, 'alan', True, 3j, 'I am C']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印列表中从下标为 0 ~ 最后一个 之间的所有元素(包括 最后一个)</span></span><br><span class="line">listvar = [<span class="number">1</span>,<span class="number">1.5</span>,<span class="string">'alan'</span>,<span class="literal">True</span>,<span class="number">3j</span>,<span class="string">"I am C"</span>]</span><br><span class="line">listvar2 = (listvar[:])<span class="comment"># 相当于复制一个列表，这个列表改变了，原列表也不会发生任何变化</span></span><br><span class="line">listvar2.append(<span class="string">'ADD'</span>)</span><br><span class="line">print(listvar2)<span class="comment"># ==&gt; [1, 1.5, 'alan', True, 3j, 'I am C', 'ADD']</span></span><br><span class="line">print(listvar)<span class="comment"># ==&gt; [1, 1.5, 'alan', True, 3j, 'I am C']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># count 查看一个元素在该列表中所出现的次数</span></span><br><span class="line">listvar = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">18</span>]</span><br><span class="line">print(listvar.count(<span class="number">1</span>))<span class="comment"># ==&gt; 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># reverse 将列表原地翻转</span></span><br><span class="line"><span class="comment"># 即第 0 个元素与第 -1 个元素调换，第 1 个元素与 -2 个元素调换，依次全部调换</span></span><br><span class="line">listvar = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">18</span>]</span><br><span class="line">listvar.reverse()</span><br><span class="line">print(listvar)<span class="comment"># ==&gt; [18, 1, 5, 1, 1, 1, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sort 将列表进行排序</span></span><br><span class="line">listvar = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">18</span>]</span><br><span class="line">listvar.sort()</span><br><span class="line">print(listvar)<span class="comment"># ==&gt; [1, 1, 1, 1, 1, 5, 18]</span></span><br><span class="line"></span><br><span class="line">listvar.sort(reverse=<span class="literal">True</span>) <span class="comment"># 按逆序排序</span></span><br><span class="line">print(listvar)<span class="comment"># ==&gt; [18, 5, 1, 1, 1, 1, 1]</span></span><br></pre></td></tr></table></figure><h3 id="4-元组类型-tuple"><a href="#4-元组类型-tuple" class="headerlink" title="4.元组类型 tuple"></a>4.元组类型 tuple</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 元组 tuple ()</span></span><br><span class="line"><span class="comment"># 特点： 可获取 不可修改 有序</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正向索引 0    1     2</span></span><br><span class="line">tuplevar = (<span class="number">1</span>,<span class="string">'dream'</span>,<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 逆向索引   -3   -2    -1</span></span><br><span class="line"></span><br><span class="line">print( tuplevar,type(tuplevar),tuplevar[<span class="number">2</span>],type(tuplevar[<span class="number">2</span>]) )</span><br><span class="line"><span class="comment"># ==&gt; (1, 'dream', True) &lt;class 'tuple'&gt; True &lt;class 'bool'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逗号是区分是否为元组的标识</span></span><br><span class="line">tuplevar = <span class="number">1</span>,<span class="string">'dream'</span>,<span class="literal">True</span></span><br><span class="line">print( tuplevar,type(tuplevar),tuplevar[<span class="number">2</span>],type(tuplevar[<span class="number">2</span>]) )</span><br><span class="line"><span class="comment"># ==&gt; (1, 'dream', True) &lt;class 'tuple'&gt; True &lt;class 'bool'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组内容不可修改</span></span><br><span class="line"><span class="comment"># tuplevar[1] = 'TTY'  # 显示 Error</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个空元组</span></span><br><span class="line">tuplevar = ()</span><br><span class="line">print( tuplevar,type(tuplevar) )<span class="comment"># ==&gt; () &lt;class 'tuple'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在元组中插入元素</span></span><br><span class="line">tuplevar=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">tuplevar = tuplevar[:<span class="number">3</span>] + (<span class="string">'insert'</span>,) + tuplevar[<span class="number">3</span>:]</span><br><span class="line">print(tuplevar)<span class="comment"># ==&gt; (1, 2, 3, 'insert', 4, 5, 6)</span></span><br></pre></td></tr></table></figure><h3 id="5-集合类型-set"><a href="#5-集合类型-set" class="headerlink" title="5.集合类型 set"></a>5.集合类型 set</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集合类型 set&#123;&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">特点: 无序 自动去重 无法获取元素 交叉并补</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">定义集合的值的规范：</span></span><br><span class="line"><span class="string">如下类型才被允许 (可哈希数据类型)</span></span><br><span class="line"><span class="string">Number(int,bool,float,complex),str,tuple</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">不允许的类型 (不可哈希数据类型)</span></span><br><span class="line"><span class="string">list dict set</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个集合</span></span><br><span class="line">setvar = &#123;<span class="string">'alan'</span>,<span class="string">'yui'</span>,<span class="string">'totoro'</span>,<span class="string">'cat'</span>&#125;</span><br><span class="line">print( setvar,type(setvar) )<span class="comment"># ==&gt; &#123;'cat', 'totoro', 'yui', 'alan'&#125; &lt;class 'set'&gt;</span></span><br><span class="line"></span><br><span class="line">setvar = &#123;<span class="string">'alan'</span>,<span class="string">'yui'</span>,<span class="string">'totoro'</span>,<span class="string">'cat'</span>,<span class="string">'yui'</span>,<span class="string">'totoro'</span>&#125;</span><br><span class="line">print( setvar,type(setvar) )<span class="comment"># ==&gt; &#123;'cat', 'totoro', 'yui', 'alan'&#125; &lt;class 'set'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个空的集合</span></span><br><span class="line">setvar = set()</span><br><span class="line">print( setvar,type(setvar) )<span class="comment"># ==&gt; set() &lt;class 'set'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合类型无法获取获取元素</span></span><br><span class="line"><span class="comment"># print(setvar[1])    # ==&gt; Error</span></span><br></pre></td></tr></table></figure><h3 id="6-字典类型-dict"><a href="#6-字典类型-dict" class="headerlink" title="6.字典类型 dict"></a>6.字典类型 dict</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字典类型 dict &#123;&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">键值对的形式 表面有序 实际无序 </span></span><br><span class="line"><span class="string">&#123;"键1":"值1","键2":"值2"&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">定义字典的键的规范： </span></span><br><span class="line"><span class="string">如下类型才被允许 (可哈希数据类型)</span></span><br><span class="line"><span class="string">Number(int,bool,float,complex),str,tuple</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">不允许的类型 (不可哈希数据类型)</span></span><br><span class="line"><span class="string">list dict set</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个字典</span></span><br><span class="line">dictvar = &#123;<span class="string">"top"</span>:<span class="string">"dog"</span>,<span class="string">"middle"</span>:<span class="string">"fox"</span>,<span class="string">"bottom"</span>:<span class="string">"cinder"</span>&#125;</span><br><span class="line">print( dictvar,type(dictvar) )</span><br><span class="line"><span class="comment"># ==&gt; &#123;'top': 'dog', 'middle': 'fox', 'bottom': 'cinder'&#125; &lt;class 'dict'&gt;</span></span><br><span class="line"></span><br><span class="line">dictvar = &#123;<span class="number">6</span>:<span class="string">"A"</span>,<span class="literal">True</span>:<span class="string">"B"</span>,<span class="number">3.14</span>:<span class="string">"C"</span>,<span class="number">3</span>+<span class="number">2j</span>:<span class="string">"D"</span>,<span class="string">"i am C"</span>:<span class="string">"E"</span>,(<span class="string">'a'</span>,<span class="string">'cc'</span>,<span class="number">1</span>):<span class="string">"F"</span>,<span class="string">"ME"</span>:<span class="string">"G"</span>&#125;</span><br><span class="line">print(dictvar)</span><br><span class="line"><span class="comment"># ==&gt; &#123;6: 'A', True: 'B', 3.14: 'C', (3+2j): 'D', 'i am C': 'E', ('a', 'cc', 1): 'F', 'ME': 'G'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取字典中元素的值</span></span><br><span class="line">print(dictvar[<span class="string">"ME"</span>])<span class="comment"># ==&gt; G</span></span><br><span class="line">print(dictvar[(<span class="string">'a'</span>,<span class="string">'cc'</span>,<span class="number">1</span>)])<span class="comment"># ==&gt; F</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改字典中元素的值</span></span><br><span class="line">dictvar[<span class="string">"ME"</span>] = <span class="string">"cat"</span></span><br><span class="line">print(dictvar)</span><br><span class="line"><span class="comment"># ==&gt; &#123;6: 'A', True: 'B', 3.14: 'C', (3+2j): 'D', 'i am C': 'E', ('a', 'cc', 1): 'F', 'ME': 'cat'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加字典中的元素</span></span><br><span class="line">dictvar[<span class="string">"bottom"</span>] = <span class="string">"pig"</span></span><br><span class="line">print(dictvar)</span><br><span class="line"><span class="comment"># ==&gt; &#123;6: 'A', True: 'B', 3.14: 'C', (3+2j): 'D', 'i am C': 'E', ('a', 'cc', 1): 'F', 'ME': 'cat', 'bottom': 'pig'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个空字典</span></span><br><span class="line">dictvar = &#123;&#125;</span><br><span class="line">print( dictvar,type(dictvar) )<span class="comment"># ==&gt; &#123;&#125; &lt;class 'dict'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断一个变量的类型是否为指定的类型</span></span><br><span class="line">var = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>&#125;</span><br><span class="line">print(isinstance(var,int))<span class="comment"># ==&gt; False</span></span><br><span class="line">print(isinstance(var,dict))<span class="comment"># ==&gt; True</span></span><br></pre></td></tr></table></figure><h2 id="数据的缓存机制"><a href="#数据的缓存机制" class="headerlink" title="数据的缓存机制"></a>数据的缓存机制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同一个文件中 数据的缓存机制</span></span><br><span class="line"><span class="comment"># 对于整型而言，-5 ~ 正无穷范围内的相同数值 id 一致</span></span><br><span class="line">a = <span class="number">3333</span></span><br><span class="line">b = <span class="number">3333</span></span><br><span class="line">print( id(a),id(b) )<span class="comment"># ==&gt; 2113489894160 2113489894160</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于浮点型而言，非负数范围内的相同数值 id 一致</span></span><br><span class="line">a = <span class="number">3.14</span></span><br><span class="line">b = <span class="number">3.14</span></span><br><span class="line">print( id(a),id(b) )<span class="comment"># ==&gt; 2113460117960 2113460117960</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">-3.14</span></span><br><span class="line">b = <span class="number">-3.14</span></span><br><span class="line">print( id(a),id(b) )<span class="comment"># ==&gt; 2113460118152 2113460118176</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于布尔型而言，值相同则 id 一致</span></span><br><span class="line">a = <span class="literal">True</span></span><br><span class="line">b = <span class="literal">True</span></span><br><span class="line">print( id(a),id(b) )<span class="comment"># ==&gt; 1699858864 1699858864</span></span><br><span class="line"></span><br><span class="line">a = <span class="literal">True</span></span><br><span class="line">b = <span class="literal">False</span></span><br><span class="line">print( id(a),id(b) )<span class="comment"># ==&gt; 1699858864 1699858896</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于复数型而言，仅仅在只有虚数的情况下且虚数值相同并在正数范围内时 id 一致</span></span><br><span class="line"><span class="comment"># 实数 + 虚数 数值相同 id 不一致</span></span><br><span class="line">a = <span class="number">3</span>+<span class="number">2j</span></span><br><span class="line">b = <span class="number">3</span>+<span class="number">2j</span></span><br><span class="line">print( id(a),id(b) )<span class="comment"># ==&gt; 2113490884944 2113490884976</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正数范围内，仅有虚数且数值相同 id 一致</span></span><br><span class="line">a = <span class="number">2j</span></span><br><span class="line">b = <span class="number">2j</span></span><br><span class="line">print( id(a),id(b) )<span class="comment"># ==&gt; 2113460088528 2113460088528</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 负数范围内，仅有虚数且数值相同 id 不一致</span></span><br><span class="line">a = <span class="number">-3j</span></span><br><span class="line">b = <span class="number">-3j</span></span><br><span class="line">print( id(a),id(b) )<span class="comment"># ==&gt; 2113490885008 2113490885040</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于 字符串类型 和空元组 而言，值相同的情况下 id 一致</span></span><br><span class="line">a = <span class="string">'alan'</span></span><br><span class="line">b = <span class="string">'alan'</span></span><br><span class="line">print( id(a),id(b) )<span class="comment"># ==&gt; 2113489785216 2113489785216</span></span><br><span class="line"></span><br><span class="line">a = ()</span><br><span class="line">b = ()</span><br><span class="line">print( id(a),id(b) )<span class="comment"># ==&gt; 2113459781704 2113459781704</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于 列表 元组(非空元组) 集合 字典 而言，无论什么情况下 id 都不一致</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] </span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print( id(a),id(b) )<span class="comment"># ==&gt; 2113490807880 2113489806984</span></span><br><span class="line"></span><br><span class="line">a = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) </span><br><span class="line">b = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">print( id(a),id(b) )<span class="comment"># ==&gt; 2113490800000 2113490800072</span></span><br><span class="line"></span><br><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">b = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">print( id(a),id(b) )<span class="comment"># ==&gt; 2113489904808 2113490817544</span></span><br><span class="line"></span><br><span class="line">a = &#123;<span class="string">'x'</span>:<span class="number">7</span>,<span class="string">'y'</span>:<span class="number">3</span>&#125;</span><br><span class="line">b = &#123;<span class="string">'x'</span>:<span class="number">7</span>,<span class="string">'y'</span>:<span class="number">3</span>&#125;</span><br><span class="line">print( id(a),id(b) )<span class="comment"># ==&gt; 2113489759688 2113489759760</span></span><br><span class="line"></span><br><span class="line">a = &#123;&#125;</span><br><span class="line">b = &#123;&#125;</span><br><span class="line">print( id(a),id(b) )  <span class="comment"># ==&gt; 2113489760120 2113489759688</span></span><br><span class="line"><span class="comment"># 为什么 b 的 id 会和上一个 a 的 id 一致 ？</span></span><br></pre></td></tr></table></figure><h2 id="数据类型的强制转换"><a href="#数据类型的强制转换" class="headerlink" title="数据类型的强制转换"></a>数据类型的强制转换</h2><h3 id="1-数字类型的强制转换"><a href="#1-数字类型的强制转换" class="headerlink" title="1.数字类型的强制转换"></a>1.数字类型的强制转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Number 数字类型的强制转换 (int float complex bool)</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">-3.14</span></span><br><span class="line">c = <span class="number">3</span><span class="number">-2j</span></span><br><span class="line">d = <span class="literal">True</span></span><br><span class="line">e = <span class="string">'5113'</span></span><br><span class="line">f = <span class="string">'alan1'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制转换成 int</span></span><br><span class="line">var = int(b)<span class="comment"># -3.14 ==&gt; -3</span></span><br><span class="line">print( var,type(var) )<span class="comment"># -3 &lt;class 'int'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># var = int(c)# Error 复数类型无法转换为整型   </span></span><br><span class="line"><span class="comment"># print( var,type(var) )</span></span><br><span class="line"></span><br><span class="line">var = int(d)<span class="comment"># True ==&gt; 1  False ==&gt; 0</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; 1 &lt;class 'int'&gt;</span></span><br><span class="line"></span><br><span class="line">var = int(e)<span class="comment"># '5113' ==&gt; 5113</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; 5113 &lt;class 'int'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># var = int(f)# 'alan1' ==&gt; Error </span></span><br><span class="line"><span class="comment"># print( var,type(var) )   </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制转换成 float</span></span><br><span class="line">var = float(a)<span class="comment"># 2 ==&gt; 2.0</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; 2.0 &lt;class 'float'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># var = float(c)# Error 复数类型无法转换为浮点型</span></span><br><span class="line"><span class="comment"># print( var,type(var) )</span></span><br><span class="line"></span><br><span class="line">var = float(d)<span class="comment"># True ==&gt; 1.0  False ==&gt; 0.0</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; 1.0 &lt;class 'float'&gt;</span></span><br><span class="line"></span><br><span class="line">var = float(e)<span class="comment"># '5113' ==&gt; 5113.0</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; 5113.0 &lt;class 'float'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># var = float(f)# 'alan1' ==&gt; Error</span></span><br><span class="line"><span class="comment"># print( var,type(var) )</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制转换成 complex</span></span><br><span class="line">var = complex(a)<span class="comment"># 2 ==&gt; (2+0j)</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; (2+0j) &lt;class 'complex'&gt;</span></span><br><span class="line"></span><br><span class="line">var = complex(b)<span class="comment"># -3.14 ==&gt; (-3.14+0j)</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; (-3.14+0j) &lt;class 'complex'&gt;</span></span><br><span class="line"></span><br><span class="line">var = complex(d)<span class="comment"># True ==&gt; (1+0j)  False ==&gt; (0j)</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; (1+0j) &lt;class 'complex'&gt;</span></span><br><span class="line"></span><br><span class="line">var = complex(e)<span class="comment"># 5113 ==&gt; (5113+0j)</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; (5113+0j) &lt;class 'complex'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># var = complex(f)# 'alan1' ==&gt; Error</span></span><br><span class="line"><span class="comment"># print( var,type(var) )</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制转换成 bool</span></span><br><span class="line"><span class="comment"># 非 0 0.0 0j False '' [] () &#123;&#125; set() None 的情况下均为 True </span></span><br><span class="line">var = bool(a)<span class="comment"># 2 ==&gt; True</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; True &lt;class 'bool'&gt;</span></span><br><span class="line"></span><br><span class="line">var = bool(b)<span class="comment"># -3.14 ==&gt; True</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; True &lt;class 'bool'&gt;</span></span><br><span class="line"></span><br><span class="line">var = bool(c)<span class="comment"># 3-2j ==&gt; True</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; True &lt;class 'bool'&gt;</span></span><br><span class="line"></span><br><span class="line">var = bool(e)<span class="comment"># '5113' ==&gt; True</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; True &lt;class 'bool'&gt;</span></span><br><span class="line"></span><br><span class="line">var = bool(f)<span class="comment"># 'alan1' ==&gt; True</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; True &lt;class 'bool'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 各类数字类型的初始值</span></span><br><span class="line">intvar = int()</span><br><span class="line">print(intvar,type(intvar))<span class="comment"># ==&gt; 0 &lt;class 'int'&gt;</span></span><br><span class="line">floatvar = float()</span><br><span class="line">print(floatvar,type(floatvar))<span class="comment"># ==&gt; 0.0 &lt;class 'float'&gt;</span></span><br><span class="line">complexvar = complex()</span><br><span class="line">print(complexvar,type(complexvar))<span class="comment"># ==&gt; 0j &lt;class 'complex'&gt;</span></span><br><span class="line">boolvar = bool()</span><br><span class="line">print(boolvar,type(boolvar))<span class="comment"># ==&gt; False &lt;class 'bool'&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对数字型的自动类型转换 int float complex bool</span></span><br><span class="line"><span class="comment"># 默认将精度从低向高进行转换</span></span><br><span class="line"><span class="comment"># bool ==&gt; int ==&gt; float ==&gt; complex</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bool + int</span></span><br><span class="line">var = <span class="literal">True</span> + <span class="number">10</span><span class="comment"># 1 + 10 = 11</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; 11 &lt;class 'int'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bool + float</span></span><br><span class="line">var = <span class="literal">False</span> + <span class="number">3.14</span><span class="comment"># 0.0 + 3.14 = 3.14</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; 3.14 &lt;class 'float'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bool + complex</span></span><br><span class="line">var = <span class="literal">True</span> + (<span class="number">10</span> + <span class="number">2j</span>)<span class="comment"># (1 + 0j) + (10 + 2j) = (11 + 2j)</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; (11+2j) &lt;class 'complex'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># int + float</span></span><br><span class="line">var = <span class="number">3</span> + <span class="number">3.14</span><span class="comment"># 3.0 + 3.14 = 6.140000000000001</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; 6.140000000000001 &lt;class 'float'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># int + complex</span></span><br><span class="line">var = <span class="number">10</span> + (<span class="number">3</span> + <span class="number">6j</span>)<span class="comment"># (10 + 0j) + (3 + 6j) = (13 + 6j) </span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; (13+6j) &lt;class 'complex'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># float + complex</span></span><br><span class="line">var = <span class="number">3.14</span> + (<span class="number">3</span> + <span class="number">6j</span>)<span class="comment"># (3.14 + 0j) + (3 + 6j) = (6.140000000000001 + 6j) </span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; (6.140000000000001+6j) &lt;class 'complex'&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-容器类型的强制转换"><a href="#2-容器类型的强制转换" class="headerlink" title="2.容器类型的强制转换"></a>2.容器类型的强制转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 容器类型的强制转换 str list tuple set dict</span></span><br><span class="line">a = <span class="string">'alan'</span></span><br><span class="line">b = [<span class="number">3</span>,a,<span class="number">1</span>]</span><br><span class="line">c = (<span class="string">"a"</span>,<span class="string">"7"</span>,<span class="string">"c"</span>)</span><br><span class="line">d = &#123;<span class="number">3</span>,(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)&#125;</span><br><span class="line">e = &#123;<span class="string">"a"</span>:<span class="number">1</span>,<span class="string">"b"</span>:<span class="number">2</span>&#125;</span><br><span class="line">f = <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制转换成字符串 str</span></span><br><span class="line"><span class="comment"># 仅是单纯的将当前数据类型加上了引号</span></span><br><span class="line">var = str(b)<span class="comment"># [3,a,1] ==&gt; '[3,'alan',1]'</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; [3, 'alan', 1] &lt;class 'str'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原型化输出 引号会被显示出来</span></span><br><span class="line">print(repr(var))<span class="comment"># ==&gt; "[3, 'alan', 1]"</span></span><br><span class="line"></span><br><span class="line">var = str(e)<span class="comment"># &#123;"a":1,"b":2&#125; ==&gt; '&#123;"a":1,"b":2&#125;'</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; &#123;'a': 1, 'b': 2&#125; &lt;class 'str'&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制转换成列表 list</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">如果是字符串类型，则会将里面的每个字符都当成列表中的一个元素</span></span><br><span class="line"><span class="string">如果是字典类型，则只会将字典里面的键名保留</span></span><br><span class="line"><span class="string">否则只是相当于将数据最外层的括号变成了 [] 列表</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 如果是字符串类型，则会将里面的每个字符都当成列表中的一个元素</span></span><br><span class="line">var = list(a)<span class="comment"># 'alan' ==&gt; ['a','l','a','n']</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; ['a', 'l', 'a', 'n'] &lt;class 'list'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是字典类型，则只会将字典里面的键名保留</span></span><br><span class="line">var = list(e)<span class="comment"># &#123;"a":1,"b":2&#125; ==&gt; ['a','b']</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; ['a', 'b'] &lt;class 'list'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 除字符串和字典类型外，则只是相当于将数据最外层的括号变成了 []</span></span><br><span class="line">var = list(d)<span class="comment"># &#123;3,(5,6,7)&#125; ==&gt; [3,(5,6,7)]</span></span><br><span class="line">print( var,type(var) ,var[<span class="number">1</span>][<span class="number">1</span>])<span class="comment"># ==&gt; [3, (5, 6, 7)] &lt;class 'list'&gt; 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数字类型无法转换为列表型</span></span><br><span class="line"><span class="comment"># var = list(f)# 3.14 ==&gt; Error</span></span><br><span class="line"><span class="comment"># print( var,type(var) )</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制转换成元组 tuple</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">如果是字符串类型，则会将里面的每个字符都当成列表中的一个元素</span></span><br><span class="line"><span class="string">如果是字典类型，则只会将字典里面的键名保留</span></span><br><span class="line"><span class="string">否则只是相当于将数据最外层的括号变成了 () 元组</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">var = tuple(a)<span class="comment"># 'alan' ==&gt; ('a','l','a','n')</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; ('a', 'l', 'a', 'n') &lt;class 'tuple'&gt;</span></span><br><span class="line"></span><br><span class="line">var = tuple(d)<span class="comment"># &#123;3,(5,6,7)&#125; ==&gt; (3,(5 6,7))</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; (3, (5, 6, 7)) &lt;class 'tuple'&gt;</span></span><br><span class="line"></span><br><span class="line">var = tuple(e)<span class="comment"># &#123;"a":1,"b":2&#125; ==&gt; ('a','b')</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; ('a', 'b') &lt;class 'tuple'&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制转换成集合 set</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">如果是字符串类型，则会将里面的每个字符都当成列表中的一个元素</span></span><br><span class="line"><span class="string">如果是字典类型，则只会将字典里面的键名保留</span></span><br><span class="line"><span class="string">否则只是相当于将数据最外层的括号变成了 &#123;&#125; 集合</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">var = set(a)<span class="comment"># 'alan' ==&gt; &#123;'a','n','l'&#125;</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; &#123;'a', 'n', 'l'&#125; &lt;class 'set'&gt;</span></span><br><span class="line"></span><br><span class="line">var = set(b)<span class="comment"># [3,a,1] ==&gt; &#123;1,3,'alan'&#125;</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; &#123;1, 3, 'alan'&#125; &lt;class 'set'&gt;</span></span><br><span class="line"></span><br><span class="line">var = set(e)<span class="comment"># &#123;"a":1,"b":2&#125; ==&gt; &#123;'b','a'&#125;</span></span><br><span class="line">print( var,type(var) )<span class="comment"># ==&gt; &#123;'b', 'a'&#125; &lt;class 'set'&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二级容器(列表 元组 集合 字典)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二级列表</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]]</span><br><span class="line">print(lst[<span class="number">-1</span>][<span class="number">1</span>],lst)<span class="comment"># ==&gt; 6 [1, 2, 3, [5, 6, 7]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二级元组</span></span><br><span class="line">tup = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>))</span><br><span class="line">print(tup[<span class="number">-1</span>][<span class="number">1</span>],tup)<span class="comment"># ==&gt; 6 (1, 2, 3, (5, 6, 7))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二级集合</span></span><br><span class="line">setvar = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,(<span class="number">5</span>,<span class="number">5</span>,<span class="number">7</span>)&#125;<span class="comment"># 集合里无法放入列表集合和字典</span></span><br><span class="line">print(setvar)<span class="comment"># ==&gt; &#123;1, 3, (5, 5, 7)&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二级字典</span></span><br><span class="line">dictvar = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:&#123;<span class="string">"d"</span>:<span class="number">3</span>,<span class="string">"e"</span>:<span class="number">5</span>&#125;&#125;</span><br><span class="line">print(dictvar[<span class="string">'c'</span>][<span class="string">'e'</span>])<span class="comment"># ==&gt; 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 三级容器</span></span><br><span class="line">container = [<span class="number">1</span>,<span class="number">2</span>,(<span class="number">3</span>,<span class="number">5</span>,&#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>&#125;)]</span><br><span class="line">print(container[<span class="number">-1</span>][<span class="number">-1</span>][<span class="string">'a'</span>])<span class="comment"># ==&gt; 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 四级容器</span></span><br><span class="line">container = (<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">5</span>,&#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>&#125;,<span class="string">'d'</span>:[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]&#125;])</span><br><span class="line">print(container[<span class="number">-1</span>][<span class="number">-1</span>][<span class="string">'c'</span>],type(container[<span class="number">-1</span>][<span class="number">-1</span>][<span class="string">'c'</span>]))<span class="comment"># ==&gt; &#123;1, 3&#125; &lt;class 'set'&gt;</span></span><br><span class="line">print(container[<span class="number">-1</span>][<span class="number">-1</span>][<span class="string">'d'</span>][<span class="number">2</span>])<span class="comment"># ==&gt; c</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等长的二级容器</span></span><br><span class="line"><span class="comment"># 容器里面的元素都是容器且容器里面的元素个数都相同</span></span><br><span class="line">lst = [(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]]</span><br><span class="line">lst = &#123;<span class="string">'a'</span>:[<span class="number">1</span>,<span class="number">2</span>],<span class="string">'b'</span>:(<span class="number">6</span>,<span class="number">7</span>)&#125;</span><br><span class="line">lst = ([<span class="number">1</span>,<span class="number">2</span>],(<span class="number">6</span>,<span class="number">9</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制转换成字典</span></span><br><span class="line"><span class="comment"># 要求：等长的二级容器且里面的元素个数为 2</span></span><br><span class="line"></span><br><span class="line">lst = [[<span class="string">'a'</span>,<span class="number">1</span>],[<span class="string">'b'</span>,<span class="number">2</span>]]</span><br><span class="line">dictvar = dict(lst)</span><br><span class="line">print(dictvar,type(dictvar))<span class="comment"># ==&gt; &#123;'a': 1, 'b': 2&#125; &lt;class 'dict'&gt;</span></span><br><span class="line"></span><br><span class="line">tupvar = ([<span class="string">'a'</span>,<span class="number">1</span>],(<span class="string">'b'</span>,<span class="number">2</span>))</span><br><span class="line">dictvar = dict(tupvar)</span><br><span class="line">print(dictvar,type(dictvar))<span class="comment"># ==&gt; &#123;'a': 1, 'b': 2&#125; &lt;class 'dict'&gt;</span></span><br><span class="line"></span><br><span class="line">setvar = &#123; (<span class="string">'a'</span>,<span class="number">1</span>),(<span class="string">'b'</span>,<span class="number">2</span>),(<span class="string">'c'</span>,<span class="number">3</span>)&#125;</span><br><span class="line">dictvar = dict(setvar)<span class="comment"># ==&gt; &#123;'c': 3, 'a': 1, 'b': 2&#125; &lt;class 'dict'&gt;</span></span><br><span class="line">print(dictvar,type(dictvar))<span class="comment"># ==&gt; &#123;'c': 3, 'b': 2, 'a': 1&#125; &lt;class 'dict'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 语法上正确，不推荐使用，因为集合无序，难以满足需求</span></span><br><span class="line">lst = [&#123;<span class="string">'a'</span>,<span class="number">2</span>&#125;]</span><br><span class="line">dictvar = dict(lst)<span class="comment"># ==&gt; &#123;2: 'a'&#125; &lt;class 'dict'&gt;</span></span><br><span class="line">print(dictvar,type(dictvar))<span class="comment"># ==&gt; &#123;'a': 2&#125; &lt;class 'dict'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是字符串的形式，字符串的长度只能为 2，否则 Error</span></span><br><span class="line">lst = [<span class="string">'a1'</span>,<span class="string">'y2'</span>,<span class="string">'z3'</span>]</span><br><span class="line">dictvar = dict(lst)</span><br><span class="line">print(dictvar,type(dictvar))<span class="comment"># ==&gt; &#123;'a': '1', 'y': '2', 'z': '3'&#125; &lt;class 'dict'&gt;</span></span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1. 算术运算符"></a>1. 算术运算符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 算术运算符 + - * / // % **</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># / 结果永远为 浮点型</span></span><br><span class="line">result = <span class="number">6</span> / <span class="number">3</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; 2.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># // 地板除 默认将计算结果仅保留整数位，如果除数或被除数为小数则结果为仅保留整数位的浮点型</span></span><br><span class="line">result = <span class="number">7</span> // <span class="number">2</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; 3</span></span><br><span class="line"></span><br><span class="line">result = <span class="number">7</span> // <span class="number">2.5</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; 2.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># % 取余</span></span><br><span class="line">result = <span class="number">7</span> % <span class="number">5</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; 2</span></span><br><span class="line"></span><br><span class="line">result = <span class="number">-11</span> % <span class="number">7</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; 3</span></span><br><span class="line"></span><br><span class="line">result = <span class="number">-7</span> % <span class="number">11</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; 4</span></span><br><span class="line"></span><br><span class="line">result = <span class="number">11</span> % <span class="number">-7</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; -3</span></span><br><span class="line"></span><br><span class="line">result = <span class="number">-11</span> % <span class="number">-7</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; -4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ** 幂运算</span></span><br><span class="line">result = <span class="number">2</span> ** <span class="number">7</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; 128</span></span><br></pre></td></tr></table></figure><h3 id="2-比较运算符"><a href="#2-比较运算符" class="headerlink" title="2. 比较运算符"></a>2. 比较运算符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比较运算符 &gt; &lt; &gt;= &lt;= == !=</span></span><br><span class="line"><span class="comment"># 所返回的结果只有 True 或 False</span></span><br><span class="line">result = <span class="number">1</span> &gt; <span class="number">3</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; False</span></span><br><span class="line"></span><br><span class="line">result = <span class="number">3</span> &gt;= <span class="number">1</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line">result = <span class="number">1</span> != <span class="number">1</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; False</span></span><br><span class="line"></span><br><span class="line">result = <span class="number">3</span> &lt; <span class="number">4</span> &lt; <span class="number">5</span><span class="comment"># 等同于 3 &lt; 4 and 4 &lt; 5</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; True</span></span><br></pre></td></tr></table></figure><h3 id="3-赋值运算符"><a href="#3-赋值运算符" class="headerlink" title="3. 赋值运算符"></a>3. 赋值运算符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 赋值运算符 = += -= *= /= //= %= **=</span></span><br><span class="line"><span class="comment"># 将一个常量或变量的值赋值给一个变量</span></span><br><span class="line"><span class="comment"># = </span></span><br><span class="line">a = <span class="number">90</span></span><br><span class="line">b = <span class="number">100</span></span><br><span class="line">a = b</span><br><span class="line">print(a)<span class="comment"># ==&gt; 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># += 加法赋值运算符</span></span><br><span class="line">a = <span class="number">90</span></span><br><span class="line">b = <span class="number">100</span></span><br><span class="line">a += b<span class="comment"># a = a + b</span></span><br><span class="line">print(a)<span class="comment"># ==&gt; 190</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># **= 幂赋值运算符</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">9</span></span><br><span class="line">a **= b <span class="comment"># a = a ** b</span></span><br><span class="line">print(a)<span class="comment"># ==&gt; 512</span></span><br></pre></td></tr></table></figure><h3 id="4-成员运算符"><a href="#4-成员运算符" class="headerlink" title="4. 成员运算符"></a>4. 成员运算符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 成员运算符 in 和 not in </span></span><br><span class="line"><span class="comment"># 仅针对容器类型数据，结果返回 True 或 False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对字符串(判断的内容必须是连续性的)</span></span><br><span class="line">var = <span class="string">'I Have A Dream !'</span></span><br><span class="line">result = <span class="string">' Ha'</span> <span class="keyword">in</span> var</span><br><span class="line">print(result)<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">'IH'</span> <span class="keyword">in</span> var</span><br><span class="line">print(result)<span class="comment"># ==&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对列表 元组 集合</span></span><br><span class="line">var = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">57</span>]</span><br><span class="line">result = <span class="number">7</span> <span class="keyword">in</span> var</span><br><span class="line">print(result)<span class="comment"># ==&gt; False</span></span><br><span class="line"></span><br><span class="line">var = &#123;<span class="string">'alan'</span>,<span class="string">'yui'</span>,<span class="string">'yutou'</span>&#125;</span><br><span class="line">result = <span class="string">'yu'</span> <span class="keyword">in</span> var</span><br><span class="line">print(result)<span class="comment"># ==&gt; False</span></span><br><span class="line"></span><br><span class="line">var = [<span class="string">'alan'</span>,<span class="string">'yui'</span>,<span class="string">'yutou'</span>,(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)]</span><br><span class="line">result = <span class="number">2</span> <span class="keyword">in</span> var</span><br><span class="line">print(result)<span class="comment"># ==&gt; False</span></span><br><span class="line"></span><br><span class="line">result = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="keyword">in</span> var</span><br><span class="line">print(result)<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line">var = &#123;<span class="string">'alan'</span>,<span class="string">'yui'</span>,<span class="string">'yutou'</span>,(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>)&#125;</span><br><span class="line">result = <span class="string">'yu'</span> <span class="keyword">not</span> <span class="keyword">in</span> var</span><br><span class="line">print(result)<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对字典(仅仅只是键名去判断)</span></span><br><span class="line">var = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:<span class="number">3</span>&#125;</span><br><span class="line">result = <span class="number">1</span> <span class="keyword">in</span> var</span><br><span class="line">print(result)<span class="comment"># ==&gt; False</span></span><br><span class="line"></span><br><span class="line">result = a <span class="keyword">in</span> var</span><br><span class="line">print(result)<span class="comment"># ==&gt; False</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">'a'</span> <span class="keyword">in</span> var</span><br><span class="line">print(result)<span class="comment"># ==&gt; True</span></span><br></pre></td></tr></table></figure><h3 id="5-身份运算符"><a href="#5-身份运算符" class="headerlink" title="5. 身份运算符"></a>5. 身份运算符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 身份运算符 is 和 is not</span></span><br><span class="line"><span class="comment"># 判断两个数据在内存中的物理地址是否一致，返回 True 或 False</span></span><br><span class="line"><span class="comment"># 无法直接判断列表里面嵌套列表里面的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对于整型 -5 ~ 正无穷，如果两个值相同则 id 一致</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="number">100</span></span><br><span class="line">print(a <span class="keyword">is</span> b)<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">-6</span></span><br><span class="line">b = <span class="number">-6</span></span><br><span class="line">print(a <span class="keyword">is</span> b)<span class="comment"># ==&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对于浮点型非负数范围内的两个值相同则 id 一致</span></span><br><span class="line">a = <span class="number">3.14</span></span><br><span class="line">b = <span class="number">3.14</span></span><br><span class="line">print(a <span class="keyword">is</span> b)<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">-3.14</span></span><br><span class="line">b = <span class="number">-3.14</span></span><br><span class="line">print(a <span class="keyword">is</span> b)<span class="comment"># ==&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对于 字符串类型 和空元组 而言，值相同的情况下 id 一致</span></span><br><span class="line">a = <span class="string">'abc'</span></span><br><span class="line">b = <span class="string">'abc'</span></span><br><span class="line">print(a <span class="keyword">is</span> b)<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对于列表 元组(非空元组) 集合 字典 而言，无论什么情况下 id 都不一致</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(a <span class="keyword">is</span> b)<span class="comment"># ==&gt; False</span></span><br></pre></td></tr></table></figure><h3 id="6-逻辑运算符"><a href="#6-逻辑运算符" class="headerlink" title="6. 逻辑运算符"></a>6. 逻辑运算符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逻辑运算符 and or not</span></span><br><span class="line"><span class="comment"># 逻辑运算符的优先级 () &gt; not &gt; and &gt; or</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># and 逻辑与</span></span><br><span class="line"><span class="comment"># 一假则假 全真则真</span></span><br><span class="line">result = <span class="literal">True</span> <span class="keyword">and</span> <span class="literal">True</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line">result = <span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; False</span></span><br><span class="line"></span><br><span class="line">result = <span class="literal">False</span> <span class="keyword">and</span> <span class="literal">True</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; False</span></span><br><span class="line"></span><br><span class="line">result = <span class="literal">False</span> <span class="keyword">and</span> <span class="literal">False</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or 逻辑或</span></span><br><span class="line"><span class="comment"># 一真则真 全假则假 </span></span><br><span class="line">result = <span class="literal">True</span> <span class="keyword">or</span> <span class="literal">True</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line">result = <span class="literal">True</span> <span class="keyword">or</span> <span class="literal">False</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line">result = <span class="literal">False</span> <span class="keyword">or</span> <span class="literal">True</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line">result = <span class="literal">False</span> <span class="keyword">or</span> <span class="literal">False</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># not 逻辑非</span></span><br><span class="line"><span class="comment"># 真为假 假为真</span></span><br><span class="line">result = <span class="keyword">not</span> <span class="literal">True</span></span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑短路现象</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">True or print('exit')</span></span><br><span class="line"><span class="string">False and print('exit')</span></span><br><span class="line"><span class="string">以上两种情况下，逻辑运算符后面的代码不会执行</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">result = <span class="number">3</span> <span class="keyword">or</span> <span class="number">2</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; 3</span></span><br><span class="line"></span><br><span class="line">result = <span class="number">3</span> <span class="keyword">and</span> <span class="number">2</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; 2</span></span><br><span class="line"></span><br><span class="line">result = <span class="number">3</span> <span class="keyword">or</span> <span class="number">2</span> <span class="keyword">and</span> <span class="number">1</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; 3</span></span><br><span class="line"></span><br><span class="line">result = <span class="number">0</span> <span class="keyword">or</span> <span class="number">2</span> <span class="keyword">and</span> <span class="number">1</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; 1</span></span><br><span class="line"></span><br><span class="line">result = <span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">and</span> <span class="number">1</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; 0</span></span><br><span class="line"></span><br><span class="line">result = <span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">or</span> <span class="number">1</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; 1</span></span><br><span class="line"></span><br><span class="line">result = (<span class="number">3</span> <span class="keyword">or</span> <span class="number">2</span>) <span class="keyword">and</span> <span class="number">1</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; 1</span></span><br><span class="line"></span><br><span class="line">result = <span class="keyword">not</span> (<span class="number">3</span> <span class="keyword">or</span> <span class="number">2</span>) <span class="keyword">and</span> <span class="number">1</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; False</span></span><br><span class="line"></span><br><span class="line">result = <span class="keyword">not</span> (<span class="number">3</span> <span class="keyword">or</span> <span class="number">2</span>) <span class="keyword">or</span> <span class="number">1</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; 1</span></span><br><span class="line"></span><br><span class="line">result = <span class="number">3</span> &gt; <span class="number">2</span> <span class="keyword">and</span> <span class="number">5</span> &lt; <span class="number">1</span> <span class="keyword">or</span> <span class="number">7</span> &gt; <span class="number">9</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; False</span></span><br><span class="line"></span><br><span class="line">result = <span class="number">2</span> &gt; <span class="number">3</span> <span class="keyword">and</span> <span class="number">5</span> &lt; <span class="number">7</span> <span class="keyword">or</span> <span class="number">3</span> &lt; <span class="number">9</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line">result = <span class="number">5</span> &gt; <span class="number">7</span> <span class="keyword">and</span> <span class="number">3</span> &lt; <span class="number">6</span> <span class="keyword">or</span> <span class="number">2</span> &lt; <span class="number">5</span> <span class="keyword">and</span> <span class="number">8</span> &gt; <span class="number">9</span> <span class="keyword">and</span> <span class="number">6</span> &lt; <span class="number">7</span> <span class="keyword">or</span> <span class="number">1</span> &gt; <span class="number">2</span></span><br><span class="line">print(result)<span class="comment"># ==&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">逻辑运算符的优先级 () &gt; not &gt; and &gt; or</span></span><br><span class="line"><span class="string">result = 5 &gt; 7 and 3 &lt; 6 or 2 &lt; 5 and 8 &gt; 9 and 6 &lt; 7 or 1 &gt; 2</span></span><br><span class="line"><span class="string">result = (False and True) or (True and False and True) or False</span></span><br><span class="line"><span class="string">result = False or False or False</span></span><br><span class="line"><span class="string">result = False</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h3 id="7-位运算符"><a href="#7-位运算符" class="headerlink" title="7. 位运算符"></a>7. 位运算符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 位运算符 &amp; | ^ &lt;&lt; &gt;&gt; ~</span></span><br><span class="line"><span class="comment"># 位运算符优先级 ： "&lt;&lt; &gt;&gt;"  &gt;  "&amp;"  &gt;  "^"  &gt;  "|"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &amp; 按位与</span></span><br><span class="line">a = <span class="number">13</span><span class="comment"># 1101</span></span><br><span class="line">b = <span class="number">11</span><span class="comment"># 1011</span></span><br><span class="line">var = a &amp; b<span class="comment"># 1001and</span></span><br><span class="line">print(var)<span class="comment"># ==&gt; 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># | 按位或</span></span><br><span class="line">a = <span class="number">13</span><span class="comment"># 1101</span></span><br><span class="line">b = <span class="number">11</span><span class="comment"># 1011</span></span><br><span class="line">var = a | b<span class="comment"># 1111or</span></span><br><span class="line">print(var)<span class="comment"># ==&gt; 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ^ 按位异或</span></span><br><span class="line">a = <span class="number">13</span><span class="comment"># 1101</span></span><br><span class="line">b = <span class="number">11</span><span class="comment"># 1011</span></span><br><span class="line">var = a ^ b <span class="comment"># 0110同位 相同为 0 不同为 1</span></span><br><span class="line">print(var)<span class="comment"># ==&gt; 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;&lt; 左移 </span></span><br><span class="line">var = <span class="number">3</span> &lt;&lt; <span class="number">3</span><span class="comment"># 乘以 2 的 n 次幂</span></span><br><span class="line">print(var)<span class="comment"># ==&gt; 24</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">00011</span></span><br><span class="line"><span class="string">向左移动 3 位</span></span><br><span class="line"><span class="string">11000</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;&gt; 右移</span></span><br><span class="line">var = <span class="number">10</span> &gt;&gt; <span class="number">2</span><span class="comment"># // 除以 2 的 n 次幂</span></span><br><span class="line">print(var) <span class="comment"># ==&gt; 2</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1010</span></span><br><span class="line"><span class="string"># 向右移动 2 位</span></span><br><span class="line"><span class="string">0010</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ~ 按位非</span></span><br><span class="line">var = ~(<span class="number">-9</span>)<span class="comment"># 结果为 -(n + 1)</span></span><br><span class="line">print(var)<span class="comment"># ==&gt; 8</span></span><br></pre></td></tr></table></figure><h3 id="8-符号的优先级问题"><a href="#8-符号的优先级问题" class="headerlink" title="8. 符号的优先级问题"></a>8. 符号的优先级问题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 算术运算符 &gt; 位运算符 &gt; 比较运算符 &gt; 身份运算符 &gt; 成员运算符 &gt; 逻辑运算符 &gt; 赋值运算符</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">幂运算**# 当 ** 的右侧是一个一元运算符的时候优先级会比它低</span></span><br><span class="line"><span class="string">正负号~ + -# 一元运算符</span></span><br><span class="line"><span class="string">算术操作符* / // + -</span></span><br><span class="line"><span class="string">位运算符&lt;&lt; &gt;&gt; &amp; ^ |</span></span><br><span class="line"><span class="string">比较操作符&lt; &lt;= &gt; &gt;= == !=</span></span><br><span class="line"><span class="string">身份运算符is is not</span></span><br><span class="line"><span class="string">成员运算符in not in</span></span><br><span class="line"><span class="string">逻辑操作符not and or</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">var = <span class="number">5</span> + <span class="number">2</span> &lt;&lt; <span class="number">7</span> // <span class="number">3</span> <span class="keyword">is</span> <span class="number">28</span> <span class="keyword">and</span> <span class="literal">False</span></span><br><span class="line">print(var)<span class="comment"># ==&gt; False</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">var = 7 &lt;&lt; 2 is 28 and False</span></span><br><span class="line"><span class="string">var = 28 is 28 and False</span></span><br><span class="line"><span class="string">var = True and False</span></span><br><span class="line"><span class="string">var = False </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 提升代码的可读性，可使用 ()</span></span><br><span class="line">var = (<span class="number">5</span> + <span class="number">2</span>) &lt;&lt; (<span class="number">7</span> // <span class="number">3</span>) <span class="keyword">is</span> <span class="number">28</span> <span class="keyword">and</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 流程控制</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">流程: 代码执行的过程</span></span><br><span class="line"><span class="string">流程控制: 对代码执行过程的把控</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">三大结构：</span></span><br><span class="line"><span class="string">顺序结构: 从上到下依次执行</span></span><br><span class="line"><span class="string">分支结构: 可分为 1.单项分支 2.双项分支 3.多项分支 4.巢状分支</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 代码块 以冒号作为开始，用缩进来划分相同的作用域</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">3</span> == <span class="number">5</span>:</span><br><span class="line">print(<span class="number">1</span>) </span><br><span class="line">print(<span class="number">2</span>)</span><br><span class="line">print(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 缩进不能混用，选择 全部使用 Tab 键缩进 或是 全部使用 4 个空格键</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单项分支</span></span><br><span class="line">name = <span class="string">'alan'</span></span><br><span class="line"><span class="keyword">if</span> name == <span class="string">'alan'</span>:</span><br><span class="line">print(<span class="string">'I hope the world to be good'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 双项分支</span></span><br><span class="line">name = <span class="string">'accc'</span></span><br><span class="line"><span class="keyword">if</span> name == <span class="string">'alan'</span>:</span><br><span class="line">print(<span class="string">'I hope the world to be good !'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">'Are you okay ?'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果条件表达式为 True，执行 if 这个代码块，也称为真区间</span></span><br><span class="line"><span class="comment"># 如果条件表达式为 False，执行 else 这个代码块，也称为假区间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习题：登录网站</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">账号是 admin</span></span><br><span class="line"><span class="string">密码是 linux</span></span><br><span class="line"><span class="string">如果条件满足，打印 登录成功，否则，打印 登陆失败 </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">username = input('Please input username: ')</span></span><br><span class="line"><span class="string">password = input('Please input password: ')</span></span><br><span class="line"><span class="string">if username == 'admin' and password == 'linux' :</span></span><br><span class="line"><span class="string">print('login successful')</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">print('Account and password verification failed')</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多项分支</span></span><br><span class="line">rich = <span class="literal">True</span></span><br><span class="line">handsome = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> rich == <span class="literal">True</span>:</span><br><span class="line">print(<span class="string">'I like you'</span>)</span><br><span class="line"><span class="keyword">elif</span> handsome == <span class="literal">True</span>:</span><br><span class="line">print(<span class="string">'I love u'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">'You are a good man'</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">先判断条件表达式 1 是否为 True，为 True 则执行对应的代码块，结束判断</span></span><br><span class="line"><span class="string">为 False，则判断 elif 这个分支的条件是否为 True，为 True 则执行对应的代码块，结束判断</span></span><br><span class="line"><span class="string">为 False，则执行 else 这个分支的代码块</span></span><br><span class="line"><span class="string">elif + 表达式可以是 0 个 或者 多个</span></span><br><span class="line"><span class="string">else 不能加表达式可以是 0 个 或者 1 个</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 巢状分支</span></span><br><span class="line">rich = <span class="literal">True</span></span><br><span class="line">handsome = <span class="literal">True</span></span><br><span class="line">energetic = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> rich == <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">if</span> handsome == <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">if</span> energetic == <span class="literal">True</span>:</span><br><span class="line">print(<span class="string">'I love u'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"Let's be friends first"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">'You are a good man'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 小练习 身高测试</span></span><br><span class="line"><span class="comment"># 输入身高，判断属于哪一类身高标准</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">100 cm ~ 150 cmbad</span></span><br><span class="line"><span class="string">150 cm ~ 165 cm short</span></span><br><span class="line"><span class="string">165 cm ~ 175 cmnormal</span></span><br><span class="line"><span class="string">175 cm ~ 185 cmgood</span></span><br><span class="line"><span class="string">185 cm ~ 250 cmgiant</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">height = int(input('Please input your height(cm): '))</span></span><br><span class="line"><span class="string">if 100 &lt;= height &lt;= 150:</span></span><br><span class="line"><span class="string">print('bad')</span></span><br><span class="line"><span class="string">elif 150 &lt; height &lt;= 165:</span></span><br><span class="line"><span class="string">print('short')</span></span><br><span class="line"><span class="string">elif 165 &lt; height &lt;= 175:</span></span><br><span class="line"><span class="string">print('normal')</span></span><br><span class="line"><span class="string">elif 175 &lt; height &lt;= 185:</span></span><br><span class="line"><span class="string">print('good')</span></span><br><span class="line"><span class="string">elif 185 &lt; height &lt;= 250:</span></span><br><span class="line"><span class="string">print('giant')</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">print('Please re-enter as required !') </span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="1-while-循环"><a href="#1-while-循环" class="headerlink" title="1.while 循环"></a>1.while 循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 循环结构 while</span></span><br><span class="line"><span class="comment"># 打印 1 ~ 100</span></span><br><span class="line">i = <span class="number">1</span><span class="comment"># 初始化变量</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">100</span>:<span class="comment"># 判断条件 为 true 执行代码块，为 False 则跳出循环</span></span><br><span class="line">print(i)<span class="comment"># 代码块内容</span></span><br><span class="line">i += <span class="number">1</span><span class="comment"># 自增自减的值</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">第一步 初始化变量 i</span></span><br><span class="line"><span class="string">判断 i &lt;= 100 雕件成立， 返回 True,执行循环体</span></span><br><span class="line"><span class="string">print(i)==&gt; 打印 1</span></span><br><span class="line"><span class="string">i += 1==&gt; i = 2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">第二步</span></span><br><span class="line"><span class="string">判断 i &lt;= 100,即 2 &lt;= 100 条件成立，返回 True,执行循环体</span></span><br><span class="line"><span class="string">print(i)==&gt; 打印 2</span></span><br><span class="line"><span class="string">i += 1==&gt; i = 3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">最后一步</span></span><br><span class="line"><span class="string">当 i = 101 时</span></span><br><span class="line"><span class="string">判断 101 &lt;= 100 条件不成立，返回 False,跳出循环体，程序结束</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 死循环</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">i = 1</span></span><br><span class="line"><span class="string">while True:</span></span><br><span class="line"><span class="string">i += 1</span></span><br><span class="line"><span class="string">print(i)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算整数 1 ~ 100 之间的累加和</span></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">100</span>:</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line">sum += i</span><br><span class="line">print(sum)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line">sum += i</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">100</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">print(sum)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单项循环练习</span></span><br><span class="line"><span class="comment"># 1.打印 一行十个小星星 ★ ☆</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">10</span>:</span><br><span class="line">n += <span class="number">1</span></span><br><span class="line">print(<span class="string">'☆'</span>,end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n--------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.用变量拼接字符串的形式，打印 一行十个小星星 ★ ☆</span></span><br><span class="line">strvar = <span class="string">''</span> </span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">10</span>:</span><br><span class="line">n += <span class="number">1</span></span><br><span class="line">strvar += <span class="string">'★'</span></span><br><span class="line">print(strvar)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n--------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.打印 一行十个小星星，且奇数打印 ★ ，偶数打印 ☆</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">10</span>:</span><br><span class="line">n += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> n % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">print(<span class="string">'★'</span>,end=<span class="string">''</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">'☆'</span>,end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n--------------'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.一个循环 打印十行十列小星星 ★ ☆</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">100</span>:</span><br><span class="line">n += <span class="number">1</span></span><br><span class="line">print(<span class="string">'☆'</span>,end=<span class="string">''</span>)</span><br><span class="line"><span class="keyword">if</span> n % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n--------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.一个循环 打印 十行十列 隔列 变色的小星星 ★ ☆</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">100</span>:</span><br><span class="line">n += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> n % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">print(<span class="string">'☆'</span>,end=<span class="string">''</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">'★'</span>,end=<span class="string">''</span>)</span><br><span class="line"><span class="keyword">if</span> n % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n--------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.一个循环 打印 十行十列 隔行 变色的小星星 ★ ☆</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">100</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n // <span class="number">10</span> % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">print(<span class="string">'☆'</span>,end=<span class="string">''</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">'★'</span>,end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n--------------'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 双层循环练习 </span></span><br><span class="line"><span class="comment"># 1.打印十行十列的小星星 ★ ☆</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> j &lt; <span class="number">10</span>:</span><br><span class="line">j += <span class="number">1</span></span><br><span class="line">print(<span class="string">'☆'</span>,end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n--------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.打印十行十列隔列换色的小星星 ★ ☆</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> j &lt; <span class="number">10</span>:</span><br><span class="line">j += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> j % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">print(<span class="string">'☆'</span>,end=<span class="string">''</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">'★'</span>,end=<span class="string">''</span>)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n--------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 打印十行十列隔行换色的小星星 ★ ☆</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> j &lt; <span class="number">10</span>:</span><br><span class="line">j += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> i % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">print(<span class="string">'☆'</span>,end=<span class="string">''</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">'★'</span>,end=<span class="string">''</span>)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n--------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 打印 99 乘法表</span></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">9</span>:</span><br><span class="line">j = <span class="number">0</span></span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> j &lt; i:</span><br><span class="line">j += <span class="number">1</span></span><br><span class="line">print(<span class="string">'%d × %d = %-2d  '</span> % (i,j,i * j),end=<span class="string">''</span>)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n--------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">i = <span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> i &gt; <span class="number">0</span>:</span><br><span class="line">j = <span class="number">0</span></span><br><span class="line">i -= <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> j &lt; i:</span><br><span class="line">j += <span class="number">1</span></span><br><span class="line">print(<span class="string">'%d × %d = %-2d  '</span> % (i,j,i * j),end=<span class="string">''</span>)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n--------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法三</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">9</span>:</span><br><span class="line">j = <span class="number">0</span></span><br><span class="line">i += <span class="number">1</span></span><br><span class="line">print(<span class="string">'            '</span> * (<span class="number">9</span> - i),end=<span class="string">''</span>)</span><br><span class="line"><span class="keyword">while</span> j &lt; i:</span><br><span class="line">j += <span class="number">1</span></span><br><span class="line">print(<span class="string">'%d × %d = %2d  '</span> % (i,j,i * j),end=<span class="string">''</span>)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n--------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法四</span></span><br><span class="line">i = <span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> i &gt; <span class="number">0</span>:</span><br><span class="line">j = <span class="number">0</span></span><br><span class="line">i -= <span class="number">1</span></span><br><span class="line">print(<span class="string">'            '</span> * (<span class="number">9</span> - i),end=<span class="string">''</span>)</span><br><span class="line"><span class="keyword">while</span> j &lt; i:</span><br><span class="line">j += <span class="number">1</span></span><br><span class="line">print(<span class="string">'%d × %d = %2d  '</span> % (i,j,i * j),end=<span class="string">''</span>)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n--------------'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在数字 100 ~ 999 之间找 吉利数字(如： 111 333 123 321 666 888 ……)</span></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">n = <span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">999</span>:</span><br><span class="line"></span><br><span class="line">units = n % <span class="number">10</span></span><br><span class="line">tens = n % <span class="number">100</span> // <span class="number">10</span></span><br><span class="line">hundreds = n // <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> units == tens == hundreds <span class="keyword">or</span> \</span><br><span class="line">units == tens - <span class="number">1</span> == hundreds - <span class="number">2</span> <span class="keyword">or</span> \</span><br><span class="line">units == tens + <span class="number">1</span> == hundreds + <span class="number">2</span>:</span><br><span class="line">print(n)</span><br><span class="line"></span><br><span class="line">n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n--------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">n = <span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">999</span>:</span><br><span class="line"></span><br><span class="line">units = int(str(n)[<span class="number">2</span>])</span><br><span class="line">tens = int(str(n)[<span class="number">1</span>])</span><br><span class="line">hundreds = int(str(n)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> units == tens == hundreds <span class="keyword">or</span> \</span><br><span class="line">units == tens - <span class="number">1</span> == hundreds - <span class="number">2</span> <span class="keyword">or</span> \</span><br><span class="line">units == tens + <span class="number">1</span> == hundreds + <span class="number">2</span>:</span><br><span class="line">print(n)</span><br><span class="line"></span><br><span class="line">n += <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="2-for-循环"><a href="#2-for-循环" class="headerlink" title="2.for 循环"></a>2.for 循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 循环结构 for</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">for 一般用来遍历数据</span></span><br><span class="line"><span class="string">Iterable 可迭代性数据 : 容器类型数据  range 对象 迭代器</span></span><br><span class="line"><span class="string">for 变量 in Iterable:</span></span><br><span class="line"><span class="string">代码块</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历字符串</span></span><br><span class="line">container = <span class="string">'I love u ?'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> container:</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历 列表</span></span><br><span class="line">container = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> container:</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历 元组</span></span><br><span class="line">container = (<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> container:</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历 集合</span></span><br><span class="line">container = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> container:</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历 字典 (字典类型，默认遍历的对象只是键名)</span></span><br><span class="line">container = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> container:</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 变量的解包</span></span><br><span class="line">a,b,c = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">print(a,b,c)</span><br><span class="line"></span><br><span class="line">a,b,c = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">print(a,b,c)</span><br><span class="line"></span><br><span class="line">a,b,c = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(a,b,c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历等长的 二级容器</span></span><br><span class="line">container = ([<span class="string">'aaa'</span>,<span class="string">'abb'</span>,<span class="string">'acc'</span>],(<span class="string">'111'</span>,<span class="string">'222'</span>,<span class="string">'333'</span>))</span><br><span class="line"><span class="keyword">for</span> a,b,c <span class="keyword">in</span> container:</span><br><span class="line">print(a,b,c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历不等长的 二级容器</span></span><br><span class="line">container = ([<span class="string">'aaa'</span>,<span class="string">'abb'</span>],(<span class="string">'111'</span>,<span class="string">'222'</span>,<span class="string">'333'</span>),[<span class="string">'Hi'</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> container:</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">print(j)</span><br><span class="line"></span><br><span class="line"><span class="comment"># range 函数 创建一个整数列表</span></span><br><span class="line"><span class="comment"># 语法： range(start, stop, step)</span></span><br><span class="line"><span class="comment"># 一个参数的情况</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">print(i)<span class="comment"># range(10) ==&gt; 0 ~ 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二个参数的情况</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">print(i)<span class="comment"># range(1,9) ==&gt; 1 ~ 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 三个参数的情况</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>,<span class="number">3</span>):</span><br><span class="line">print(i)<span class="comment"># range(1,9,3) ==&gt; 1 4 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 倒序的情况</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>,<span class="number">1</span>,<span class="number">-3</span>):</span><br><span class="line">print(i)<span class="comment"># range(10,1,-3) ==&gt; 10 7 4</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 使用 for 循环打印 99 乘法表</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line">print(<span class="string">'%d × %d = %-2d  '</span> % (i,j,i*j),end=<span class="string">''</span>)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 公鸡一个五块钱，母鸡一个三块钱，小鸡三个一块钱，现在要用一百块钱买一百只鸡，问公鸡、母鸡、小鸡各多少只</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">100</span> // <span class="number">5</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">100</span> // <span class="number">3</span>):</span><br><span class="line">k = <span class="number">100</span> - i - j</span><br><span class="line"><span class="keyword">if</span> i * <span class="number">5</span> + j * <span class="number">3</span> + k / <span class="number">3</span> == <span class="number">100</span>:</span><br><span class="line">print(<span class="string">'cocks %-2d, hens %-2d, chicks %-2d'</span> % (i,j,k))</span><br></pre></td></tr></table></figure><h3 id="3-改变循环执行的状态"><a href="#3-改变循环执行的状态" class="headerlink" title="3.改变循环执行的状态"></a>3.改变循环执行的状态</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 循环中的关键字 pass break continue</span></span><br><span class="line"><span class="comment"># pass 占位 可放在代码块中 暂时不去写代码块不会报错</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">5</span> == <span class="number">5</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">print(<span class="string">'ok'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># break 提前终止当前循环</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">10</span>:</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">5</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">print(i)<span class="comment"># ==&gt; 1 2 3 4</span></span><br><span class="line">i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'---------------------'</span>)</span><br><span class="line"></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">3</span>:</span><br><span class="line">j = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> j &lt;= <span class="number">3</span>:</span><br><span class="line">print(i,j)<span class="comment"># ==&gt; 1 1  1 2  2 1  2 2  3 1  3 2    </span></span><br><span class="line"><span class="keyword">if</span> j == <span class="number">2</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">j+=<span class="number">1</span></span><br><span class="line">i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># continue 跳过当前循环,从下一次开始</span></span><br><span class="line"><span class="comment"># 打印 1 ~ 10 跳过 5</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">10</span>:</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">5</span>:</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">print(i)<span class="comment"># ==&gt; 1 2 3 4 6 7 8 9 10</span></span><br><span class="line">i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'---------------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">5</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">print(i)<span class="comment"># ==&gt; 1 2 3 4 6 7 8 9 10</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 打印 1 ~ 100 所有不含有 4 的数字</span></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i&lt;=<span class="number">100</span>:</span><br><span class="line"><span class="keyword">if</span> i % <span class="number">10</span> == <span class="number">4</span> <span class="keyword">or</span> i // <span class="number">10</span> == <span class="number">4</span>:</span><br><span class="line">i+=<span class="number">1</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">print(i)</span><br><span class="line">i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line">str_num = str(i)</span><br><span class="line"><span class="keyword">if</span> <span class="string">"4"</span> <span class="keyword">in</span> str_num:</span><br><span class="line">i+=<span class="number">1</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">print(i)</span><br><span class="line">i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法三</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">str_num = str(i)</span><br><span class="line"><span class="keyword">if</span> <span class="string">"4"</span> <span class="keyword">in</span> str_num:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法四</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line"><span class="keyword">if</span> <span class="string">"4"</span> <span class="keyword">not</span> <span class="keyword">in</span> str(i):</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><h2 id="字符串的格式化"><a href="#字符串的格式化" class="headerlink" title="字符串的格式化"></a>字符串的格式化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串的格式化 format</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 顺序传参</span></span><br><span class="line">strvar = <span class="string">"&#123;&#125; is &#123;&#125;'s idoli"</span>.format(<span class="string">"Bruce Lee"</span>,<span class="string">"tom"</span>)</span><br><span class="line">print(strvar)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 索引传参</span></span><br><span class="line">strvar = <span class="string">"&#123;1&#125; is &#123;0&#125;'s idoli"</span>.format(<span class="string">"Bruce Lee"</span>,<span class="string">"tom"</span>)</span><br><span class="line">print(strvar)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键字传参</span></span><br><span class="line">strvar = <span class="string">"&#123;who1&#125; is &#123;who2&#125;'s idoli"</span>.format(who1=<span class="string">"Bruce Lee"</span>,who2=<span class="string">"tom"</span>)</span><br><span class="line">print(strvar)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器类型数据(列表,元组)传参</span></span><br><span class="line">strvar = <span class="string">"&#123;0[1]&#125; hugs &#123;1[1]&#125;"</span>.format( (<span class="string">"YUI"</span>,<span class="string">"Tom"</span>,<span class="string">"jack"</span>) , [<span class="string">"Linda"</span>,<span class="string">"Annie"</span>,<span class="string">"Alan"</span>] )</span><br><span class="line">print(strvar)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典类型传参,键不需要加上引号</span></span><br><span class="line">strvar = <span class="string">"&#123;group1[1]&#125; hugs &#123;group2[ld]&#125;"</span>.format( group1 = (<span class="string">"YUI"</span>,<span class="string">"Tom"</span>,<span class="string">"jack"</span>) , group2 = &#123;<span class="string">"ld"</span>:<span class="string">"Linda"</span>,<span class="string">"an"</span>:<span class="string">"Annie"</span>,<span class="string">"aa"</span>:<span class="string">"Alan"</span>&#125; )</span><br><span class="line">print(strvar)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># format 语法</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">^ 原字符串居中</span></span><br><span class="line"><span class="string">&gt; 原字符串居右</span></span><br><span class="line"><span class="string">&lt; 原字符串局左</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">语法：</span></span><br><span class="line"><span class="string">&#123;who:.^9&#125;</span></span><br><span class="line"><span class="string">&#123;关键字：填充的字符 填充的位置 原字符串与填充字符的总长度 &#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">strvar = <span class="string">'&#123;who:·^9&#125; works in &#123;where:-^12&#125;'</span>.format(who=<span class="string">'Tom'</span>,where=<span class="string">'Shanghai'</span>)</span><br><span class="line">print(strvar)<span class="comment"># ==&gt; ···Tom··· works in --Shanghai--</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进制转换等特殊符号的使用( :d :f :s :, )</span></span><br><span class="line"><span class="comment"># :d  整型占位符</span></span><br><span class="line">strvar = <span class="string">"Han Meimei's watch is worth $&#123;:d&#125;"</span>.format(<span class="number">30000</span>)</span><br><span class="line">print(strvar)<span class="comment"># ==&gt; Han Meimei's watch is worth $30000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># :6d 占用两位,默认居右</span></span><br><span class="line">strvar = <span class="string">"Han Meimei's watch is worth $&#123;:6d&#125;"</span>.format(<span class="number">30000</span>)</span><br><span class="line">print(strvar)<span class="comment"># ==&gt; Han Meimei's watch is worth $ 30000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># :f 浮点型占位符</span></span><br><span class="line">strvar = <span class="string">"Han Meimei's watch is worth $&#123;:f&#125;"</span>.format(<span class="number">30000.99</span>)</span><br><span class="line">print(strvar)<span class="comment"># ==&gt; Han Meimei's watch is worth $30000.990000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># :.1f 保留一位小数，默认会四舍五入</span></span><br><span class="line">strvar = <span class="string">"Han Meimei's watch is worth $&#123;:.1f&#125;"</span>.format(<span class="number">30000.99</span>)</span><br><span class="line">print(strvar)<span class="comment"># ==&gt; Han Meimei's watch is worth $30001.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># :s 字符串占位符</span></span><br><span class="line">strvar = <span class="string">"&#123;:s&#125;"</span>.format(<span class="string">"hello"</span>)</span><br><span class="line">print(strvar)<span class="comment"># ==&gt; hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># :, 金钱占位符</span></span><br><span class="line">strvar = <span class="string">"&#123;:,&#125;"</span>.format(<span class="number">666666666</span>)</span><br><span class="line">print(strvar)<span class="comment"># ==&gt; 666,666,666</span></span><br></pre></td></tr></table></figure><h2 id="字符串相关函数"><a href="#字符串相关函数" class="headerlink" title="字符串相关函数"></a>字符串相关函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串相关函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># capitalize 将字符串首字母大写</span></span><br><span class="line">strvar = <span class="string">'i hope the world to be good'</span></span><br><span class="line">var = strvar.capitalize()</span><br><span class="line">print(var)<span class="comment"># ==&gt; I hope the world to be good</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># title 将每个单词的首字母大写</span></span><br><span class="line">strvar = <span class="string">'i hope the world to be good'</span></span><br><span class="line">var = strvar.title()</span><br><span class="line">print(var)<span class="comment"># ==&gt; I Hope The World To Be Good</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># upper 将所有字母变成大写</span></span><br><span class="line">strvar = <span class="string">'i hope the world to be good'</span></span><br><span class="line">var = strvar.upper()</span><br><span class="line">print(var)<span class="comment"># ==&gt; I HOPE THE WORLD TO BE GOOD</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lower 将所有字母变成小写</span></span><br><span class="line">strvar = <span class="string">'ABC'</span></span><br><span class="line">var = strvar.lower()</span><br><span class="line">print(var)<span class="comment"># ==&gt; abc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># swapcase 大小写互换</span></span><br><span class="line">strvar = <span class="string">'aBcD'</span></span><br><span class="line">var = strvar.swapcase()</span><br><span class="line">print(var)<span class="comment"># ==&gt; AbCd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># count 统计字符串中的某个元素的数量</span></span><br><span class="line">strvar = <span class="string">'i hope the world to be good'</span></span><br><span class="line">var = strvar.count(<span class="string">'e'</span>)</span><br><span class="line">print(var)<span class="comment"># ==&gt; 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># find 查找某个字符串 第一次 出现的索引位置</span></span><br><span class="line"><span class="comment"># find('要查找的字符串'[,开始索引值,结束索引值]) </span></span><br><span class="line">strvar = <span class="string">'i hope the world to be good'</span></span><br><span class="line">var = strvar.find(<span class="string">'hope'</span>)</span><br><span class="line">print(var)<span class="comment"># ==&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有查找到，则返回 -1</span></span><br><span class="line">var = strvar.find(<span class="string">'hope'</span>,<span class="number">7</span>)</span><br><span class="line">print(var)<span class="comment"># ==&gt; -1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找索引号从 10 到 15 之间的指定内容</span></span><br><span class="line">var = strvar.find(<span class="string">'o'</span>,<span class="number">10</span>,<span class="number">15</span>)</span><br><span class="line">print(var)<span class="comment"># ==&gt; 12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># index 查找某个字符串 第一次 出现的索引位置</span></span><br><span class="line"><span class="comment"># 与 find 功能相同，但是 index 如果查找不到相关的内容就会报错</span></span><br><span class="line"><span class="comment"># var = strvar.index('abc')</span></span><br><span class="line"><span class="comment"># print(var)# ==&gt; Error</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># startswith 判断是否以某个字符或字符串开头</span></span><br><span class="line"><span class="comment"># startswith('要查找的字符串'[,开始索引值,结束索引值]) </span></span><br><span class="line">strvar = <span class="string">'i hope the world to be good'</span></span><br><span class="line">var = strvar.startswith(<span class="string">'I'</span>)</span><br><span class="line">print(var)<span class="comment"># ==&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定范围进行判定</span></span><br><span class="line">var = strvar.startswith(<span class="string">'o'</span>,<span class="number">18</span>)<span class="comment"># 判断在 下标为 18 的元素开始之后的内容是否以字符 o 开头</span></span><br><span class="line">print(var)<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># endswith 判断是否以某个字符或字符串结尾</span></span><br><span class="line">var = strvar.endswith(<span class="string">'good'</span>)</span><br><span class="line">print(var)<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line">var = strvar.endswith(<span class="string">'oo'</span>,<span class="number">-4</span>,<span class="number">-1</span>)</span><br><span class="line">print(var)<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># split 将字符串分割成列表(默认分割字符是空格,从左向右分割)</span></span><br><span class="line">strvar = <span class="string">'Do you like to read books ?'</span></span><br><span class="line">var = strvar.split()</span><br><span class="line">print(var)<span class="comment"># ==&gt; ['Do', 'you', 'like', 'to', 'read', 'books', '?']</span></span><br><span class="line"></span><br><span class="line">var = strvar.split(<span class="string">'o'</span>)</span><br><span class="line">print(var)<span class="comment"># ==&gt; ['D', ' y', 'u like t', ' read b', '', 'ks ?']</span></span><br><span class="line"></span><br><span class="line">var = strvar.split(<span class="string">'o'</span>,<span class="number">2</span>)<span class="comment"># 以字符 o 为分割符，从左向右，分割的次数为 2</span></span><br><span class="line">print(var)<span class="comment"># ==&gt; ['D', ' y', 'u like to read books ?']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rsplit 从右向左分割</span></span><br><span class="line">var = strvar.rsplit(<span class="string">'o'</span>,<span class="number">2</span>)<span class="comment"># 以字符 o 为分割符，从左向右，分割的次数为 2</span></span><br><span class="line">print(var)<span class="comment"># ==&gt; ['Do you like to read b', '', 'ks ?']</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># join 按照一个指定的字符将列表拼接成字符串(任意容器类型均可)</span></span><br><span class="line">lst = [<span class="string">'Are'</span>,<span class="string">'you'</span>,<span class="string">'okay'</span>,<span class="string">'?'</span>]</span><br><span class="line">var = <span class="string">'+'</span>.join(lst)</span><br><span class="line">print(var)<span class="comment"># ==&gt; Are+you+okay+?</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># replace 替换字符串(可选择替换的次数)</span></span><br><span class="line">strvar = <span class="string">'are you okay okay okay'</span></span><br><span class="line">var = strvar.replace(<span class="string">'ok'</span>,<span class="string">'OK'</span>)</span><br><span class="line">print(var)<span class="comment"># ==&gt; are you OKay OKay OKay</span></span><br><span class="line"></span><br><span class="line">var = strvar.replace(<span class="string">'ok'</span>,<span class="string">'OK'</span>,<span class="number">1</span>)</span><br><span class="line">print(var)<span class="comment"># ==&gt; are you OKay okay okay</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># isdigit 检测字符串 二进制字节流 是否全部由数字组成</span></span><br><span class="line">strvar = <span class="string">'123'</span></span><br><span class="line">var = strvar.isdigit()</span><br><span class="line">print(var)<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line">strvar = <span class="string">b'ABC23'</span></span><br><span class="line">print(strvar , type(strvar))<span class="comment"># ==&gt; b'ABC23' &lt;class 'bytes'&gt;</span></span><br><span class="line">var = strvar.isdigit()</span><br><span class="line">print(var)<span class="comment"># ==&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># isdecimal 检测字符串是否以数字组成 必须是纯数字</span></span><br><span class="line">strvar = <span class="string">"1234"</span></span><br><span class="line">res = strvar.isdecimal()</span><br><span class="line">print(res)<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># len 计算容器类型的长度</span></span><br><span class="line">strvar = <span class="string">'abcdef'</span></span><br><span class="line">print(len(strvar))<span class="comment"># ==&gt; 6</span></span><br><span class="line"></span><br><span class="line">strvar = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'a'</span>,<span class="string">'b'</span>]</span><br><span class="line">print(len(strvar))<span class="comment"># ==&gt; 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># strip 去除首尾双边指定的字符(默认为空白符)</span></span><br><span class="line">strvar = <span class="string">' a b    '</span></span><br><span class="line">var = strvar.strip()</span><br><span class="line">print(var)<span class="comment"># ==&gt; 'a b'</span></span><br><span class="line"></span><br><span class="line">strvar = <span class="string">' #a b ##'</span></span><br><span class="line">var = strvar.strip(<span class="string">'#'</span>)</span><br><span class="line">print(var)<span class="comment"># ==&gt; ' #a b '</span></span><br></pre></td></tr></table></figure><h2 id="列表的相关操作"><a href="#列表的相关操作" class="headerlink" title="列表的相关操作"></a>列表的相关操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表的拼接(同元组)</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] + [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">print(lst)<span class="comment"># ==&gt; [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的重复(同元组)</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] * <span class="number">3</span></span><br><span class="line">print(lst)<span class="comment"># ==&gt; [1, 2, 3, 1, 2, 3, 1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的切片(同元组)</span></span><br><span class="line"><span class="comment"># 从指定的开始索引截取到最后</span></span><br><span class="line">lst = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>]</span><br><span class="line">var = lst[<span class="number">5</span>:]</span><br><span class="line">print(var)<span class="comment"># ==&gt; ['f', 'g']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从开头截取到指定的结束索引之前</span></span><br><span class="line">lst = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>]</span><br><span class="line">var = lst[:<span class="number">3</span>]</span><br><span class="line">print(var)<span class="comment"># ==&gt; ['a','b','c']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从指定的开始索引截取到指定的结束索引之前</span></span><br><span class="line">lst = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>]</span><br><span class="line">var = lst[<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line">print(var)<span class="comment"># ==&gt; ['b','c','d','e']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从指定的开始索引截取到指定的结束索引之前，且按照指定的间隔截取列表元素</span></span><br><span class="line">lst = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>]</span><br><span class="line">var = lst[<span class="number">1</span>:<span class="number">6</span>:<span class="number">2</span>]<span class="comment"># 1 3 5</span></span><br><span class="line">print(var)<span class="comment"># ==&gt; ['b','d','f']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 截取所有列表元素</span></span><br><span class="line">lst = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>]</span><br><span class="line">var = lst[:]</span><br><span class="line">print(var)<span class="comment"># ==&gt; ['a', 'b', 'c', 'd', 'e', 'f', 'g']</span></span><br><span class="line"></span><br><span class="line">var = lst[::]</span><br><span class="line">print(var)<span class="comment"># ==&gt; ['a', 'b', 'c', 'd', 'e', 'f', 'g']</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的获取(同元组)</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(lst[<span class="number">2</span>])<span class="comment"># ==&gt; 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的修改</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">lst[<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">print(lst)<span class="comment"># ==&gt; [1, 0, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片式修改列表(修改的值必须是可迭代性数据 Iterable(容器类型数据 range对象 迭代器))</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">lst[<span class="number">1</span>:<span class="number">3</span>] = <span class="string">'abcdef'</span></span><br><span class="line">print(lst)<span class="comment"># ==&gt; [1, 'a', 'b', 'c', 'd', 'e', 'f', 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line">lst[::<span class="number">4</span>] = <span class="string">'ABC'</span><span class="comment"># ==&gt; 带有间隔值的切片修改,必须切片数与修改数相同</span></span><br><span class="line">print(lst)<span class="comment"># ==&gt; ['A', 'a', 'b', 'c', 'B', 'e', 'f', 4, 'C', 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的删除操作</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">del</span> lst[<span class="number">-3</span>]</span><br><span class="line">print(lst)<span class="comment"># ==&gt; [1, 2, 3, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用切片删除元素</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">del</span> lst[::<span class="number">2</span>]</span><br><span class="line">print(lst)<span class="comment"># ==&gt; [2, 4, 6]</span></span><br></pre></td></tr></table></figure><h2 id="列表相关函数"><a href="#列表相关函数" class="headerlink" title="列表相关函数"></a>列表相关函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加元素</span></span><br><span class="line">lst = [<span class="string">'tom'</span>,<span class="string">'jack'</span>]</span><br><span class="line"><span class="comment"># 1.append 在列表的尾部添加新的元素</span></span><br><span class="line">lst.append(<span class="string">'alan'</span>)</span><br><span class="line">print(lst)<span class="comment"># ==&gt; ['tom', 'jack', 'alan']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.insert 在指定的索引前面插入元素</span></span><br><span class="line">lst.insert(<span class="number">1</span>,<span class="string">'yui'</span>)</span><br><span class="line">print(lst)<span class="comment"># ==&gt; ['tom', 'yui', 'jack', 'alan']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.extend 追加新的元素列表来扩展原来的列表</span></span><br><span class="line">lst.extend(range(<span class="number">3</span>))</span><br><span class="line">print(lst)<span class="comment"># ==&gt; ['tom', 'yui', 'jack', 'alan', 0, 1, 2]</span></span><br><span class="line"></span><br><span class="line">lst.extend([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line">print(lst)<span class="comment"># ==&gt; ['tom', 'yui', 'jack', 'alan', 0, 1, 2, 'a', 'b', 'c']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除元素</span></span><br><span class="line"><span class="comment"># 1.pop 通过指定的索引删除元素，若没有指定索引默认会删除最后的一个元素</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">lst.pop()</span><br><span class="line">print(lst)<span class="comment"># ==&gt; [1, 2]</span></span><br><span class="line"></span><br><span class="line">lst.pop(<span class="number">1</span>)</span><br><span class="line">print(lst)<span class="comment"># ==&gt; [1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.remove 通过元素的值来删除,如果多个相同元素,默认删除第一个</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">1</span>]</span><br><span class="line">lst.remove(<span class="number">5</span>)</span><br><span class="line">print(lst)<span class="comment"># ==&gt; [1,3,1,7,1]</span></span><br><span class="line"></span><br><span class="line">lst.remove(<span class="number">1</span>)</span><br><span class="line">print(lst)<span class="comment"># ==&gt; [3,1,7,1]</span></span><br><span class="line"></span><br><span class="line">lst.remove(<span class="number">1</span>)</span><br><span class="line">print(lst)<span class="comment"># ==&gt; [3,7,1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.clear 清空列表</span></span><br><span class="line">lst.clear()</span><br><span class="line">print(lst)<span class="comment"># ==&gt; []</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># index 获取某个值在列表中的索引</span></span><br><span class="line">lst = [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>]</span><br><span class="line">var = lst.index(<span class="string">'B'</span>)</span><br><span class="line">print(var)<span class="comment"># ==&gt; 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 若该值在不列表中则会报错</span></span><br><span class="line"><span class="comment"># var = lst.index('e')</span></span><br><span class="line"><span class="comment"># print(var)# ==&gt; Error</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># count 查看一个元素在该列表中所出现的次数</span></span><br><span class="line">list = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">18</span>]</span><br><span class="line">print(list.count(<span class="number">1</span>))<span class="comment"># ==&gt; 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sort 将列表进行排序(默认从小到大)</span></span><br><span class="line">lst = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">20</span>,<span class="number">16</span>]</span><br><span class="line">lst.sort()</span><br><span class="line">print(lst)<span class="comment"># ==&gt; [1, 1, 3, 6, 7, 16, 20]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 倒序</span></span><br><span class="line">lst.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">print(lst)<span class="comment"># ==&gt; [20, 16, 7, 6, 3, 1, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字母排序，按照 ascii 编码排序</span></span><br><span class="line">lst = [<span class="string">'alan'</span>,<span class="string">'yui'</span>,<span class="string">'tom'</span>,<span class="string">'sufa'</span>,<span class="string">'yoka'</span>]</span><br><span class="line">lst.sort()</span><br><span class="line">print(lst)<span class="comment"># ==&gt; ['alan', 'sufa', 'tom', 'yoka', 'yui']</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># reverse 将列表翻转</span></span><br><span class="line"><span class="comment"># 即第 0 个元素与第 -1 个元素调换，第 1 个元素与 -2 个元素调换，依次全部调换</span></span><br><span class="line">lst.reverse()</span><br><span class="line">print(lst)<span class="comment"># ==&gt; ['yui', 'yoka', 'tom', 'sufa', 'alan']</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于元组来说，元素的值不能改变，但元组中的列表可以改变</span></span><br><span class="line">tupvar = (<span class="number">1</span>,<span class="number">2</span>,[<span class="string">'a'</span>,<span class="string">'b'</span>])</span><br><span class="line">tupvar[<span class="number">-1</span>][<span class="number">-1</span>] = <span class="string">'hi'</span></span><br><span class="line">print(tupvar)<span class="comment"># ==&gt; (1, 2, ['a', 'hi'])</span></span><br></pre></td></tr></table></figure><h2 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认情况下将列表 a 的值赋值给列表 b,当列表 a 的值发生改变时，列表b 的值也会发生改变</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = a</span><br><span class="line">a.append(<span class="number">100</span>)</span><br><span class="line">print(a,b)<span class="comment"># ==&gt; [1, 2, 3, 100] [1, 2, 3, 100]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># import 引入 copy 模块</span></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">模块方法</span></span><br><span class="line"><span class="string">copy.copy()浅拷贝</span></span><br><span class="line"><span class="string">copy.deepcopy()深拷贝</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 浅拷贝 仅仅复制了容器中元素的地址</span></span><br><span class="line"><span class="comment">#方法一</span></span><br><span class="line">lst1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">lst2 = lst1.copy()</span><br><span class="line">lst1.append(<span class="number">6</span>)</span><br><span class="line">print(lst1,lst2)<span class="comment"># ==&gt; [1, 2, 3, 6] [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方法二</span></span><br><span class="line">lst1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">lst2 = copy.copy(lst1)</span><br><span class="line">lst1.append(<span class="number">6</span>)</span><br><span class="line">print(lst1,lst2)<span class="comment"># ==&gt; [1, 2, 3, 6] [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">lst1 = [<span class="number">1</span>,<span class="number">2</span>,[<span class="string">'a'</span>,<span class="string">'b'</span>]]</span><br><span class="line">lst2 = lst1.copy()</span><br><span class="line">lst1[<span class="number">2</span>].append(<span class="number">7</span>)</span><br><span class="line">print(lst1,lst2)<span class="comment"># ==&gt; [1, 2, ['a', 'b', 7]] [1, 2, ['a', 'b', 7]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 深拷贝 拷贝所有层级的容器数据,都形成独立的一份</span></span><br><span class="line">lst1 = [<span class="number">1</span>,<span class="number">2</span>,[<span class="string">'a'</span>,<span class="string">'b'</span>]]</span><br><span class="line">lst2 = copy.deepcopy(lst1)</span><br><span class="line">lst1[<span class="number">2</span>].append(<span class="number">7</span>)</span><br><span class="line">print(lst1,lst2)<span class="comment"># ==&gt; [1, 2, ['a', 'b', 7]] [1, 2, ['a', 'b']]</span></span><br><span class="line"></span><br><span class="line">lst1 = [<span class="number">1</span>,&#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:[<span class="number">5</span>,<span class="number">6</span>]&#125;]</span><br><span class="line">lst2 = copy.deepcopy(lst1)</span><br><span class="line">lst1[<span class="number">-1</span>][<span class="string">'b'</span>].append(<span class="string">'ok'</span>)</span><br><span class="line">print(lst1,lst2)<span class="comment"># ==&gt; [1, &#123;'a': 1, 'b': [5, 6, 'ok']&#125;] [1, &#123;'a': 1, 'b': [5, 6]&#125;]</span></span><br></pre></td></tr></table></figure><h2 id="字典相关函数"><a href="#字典相关函数" class="headerlink" title="字典相关函数"></a>字典相关函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加</span></span><br><span class="line">dicvar = &#123;&#125;</span><br><span class="line"></span><br><span class="line">dicvar[<span class="string">'a'</span>] = <span class="number">1</span></span><br><span class="line">print(dicvar)<span class="comment"># ==&gt; &#123;'a': 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># formkeys() 使用一组键和默认值创建字典</span></span><br><span class="line">keys = [<span class="string">"a"</span>,<span class="string">"b"</span>]</span><br><span class="line">dicvar = &#123;&#125;.fromkeys(keys,<span class="number">3</span>)</span><br><span class="line">print(dicvar)<span class="comment"># ==&gt; &#123;'a': 3, 'b': 3&#125;</span></span><br><span class="line"></span><br><span class="line">dicvar = &#123;&#125;.fromkeys(keys,[])</span><br><span class="line">print(dicvar)<span class="comment"># ==&gt; &#123;'a': [], 'b': []&#125;</span></span><br><span class="line"></span><br><span class="line">dicvar[<span class="string">'a'</span>].append(<span class="number">1</span>)</span><br><span class="line">print(dicvar)<span class="comment"># ==&gt; &#123;'a': [1], 'b': [1]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line"><span class="comment"># pop() 通过键名去删除键值对 (若没有该键名可设置默认值,预防报错)</span></span><br><span class="line">dicvar = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:<span class="number">3</span>&#125;</span><br><span class="line">dicvar.pop(<span class="string">'b'</span>)</span><br><span class="line">print(dicvar)<span class="comment"># ==&gt; &#123;'a': 1, 'c': 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># popitem() 删除最后一个键值对</span></span><br><span class="line">dicvar.popitem()</span><br><span class="line">print(dicvar)<span class="comment"># ==&gt; &#123;'a': 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># clear() 清空字典</span></span><br><span class="line">dicvar.clear()</span><br><span class="line">print(dicvar)<span class="comment"># ==&gt; &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line"><span class="comment"># update() 批量更新 该键存在就更新，不存在则添加</span></span><br><span class="line">dicvar = &#123;<span class="string">'a'</span>:<span class="number">1</span>&#125;</span><br><span class="line">dicvar2 = &#123;<span class="string">'a'</span>:<span class="number">3</span>,<span class="string">'b'</span>:<span class="number">5</span>&#125;</span><br><span class="line">dicvar.update(dicvar2)</span><br><span class="line">print(dicvar)<span class="comment"># ==&gt; &#123;'a': 3, 'b': 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line"><span class="comment"># get()  通过键名获取值(若没有该键可设置默认值,预防报错)</span></span><br><span class="line">dicvar =  &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:<span class="number">3</span>&#125;</span><br><span class="line">var = dicvar.get(<span class="string">'b'</span>)</span><br><span class="line">print(var)<span class="comment"># ==&gt; 2</span></span><br><span class="line"></span><br><span class="line">var = dicvar.get(<span class="string">'bb'</span>)</span><br><span class="line">print(var)<span class="comment"># ==&gt; None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认值</span></span><br><span class="line">var = dicvar.get(<span class="string">'bb'</span>,<span class="string">'unable to find'</span>)</span><br><span class="line">print(var)<span class="comment"># ==&gt; unable to find</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># keys() 将字典的键组成新的可迭代对象(返回一个字典所有的键)</span></span><br><span class="line">dicvar =  &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:<span class="number">3</span>&#125;</span><br><span class="line">var = dicvar.keys()</span><br><span class="line">print(var,type(var))<span class="comment"># ==&gt; dict_keys(['a', 'b', 'c']) &lt;class 'dict_keys'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># values() 将字典中的值组成新的可迭代对象</span></span><br><span class="line">var = dicvar.values()</span><br><span class="line">print(var,type(var))<span class="comment"># ==&gt; dict_values([1, 2, 3]) &lt;class 'dict_values'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># items() 将字典的键值对凑成一个个元组,组成新的可迭代对象(返回可遍历的(键, 值) 元组列表)</span></span><br><span class="line">var = dicvar.items()</span><br><span class="line">print(var,type(var))<span class="comment"># ==&gt; dict_items([('a', 1), ('b', 2), ('c', 3)]) &lt;class 'dict_items'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dicvar.items():</span><br><span class="line">print(i)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">('a', 1)</span></span><br><span class="line"><span class="string">('b', 2)</span></span><br><span class="line"><span class="string">('c', 3)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> dicvar.items():</span><br><span class="line">print(k,v)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">a 1</span></span><br><span class="line"><span class="string">b 2</span></span><br><span class="line"><span class="string">c 3</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h2 id="集合相关操作"><a href="#集合相关操作" class="headerlink" title="集合相关操作"></a>集合相关操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集合的相关操作(交叉并补)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># intersection() 交集</span></span><br><span class="line">set1 = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;</span><br><span class="line">set2 = &#123;<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>&#125;</span><br><span class="line">var = set1.intersection(set2)</span><br><span class="line">print(var)<span class="comment"># ==&gt; &#123;'c'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简写</span></span><br><span class="line">var = set1 &amp; set2</span><br><span class="line">print(var)<span class="comment"># ==&gt; &#123;'c'&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># difference() 差集</span></span><br><span class="line">set1 = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;</span><br><span class="line">set2 = &#123;<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>&#125;</span><br><span class="line">var = set1.difference(set2)</span><br><span class="line">print(var)<span class="comment"># ==&gt; &#123;'a', 'b'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简写</span></span><br><span class="line">var = set1 - set2</span><br><span class="line">print(var)<span class="comment"># ==&gt; &#123;'a', 'b'&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># union() 并集</span></span><br><span class="line">set1 = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;</span><br><span class="line">set2 = &#123;<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>&#125;</span><br><span class="line">var = set1.union(set2)</span><br><span class="line">print(var)<span class="comment"># ==&gt; &#123;'a', 'd', 'e', 'c', 'b'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简写</span></span><br><span class="line">var = set1 | set2</span><br><span class="line">print(var)<span class="comment"># ==&gt; &#123;'a', 'd', 'e', 'c', 'b'&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># symmetric_difference() 对称差集</span></span><br><span class="line">set1 = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;</span><br><span class="line">set2 = &#123;<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>&#125;</span><br><span class="line">var = set1.symmetric_difference(set2)</span><br><span class="line">print(var)<span class="comment"># ==&gt; &#123;'d', 'b', 'a', 'e'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简写</span></span><br><span class="line">var = set1 ^ set2</span><br><span class="line">print(var)<span class="comment"># ==&gt; &#123;'d', 'b', 'a', 'e'&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># issubset() 判断是否是子集</span></span><br><span class="line">set1 = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>&#125;</span><br><span class="line">set2 = &#123;<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>&#125;</span><br><span class="line"></span><br><span class="line">var = set1.issubset(set2)</span><br><span class="line">print(var)<span class="comment"># ==&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简写 &lt;</span></span><br><span class="line">var = set1 &lt; set2</span><br><span class="line">print(var)<span class="comment"># ==&gt; False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># issuperset() 判断是否是父集</span></span><br><span class="line">set1 = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>&#125;</span><br><span class="line">set2 = &#123;<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>&#125;</span><br><span class="line"></span><br><span class="line">var = set1.issuperset(set2)</span><br><span class="line">print(var)<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简写 &lt;</span></span><br><span class="line">var = set1 &gt; set2</span><br><span class="line">print(var)<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># isdisjoint() 判断两个集合之间是否 不相交(相交 为 False,不相交 为 True)</span></span><br><span class="line">set1 = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>&#125;</span><br><span class="line">set2 = &#123;<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>&#125;</span><br><span class="line"></span><br><span class="line">var = set1.isdisjoint(set2)</span><br><span class="line">print(var)<span class="comment"># ==&gt; False</span></span><br><span class="line"></span><br><span class="line">set1 = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'f'</span>&#125;</span><br><span class="line">set2 = &#123;<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>&#125;</span><br><span class="line"></span><br><span class="line">var = set1.isdisjoint(set2)</span><br><span class="line">print(var)<span class="comment"># ==&gt; True</span></span><br></pre></td></tr></table></figure><h2 id="集合相关函数"><a href="#集合相关函数" class="headerlink" title="集合相关函数"></a>集合相关函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加元素</span></span><br><span class="line"><span class="comment"># add() 在集合中添加一个元素</span></span><br><span class="line">setvar = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>&#125;</span><br><span class="line">setvar.add(<span class="string">'z'</span>)</span><br><span class="line">print(setvar)<span class="comment"># ==&gt; &#123;'z', 'b', 'a'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># update() 迭代增加，一次可增加多个元素，要求数据类型为 Iterable 可迭代性数据(即容器类型数据,range对象,迭代器)</span></span><br><span class="line">setvar.update([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">print(setvar)<span class="comment"># ==&gt; &#123;1, 2, 'z', 'a', 'b'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除元素</span></span><br><span class="line"><span class="comment"># pop() 随机删除集合中的一个元素</span></span><br><span class="line">var = setvar.pop()</span><br><span class="line">print(var,setvar)<span class="comment"># ==&gt; 1 &#123;2, 'a', 'b', 'z'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># remove() 删除集合中指定的值对应的元素，若该元素不存在则会报错</span></span><br><span class="line"><span class="comment">#setvar.remove('bb')</span></span><br><span class="line"><span class="comment">#print(setvar)# ==&gt; Error</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># clear() 清空集合</span></span><br><span class="line">setvar.clear()</span><br><span class="line">print(setvar)<span class="comment"># ==&gt; set()</span></span><br></pre></td></tr></table></figure><h2 id="冰冻集合-frozenset"><a href="#冰冻集合-frozenset" class="headerlink" title="冰冻集合 frozenset"></a>冰冻集合 frozenset</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozenset 可强转容器类型数据变成冰冻集合</span></span><br><span class="line"><span class="comment"># 冰冻集合一旦创建,不能在进行任何修改,只能做交叉并补操作</span></span><br><span class="line">set1 = frozenset([<span class="string">'a'</span>,<span class="string">'b'</span>])</span><br><span class="line">print(set1,type(set1))<span class="comment"># ==&gt; frozenset(&#123;'b', 'a'&#125;) &lt;class 'frozenset'&gt;</span></span><br><span class="line"></span><br><span class="line">set2 = frozenset([<span class="string">'a'</span>,<span class="string">'c'</span>])</span><br><span class="line">print(set2,type(set2))<span class="comment"># ==&gt; frozenset(&#123;'a', 'c'&#125;) &lt;class 'frozenset'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 交集</span></span><br><span class="line">var = set1 &amp; set2</span><br><span class="line">print(var)<span class="comment"># ==&gt; frozenset(&#123;'a'&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 并集</span></span><br><span class="line">var = set1 | set2</span><br><span class="line">print(var)<span class="comment"># ==&gt; frozenset(&#123;'c', 'a', 'b'&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加元素</span></span><br><span class="line"><span class="comment"># var = set1.add(1)# Error</span></span><br></pre></td></tr></table></figure><h2 id="文件相关操作"><a href="#文件相关操作" class="headerlink" title="文件相关操作"></a>文件相关操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件操作相关</span></span><br><span class="line"><span class="comment"># fp = open(文件名,模式，字符编码)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件的写入操作</span></span><br><span class="line"><span class="comment"># 1.打开文件(如果文件不存在，则会创建)</span></span><br><span class="line">fp = open(<span class="string">'test1.txt'</span>,mode=<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">print(fp)</span><br><span class="line"><span class="comment"># 2.写入内容</span></span><br><span class="line">fp.write(<span class="string">'no bb'</span>)</span><br><span class="line"><span class="comment"># 3.关闭文件</span></span><br><span class="line">fp.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件的读取操作</span></span><br><span class="line"><span class="comment"># 1.打开文件</span></span><br><span class="line">fp = open(<span class="string">'test1.txt'</span>,mode=<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">print(fp)</span><br><span class="line"><span class="comment"># 2.读取文件</span></span><br><span class="line">res = fp.read()</span><br><span class="line">print(res)<span class="comment"># ==&gt; no bb</span></span><br><span class="line"><span class="comment"># 3.关闭文件</span></span><br><span class="line">fp.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入和读取字节流数据(无需指定 encoding)</span></span><br><span class="line"><span class="comment"># encode() 编码 将字符串转化为字节流(Bytes 流) </span></span><br><span class="line"><span class="comment"># decode()解码 将字节流转化为字符串</span></span><br><span class="line"></span><br><span class="line">strvar = <span class="string">'hello'</span>.encode(<span class="string">'utf-8'</span>)<span class="comment"># 编码 将字符串转化为字节流(Bytes 流) </span></span><br><span class="line">print(strvar,type(strvar))<span class="comment"># ==&gt; b'hello' &lt;class 'bytes'&gt;</span></span><br><span class="line"></span><br><span class="line">res = strvar.decode(<span class="string">'utf-8'</span>)<span class="comment"># 解码 将字节流转化为字符串</span></span><br><span class="line">print(res,type(res))<span class="comment"># ==&gt; hello &lt;class 'str'&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">strvar = <span class="string">'你好'</span>.encode(<span class="string">'utf-8'</span>)<span class="comment"># 编码 将字符串转化为字节流(Bytes 流) </span></span><br><span class="line">print(strvar,type(strvar))<span class="comment"># ==&gt; b'\xe4\xbd\xa0\xe5\xa5\xbd' &lt;class 'bytes'&gt;</span></span><br><span class="line"></span><br><span class="line">res = strvar.decode(<span class="string">'utf-8'</span>)<span class="comment"># 解码 将字节流转化为字符串</span></span><br><span class="line">print(res,type(res))<span class="comment"># ==&gt; 你好 &lt;class 'str'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入二进制字节流</span></span><br><span class="line">strvar = <span class="string">'你好'</span>.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">print(strvar)<span class="comment"># ==&gt; b'\xe4\xbd\xa0\xe5\xa5\xbd'</span></span><br><span class="line">aa = open(<span class="string">'test2.txt'</span>,mode=<span class="string">'wb'</span>)</span><br><span class="line">aa.write(strvar)</span><br><span class="line">aa.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取二进制字节流</span></span><br><span class="line">aa = open(<span class="string">'test2.txt'</span>,mode=<span class="string">'rb'</span>)</span><br><span class="line">strvar = aa.read()</span><br><span class="line">aa.close()</span><br><span class="line">res = strvar.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">print(res)<span class="comment"># ==&gt; 你好</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制文件</span></span><br><span class="line"><span class="comment"># 音频 视频 图片 等文件里面的内容都为 二进制字节流</span></span><br><span class="line"><span class="comment"># 读取图片当中所有内容(二进制字节流)</span></span><br><span class="line">fp = open(<span class="string">'cat.jpg'</span>,mode=<span class="string">'rb'</span>)</span><br><span class="line">bytes_date = fp.read()</span><br><span class="line">fp.close()</span><br><span class="line">print(bytes_date)</span><br><span class="line">print(type(bytes_date))<span class="comment"># ==&gt; &lt;class 'bytes'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字节流写入到新的文件中</span></span><br><span class="line">fp = open(<span class="string">'cat_bak.png'</span>,mode=<span class="string">'wb'</span>)</span><br><span class="line">fp.write(bytes_date)</span><br><span class="line">fp.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件操作</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">在 utf-8 编码格式下，默认一个中文字符占用 3 个字节，一个英文或符号占用 1 个字节</span></span><br><span class="line"><span class="string">read()功能：读取字符的个数 ()里面的参数代表字符个数</span></span><br><span class="line"><span class="string">seek()功能：调整指针的位置()里面的参数代表字节个数</span></span><br><span class="line"><span class="string">seek(0)将光标移动到文件开头 </span></span><br><span class="line"><span class="string">seek(0,2) 将光标移动到文件末尾</span></span><br><span class="line"><span class="string">tell() 功能：当前光标前面所有的字节数 (）里面的参数代表返回字节数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># read </span></span><br><span class="line">fp = open(<span class="string">'test.txt'</span>,mode=<span class="string">'w+'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">fp.write(<span class="string">'iloveu'</span>)</span><br><span class="line">fp.seek(<span class="number">0</span>)</span><br><span class="line">res = fp.read(<span class="number">3</span>)<span class="comment"># ==&gt; 仅读取所在光标以后的 3 个字符</span></span><br><span class="line">print(res)<span class="comment"># ==&gt; ilo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># seek</span></span><br><span class="line">fp.seek(<span class="number">5</span>)</span><br><span class="line">res = fp.read()</span><br><span class="line">print(res)<span class="comment"># ==&gt; u</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tell </span></span><br><span class="line">res = fp.tell()</span><br><span class="line">print(res)<span class="comment"># ==&gt; 6</span></span><br><span class="line">fp.seek(<span class="number">2</span>)</span><br><span class="line">res = fp.tell()</span><br><span class="line">print(res)<span class="comment"># ==&gt; 2</span></span><br><span class="line">fp.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># r+ 先读后写</span></span><br><span class="line"><span class="comment"># 需先创建 test3.txt 文件</span></span><br><span class="line">fp = open(<span class="string">'test3.txt'</span>,mode=<span class="string">'r+'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment"># 读取</span></span><br><span class="line">res = fp.read()</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment"># 写入</span></span><br><span class="line">res = fp.write(<span class="string">'Beautiful'</span>)</span><br><span class="line">print(res)<span class="comment"># ==&gt; 9 这里记录的只是字符数量</span></span><br><span class="line">fp.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># r+ 先写后读</span></span><br><span class="line"><span class="comment"># read 默认从当前光标处向右进行读取</span></span><br><span class="line">fp = open(<span class="string">'test3.txt'</span>,mode=<span class="string">'r+'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment"># 写入</span></span><br><span class="line">fp.write(<span class="string">'Nice'</span>)<span class="comment"># ==&gt; 此时的文件内容 ==&gt; Nicetiful</span></span><br><span class="line">fp.seek(<span class="number">0</span>,<span class="number">2</span>)<span class="comment"># ==&gt; 将光标移动到文件末尾</span></span><br><span class="line">fp.write(<span class="string">'Good'</span>)<span class="comment"># ==&gt; 此时的文件内容 ==&gt; NicetifulGood</span></span><br><span class="line"><span class="comment"># 读取</span></span><br><span class="line">fp.seek(<span class="number">0</span>)<span class="comment"># ==&gt; 将光标移动到文件开头 </span></span><br><span class="line">res = fp.read()</span><br><span class="line">print(res)<span class="comment"># ==&gt; NicetifulGood</span></span><br><span class="line">fp.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># w+ 可读可写 </span></span><br><span class="line"><span class="comment"># w 写入会清空原有内容</span></span><br><span class="line">fp = open(<span class="string">'test4.txt'</span>,mode=<span class="string">'w+'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment"># 写入</span></span><br><span class="line">fp.write(<span class="string">'porcelain'</span>)</span><br><span class="line"><span class="comment"># 读取</span></span><br><span class="line">fp.seek(<span class="number">0</span>)</span><br><span class="line">res = fp.read()</span><br><span class="line">print(res)<span class="comment"># ==&gt; porcelain</span></span><br><span class="line">fp.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># a+ 追加写入,可读写</span></span><br><span class="line"><span class="comment"># 写入内容时,会强制先把光标移动到最后</span></span><br><span class="line">fp = open(<span class="string">'test5.txt'</span>,mode=<span class="string">'a+'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment"># 写入</span></span><br><span class="line">fp.write(<span class="string">'great'</span>)</span><br><span class="line"><span class="comment"># 读取</span></span><br><span class="line">fp.seek(<span class="number">0</span>)</span><br><span class="line">res = fp.read()</span><br><span class="line">print(res)<span class="comment"># ==&gt; great</span></span><br><span class="line">fp.seek(<span class="number">3</span>)</span><br><span class="line">fp.write(<span class="string">'hi'</span>)<span class="comment"># ==&gt; 将光标移动当 第 3 个字符之后，尝试写入</span></span><br><span class="line">fp.seek(<span class="number">0</span>)</span><br><span class="line">res = fp.read()</span><br><span class="line">print(res)<span class="comment"># ==&gt; greathi</span></span><br><span class="line">fp.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关于中文字符混合的情况</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">由于在 utf-8 编码中一个中文占用 3 个字节</span></span><br><span class="line"><span class="string">seek 移动的单位是字节个数而不是字符</span></span><br><span class="line"><span class="string">当移动到中文字符的字节中间的时候就会产生报错 </span></span><br><span class="line"><span class="string">fp = open('test6.txt',mode='a+',encoding='utf-8')</span></span><br><span class="line"><span class="string">fp.write('美好的beautiful')</span></span><br><span class="line"><span class="string">fp.seek(5)</span></span><br><span class="line"><span class="string">res = fp.read(3)</span></span><br><span class="line"><span class="string">print(res)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ### with 语法 (可以省略掉 close 操作)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">语法： with open() as fp:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">code ……</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#  读取图片当中所有内容(二进制字节流)</span></span><br><span class="line"><span class="string">fp = open('cat.jpg',mode='rb')</span></span><br><span class="line"><span class="string">bytes_date = fp.read()</span></span><br><span class="line"><span class="string">fp.close()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 将字节流写入到新的文件中</span></span><br><span class="line"><span class="string">fp = open('cat_bak.png',mode='wb')</span></span><br><span class="line"><span class="string">fp.write(bytes_date)</span></span><br><span class="line"><span class="string">fp.close()</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 如果使用 with 语法可修改为</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'cat.jpg'</span>,mode=<span class="string">'rb'</span>) <span class="keyword">as</span> fp1,open(<span class="string">'cat_bak1.png'</span>,mode=<span class="string">'wb'</span>) <span class="keyword">as</span> fp2:</span><br><span class="line">bytes_date = fp1.read()</span><br><span class="line">fp2.write(bytes_date)</span><br></pre></td></tr></table></figure><h2 id="文件相关函数"><a href="#文件相关函数" class="headerlink" title="文件相关函数"></a>文件相关函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flush 刷新缓冲区</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1.当文件关闭的时候自动刷新缓冲区</span></span><br><span class="line"><span class="string">2.当整个程序运行结束的时候自动刷新缓冲区</span></span><br><span class="line"><span class="string">3.当缓冲区写满了 会自动刷新缓冲区</span></span><br><span class="line"><span class="string">4.手动刷新缓冲区</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">fp = open(<span class="string">"test6.txt"</span>,mode=<span class="string">"a+"</span>,encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">fp.write(<span class="string">"flush"</span>)</span><br><span class="line"><span class="comment"># 使用 flush 立刻把缓冲区中的内容刷入到文件里</span></span><br><span class="line">fp.flush()</span><br><span class="line"><span class="comment">#while True:</span></span><br><span class="line"><span class="comment">#pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断文件是否具有可读可写的属性</span></span><br><span class="line"><span class="comment"># readable()    功能: 判断文件对象是否可读</span></span><br><span class="line"><span class="comment"># writable()    功能: 判断文件对象是否可写</span></span><br><span class="line">fp = open(<span class="string">"test6.txt"</span>,mode=<span class="string">"r"</span>,encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">res = fp.readable()</span><br><span class="line">print(res)<span class="comment"># ==&gt; True</span></span><br><span class="line">res = fp.writable()</span><br><span class="line">print(res)<span class="comment"># ==&gt; Flase</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># readline() 从文件读取整行，包括 "\n" 字符</span></span><br><span class="line"><span class="comment"># 如果指定了一个非负数的参数，则返回指定字符个数的内容，包括 "\n" 字符</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test7.txt'</span>,mode=<span class="string">'w+'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">fp.write(<span class="string">'hello\nalan'</span>)</span><br><span class="line">fp.seek(<span class="number">0</span>)</span><br><span class="line">res = fp.readline(<span class="number">3</span>)</span><br><span class="line">print(res)<span class="comment"># ==&gt; hel</span></span><br><span class="line">fp.seek(<span class="number">0</span>)</span><br><span class="line">res = fp.readline()</span><br><span class="line">print(res)<span class="comment"># ==&gt; hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印文件内的所有内容</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test7.txt'</span>,mode=<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">res = fp.readline()</span><br><span class="line"><span class="keyword">while</span> res:</span><br><span class="line">print(res)</span><br><span class="line">res = fp.readline()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># readlines() 文件中的内容以行为单位读取到列表当中(一行为一个元素)</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test7.txt'</span>,mode=<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">lst = fp.readlines()</span><br><span class="line">print(lst)<span class="comment"># ==&gt; ['hello\n', 'alan']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入元素</span></span><br><span class="line">lst.insert(<span class="number">1</span>,<span class="string">'yui'</span>)</span><br><span class="line">print(lst)<span class="comment"># ==&gt; ['hello\n', 'yui', 'alan']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去掉空白字符</span></span><br><span class="line">lst1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">strvar = i.strip()</span><br><span class="line">lst1.append(strvar)</span><br><span class="line">print(lst1)<span class="comment"># ==&gt; ['hello', 'yui', 'alan']</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># writelines() 向文件中写入一个序列的字符串</span></span><br><span class="line"><span class="comment"># 参数要求： 1.容器类型等可迭代性数据 2.内容为字符串</span></span><br><span class="line">lst =  [<span class="string">'窗前明月光\n'</span>, <span class="string">'疑是地上霜\n'</span>]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test7.txt'</span>,mode=<span class="string">'w+'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">fp.writelines(lst)</span><br><span class="line">strvar = [<span class="string">'举头望明月\n'</span>, <span class="string">'低头思故乡\n'</span>]</span><br><span class="line">fp.writelines(strvar)</span><br><span class="line">fp.seek(<span class="number">0</span>)</span><br><span class="line">var = fp.read()</span><br><span class="line">print(var)</span><br><span class="line"></span><br><span class="line"><span class="comment"># truncate() 将要截取的字符串提取出来,然后清空内容将提取的字符串重新写入文件中 (字节)</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test7.txt'</span>,mode=<span class="string">'r+'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">fp.truncate(<span class="number">9</span>)<span class="comment"># ==&gt; 文件内容为 ==&gt; 窗前明</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># read readline 字符个数</span></span><br><span class="line"><span class="comment"># seek truncate 字节个数</span></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">定义函数</span></span><br><span class="line"><span class="string">def 函数名():</span></span><br><span class="line"><span class="string">code1 ...</span></span><br><span class="line"><span class="string">code2 ...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">调用函数</span></span><br><span class="line"><span class="string">函数名()</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiplication_table</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line">print(<span class="string">'%d × %d = %-2d  '</span> % (i,j,i*j),end=<span class="string">''</span>)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用一个函数</span></span><br><span class="line">multiplication_table()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数的参数</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">参数:</span></span><br><span class="line"><span class="string">1.形参:形式参数,在函数的定义处</span></span><br><span class="line"><span class="string">2.实参:实际参数,在函数的调用处</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">形参的种类:</span></span><br><span class="line"><span class="string">1.普通(位置)形参 2.默认形参 3.普通收集形参 4.关键字收集形参 5.命名关键字形参</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">实参的种类:</span></span><br><span class="line"><span class="string">1.普通实参 2.关键字实参</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">形参和实参必须一一对应 否则会报错</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通形参</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数的定义处</span></span><br><span class="line"><span class="comment"># row ,column 普通形参</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(row,column)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,column+<span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,row+<span class="number">1</span>):</span><br><span class="line">print(<span class="string">'☆'</span>,end=<span class="string">''</span>)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数的调用处</span></span><br><span class="line"><span class="comment"># 6,3 普通实参</span></span><br><span class="line">function(<span class="number">6</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认形参</span></span><br><span class="line"><span class="comment"># 函数的定义处</span></span><br><span class="line"><span class="comment"># row=9 ,column=9 在定义处有默认值,叫做默认形参</span></span><br><span class="line"><span class="comment"># 若没有给与实际参数,则使用默认参数自带的值,若给与了,则使用实际参数值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(row=<span class="number">6</span>,column=<span class="number">2</span>)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,column+<span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,row+<span class="number">1</span>):</span><br><span class="line">print(<span class="string">'☆'</span>,end=<span class="string">''</span>)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数的调用处</span></span><br><span class="line">function(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">function()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通形参 + 默认形参</span></span><br><span class="line"><span class="comment"># 语法要求：必须将 普通形参 放在 默认形参 的前面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(row,column=<span class="number">3</span>)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,column+<span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,row+<span class="number">1</span>):</span><br><span class="line">print(<span class="string">'☆'</span>,end=<span class="string">''</span>)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数的调用处</span></span><br><span class="line">function(<span class="number">1</span>)</span><br><span class="line">function(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键字实参</span></span><br><span class="line"><span class="comment"># 1.若使用关键字实参进行赋值调用,关键字实参的顺序可以任意颠倒</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(row,column=<span class="number">5</span>)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,column+<span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,row+<span class="number">1</span>):</span><br><span class="line">print(<span class="string">'☆'</span>,end=<span class="string">''</span>)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数的调用处</span></span><br><span class="line">function(column=<span class="number">2</span>,row=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.使用 普通形参,调用时使用 关键字实参</span></span><br><span class="line"><span class="comment"># 那么该参数身后所有的形参都必须使用关键字实参,进行调用</span></span><br><span class="line"><span class="comment"># 函数的定义处</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(row,a,b,column=<span class="number">5</span>)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,column+<span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,row+<span class="number">1</span>):</span><br><span class="line">print(<span class="string">'☆'</span>,end=<span class="string">''</span>)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数的调用处</span></span><br><span class="line"><span class="comment"># 关键字实参必须跟在普通实参的后面</span></span><br><span class="line"><span class="comment"># function(1,a=1,2,2) # ==&gt; Error</span></span><br><span class="line">function(<span class="number">1</span>,b=<span class="number">2</span>,a=<span class="number">5</span>,column=<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通收集形参</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">语法： def fuction(*args):</span></span><br><span class="line"><span class="string">作用： 收集多余的普通实参，收集后生成一个元组</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 函数的定义处</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(a,b,*args)</span>:</span></span><br><span class="line">print(a,b)<span class="comment"># ==&gt; 1 2</span></span><br><span class="line">print(args)<span class="comment"># ==&gt; (3, 4, 5, 6)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数的调用处</span></span><br><span class="line">function(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算所有参数的累加和</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(*args)</span>:</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">sum += i</span><br><span class="line"></span><br><span class="line">print(sum)<span class="comment"># ==&gt; 55</span></span><br><span class="line">function(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键字收集形参</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">语法： def fuction(**kwargs):</span></span><br><span class="line"><span class="string">作用： 收集多余的关键字实参，收集后生成一个字典</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(a,b,**kwargs)</span>:</span></span><br><span class="line">print(a,b)<span class="comment"># ==&gt; 1 2</span></span><br><span class="line">print(kwargs)<span class="comment"># ==&gt; &#123;'c': 3, 'd': 4, 'e': 5&#125;</span></span><br><span class="line"></span><br><span class="line">function(a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>,d=<span class="number">4</span>,e=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将所有参数拼接生成字符串</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">strvar1 = <span class="string">""</span></span><br><span class="line">strvar2 = <span class="string">""</span></span><br><span class="line">dicvar = &#123;<span class="string">"P"</span>:<span class="string">"Python"</span>,<span class="string">"C"</span>:<span class="string">"C++"</span>&#125;</span><br><span class="line">print(kwargs)<span class="comment"># ==&gt; &#123;'P': 'ppp', 'C': 'ccc', 'extra1': 'pig', 'extra2': 'dog'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> kwargs.items():<span class="comment"># 将上面的字典的键值对凑成一个个元组,然后将键赋值给 k，键值赋值给 v</span></span><br><span class="line">print(k,v)</span><br><span class="line"><span class="comment"># 如果当前键在dic当中,在进行下一步的处理;</span></span><br><span class="line"><span class="keyword">if</span> k <span class="keyword">in</span> dicvar:</span><br><span class="line">strvar1 += dicvar[k] + <span class="string">":"</span> + kwargs[k] + <span class="string">"\n"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">strvar2 += v + <span class="string">" "</span></span><br><span class="line"></span><br><span class="line">print(strvar1)</span><br><span class="line">print(<span class="string">"extra:"</span>,strvar2)<span class="comment"># ==&gt; extra: pig dog</span></span><br><span class="line"></span><br><span class="line">function(P=<span class="string">"Alan"</span>,C=<span class="string">"Tom"</span>,extra1=<span class="string">"pig"</span>,extra2=<span class="string">"dog"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 命名关键字形参</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">定义方法:</span></span><br><span class="line"><span class="string">(1) def function(a,b,*,c,d)  在 * 后面定义的参数叫做 命名关键字形参</span></span><br><span class="line"><span class="string">(2) def function(*args,e,**kwargs)  在 普通收集形参 和 关键字收集形参 之间的参数叫做 命名关键字形参</span></span><br><span class="line"><span class="string">命名关键字形参在调用时,必须使用关键字实参调用</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义方式一</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(a,b,*,c,d)</span>:</span></span><br><span class="line">print(a,b)<span class="comment"># ==&gt; 1 2</span></span><br><span class="line">print(c,d)<span class="comment"># ==&gt; 3 5</span></span><br><span class="line"></span><br><span class="line">function(<span class="number">1</span>,<span class="number">2</span>,d=<span class="number">5</span>,c=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义方式二</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(*args,e,f,**kwargs)</span>:</span></span><br><span class="line">print(args) <span class="comment"># ==&gt; (1, 2, 3, 4, 5, 6)</span></span><br><span class="line">print(kwargs) <span class="comment"># ==&gt; &#123;'a': 1, 'b': 2, 'c': 3&#125;</span></span><br><span class="line">print(e) <span class="comment"># ==&gt; 11</span></span><br><span class="line">print(f) <span class="comment"># ==&gt; 10</span></span><br><span class="line">function(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>,f=<span class="number">10</span>,e=<span class="number">11</span>) <span class="comment"># 关键字实参必须跟在普通实参的后面</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义方式三</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(a,b,*,c=<span class="number">10</span>)</span>:</span></span><br><span class="line"><span class="comment"># def function(a,b,c=10):</span></span><br><span class="line">print(a,b)</span><br><span class="line">print(c)</span><br><span class="line">function(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">function(<span class="number">1</span>,<span class="number">2</span>,c=<span class="number">11</span>) <span class="comment"># 在 * 后面定义的参数叫做 命名关键字形参 </span></span><br><span class="line"><span class="comment"># function(1,2,11)   # Error 命名关键字形参在调用时,必须使用关键字实参调用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># * 和 ** 的用法</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">* , ** 在函数的定义处,用来打包收集参数</span></span><br><span class="line"><span class="string">* , ** 在函数的调用处,用来解包参数值</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 函数的定义处 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(a,b,*,c,d)</span>:</span></span><br><span class="line">print(a,b)<span class="comment"># ==&gt; 1 2</span></span><br><span class="line">print(c,d)<span class="comment"># ==&gt; 5 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数的调用处 1</span></span><br><span class="line">lst = (<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># *lst 把列表或者元组中的每一个元素,都单独拿出来,传参到 function 函数中</span></span><br><span class="line">function(*lst,c=<span class="number">5</span>,d=<span class="number">6</span>) <span class="comment"># ==&gt; function(1,2,c=5,d=6)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数的定义处 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(a,b,*,c,d)</span>:</span></span><br><span class="line">print(a,b)<span class="comment"># ==&gt; 1 2</span></span><br><span class="line">print(c,d)<span class="comment"># ==&gt; 5 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数的调用处 2</span></span><br><span class="line">dic = &#123;<span class="string">"c"</span>:<span class="number">5</span>,<span class="string">"d"</span>:<span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># **dic 将字典中的每一个元素,都单独拿出来,形成关键字实参的形式传参到 function 函数中</span></span><br><span class="line">function(<span class="number">1</span>,<span class="number">2</span>,**dic) <span class="comment"># ==&gt; function(1,2,c=5,d=6)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 综合</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(a,b,*,c,d,e)</span>:</span></span><br><span class="line">print(a,b)<span class="comment"># ==&gt; 1 2</span></span><br><span class="line">print(c,d,e)<span class="comment"># ==&gt; 5 6 7</span></span><br><span class="line">lst = (<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">dic = &#123;<span class="string">"c"</span>:<span class="number">5</span>,<span class="string">"d"</span>:<span class="number">6</span>,<span class="string">'e'</span>:<span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过这样的一种方式,间接对函数的参数的长度,进行了控制 ?</span></span><br><span class="line">function(*lst,**dic) <span class="comment"># ==&gt; function(1,2,c=5,d=6,e=7)</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">参数的顺序: </span></span><br><span class="line"><span class="string">普通参数 -&gt; 默认参数 -&gt; 普通收集参数 -&gt; 命名关键字参数 -&gt;关键字收集参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def function(*args,**kwargs): 这种定义参数的形式,可以接收到所有参数值</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(a, b, c=<span class="number">0</span>, *args, **kw)</span>:</span></span><br><span class="line">    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'args ='</span>, args, <span class="string">'kw ='</span>, kw)</span><br><span class="line"></span><br><span class="line"><span class="comment"># f1(1, 2) # ==&gt; a=1,b=2,c=0,args=(),kw=&#123;&#125;</span></span><br><span class="line"><span class="comment"># f1(1, 2, c=3) # ==&gt; a=1,b=2,c=3,args=() kw=&#123;&#125;</span></span><br><span class="line"><span class="comment"># f1(1, 2, 3, 'a', 'b') # ==&gt; a=1,b=2,c=3,args=("a","b") kw=&#123;&#125;</span></span><br><span class="line">f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, x=<span class="number">99</span>) <span class="comment"># ==&gt; a=1,b=2,c=3,args=&#123;"a","b"&#125; kw=&#123;x:99&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(a, b, c=<span class="number">0</span>, *, d, **kw)</span>:</span></span><br><span class="line">    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'d ='</span>, d, <span class="string">'kw ='</span>, kw)</span><br><span class="line"></span><br><span class="line">f2(<span class="number">1</span>, <span class="number">2</span>, d=<span class="number">99</span>, ext=<span class="literal">None</span>) <span class="comment"># ==&gt; a=1,b=2,c=0,d=99 kw=&#123;ext:none&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(a, b, c=<span class="number">0</span>, *args, **kw)</span>:</span></span><br><span class="line">    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'args ='</span>, args, <span class="string">'kw ='</span>, kw)</span><br><span class="line"></span><br><span class="line">args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">kw = &#123;<span class="string">'d'</span>: <span class="number">99</span>, <span class="string">'x'</span>: <span class="string">'#'</span>&#125;</span><br><span class="line">f1(*args, **kw) <span class="comment"># ==&gt; a=1,b=2,c=3,args=(4,),kw=&#123;"x":#,"d":99&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(a, b, c=<span class="number">0</span>, *, d, **kw)</span>:</span></span><br><span class="line">    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'d ='</span>, d, <span class="string">'kw ='</span>, kw)</span><br><span class="line"></span><br><span class="line">myargs = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">mykw = &#123;<span class="string">'d'</span>: <span class="number">88</span>, <span class="string">'x'</span>: <span class="string">'#'</span>&#125;</span><br><span class="line">f2(*myargs, **mykw) <span class="comment"># ==&gt; a=1,b=2,c=3,d=88,kw=&#123;"x":#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(a, b, c=<span class="number">0</span>, *args,d,**kw)</span>:</span></span><br><span class="line">    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'args ='</span>, args, <span class="string">'kw ='</span>, kw)</span><br><span class="line">    print(d)</span><br><span class="line"></span><br><span class="line">f1(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>,d=<span class="number">67</span>, x=<span class="number">99</span>,y=<span class="number">77</span>) <span class="comment"># ==&gt; a=1,b=2,c=3,args=(a,b) d=67 kw=&#123;x:99,y:77&#125;</span></span><br></pre></td></tr></table></figure><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数的返回值 return</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">return 返回值 把后面的返回值返回到函数的调用处</span></span><br><span class="line"><span class="string">如果一个函数没有自定义任何返回值,默认返回 None</span></span><br><span class="line"><span class="string">(1) return + 六大标准数据类型 ,除此之外,还可以返回函数,类,对象</span></span><br><span class="line"><span class="string">(2) 一旦执行了 return,意味着函数立刻终止,后面的代码不再执行</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># (1) return + 六大标准数据类型 ,除此之外,还可以返回函数,类,对象</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span></span><br><span class="line"><span class="comment"># return 100</span></span><br><span class="line"><span class="comment"># return 9.13</span></span><br><span class="line"><span class="comment"># return [1,2,3]</span></span><br><span class="line"><span class="comment"># return "abc"</span></span><br><span class="line"><span class="keyword">return</span> (<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>)</span><br><span class="line">res = function()<span class="comment"># ==&gt; ('a', 'b', 'c', 'd')</span></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># (2) 一旦执行了 return,意味着函数立刻终止,后面的代码不再执行</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">'a'</span></span><br><span class="line">print(<span class="number">2</span>)</span><br><span class="line">res = function()</span><br><span class="line">print(res)<span class="comment"># ==&gt; 1# ==&gt; a</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">print(i)</span><br><span class="line">res = function()</span><br><span class="line">print(res)<span class="comment"># ==&gt; 0 # ==&gt; 1 # ==&gt; 0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 return 做计算器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculator</span><span class="params">(num1,sign,num2)</span>:</span></span><br><span class="line"><span class="keyword">if</span> sign == <span class="string">'+'</span>:</span><br><span class="line">res = num1 + num2</span><br><span class="line"><span class="keyword">elif</span> sign == <span class="string">'-'</span>:</span><br><span class="line">res = num1 - num2</span><br><span class="line"><span class="keyword">elif</span> sign == <span class="string">'*'</span>:</span><br><span class="line">res = num1 * num2</span><br><span class="line"><span class="keyword">elif</span> sign == <span class="string">'/'</span>:</span><br><span class="line"><span class="keyword">if</span> num2 == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">'Error'</span></span><br><span class="line">res = num1 / num2</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">'please re-input'</span></span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">res = calculator(<span class="number">3</span>,<span class="string">'/'</span>,<span class="number">10</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  __doc__ 查看帮助文档 魔术属性</span></span><br><span class="line">res = <span class="keyword">print</span>.__doc__</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">How are you ?</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'I Have a Dream !'</span>)</span><br><span class="line"></span><br><span class="line">res = function.__doc__</span><br><span class="line">print(res)<span class="comment"># ==&gt; How are you ?</span></span><br></pre></td></tr></table></figure><h3 id="函数名的使用"><a href="#函数名的使用" class="headerlink" title="函数名的使用"></a>函数名的使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数名的使用</span></span><br><span class="line"><span class="comment"># 创建 销毁 作为参数传递 作为值返回，称为 第一类对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.函数名也是一个特殊的变量，可作为变量赋值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'I am function !'</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">a = function</span><br><span class="line">print(a,type(function))<span class="comment"># ==&gt; &lt;function function at 0x000001E261471EA0&gt; &lt;class 'function'&gt;</span></span><br><span class="line">res = a()</span><br><span class="line">print(res)<span class="comment"># ==&gt; I am function !</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.函数名可以作为容器类型数据的元素</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function1</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'function1 !'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function2</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'function2 !'</span></span><br><span class="line"></span><br><span class="line">lst = [function1,function2]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line"><span class="keyword">print</span> (i)</span><br><span class="line">res = i()</span><br><span class="line">print(res) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;function function1 at 0x0000021DF6CD6620&gt;</span></span><br><span class="line"><span class="string">function1 !</span></span><br><span class="line"><span class="string">&lt;function function2 at 0x0000021DF6CD6268&gt;</span></span><br><span class="line"><span class="string">function2 !</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.函数名可以作为函数的参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(funname)</span>:</span></span><br><span class="line">res = funname()</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">function(function2)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'----------------------------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.函数名作为函数的返回值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(funname)</span>:</span></span><br><span class="line"><span class="keyword">return</span> funname</span><br><span class="line"></span><br><span class="line">res = function(function2)</span><br><span class="line">print(res)<span class="comment"># ==&gt; &lt;function function2 at 0x000001B0B3C46268&gt;</span></span><br><span class="line">print(res())<span class="comment"># ==&gt; function2 !</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 若一个函数没有自定义任何返回值，默认返回 None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">'test'</span>)<span class="comment"># ==&gt; test</span></span><br><span class="line"></span><br><span class="line">res = function()</span><br><span class="line">print(res)<span class="comment"># ==&gt; None</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'----------------------------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义返回值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(n)</span>:</span></span><br><span class="line">print(n)</span><br><span class="line"><span class="keyword">return</span> <span class="string">'OK'</span></span><br><span class="line"></span><br><span class="line">res = function(<span class="string">'Hi'</span>)<span class="comment"># ==&gt; Hi</span></span><br><span class="line">print(res)<span class="comment"># ==&gt; OK</span></span><br></pre></td></tr></table></figure><h3 id="全局变量与局部变量"><a href="#全局变量与局部变量" class="headerlink" title="全局变量与局部变量"></a>全局变量与局部变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局变量 与 局部变量</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">局部变量:在函数内部定义的变量,作用域在函数内部</span></span><br><span class="line"><span class="string">全局变量:在函数外部定义的变量或者在函数内部用 global 关键字定义的变量,作用域横跨整个文件</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 1.局部变量的获取和修改</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span></span><br><span class="line">c = <span class="number">6</span></span><br><span class="line">print(c)<span class="comment"># ==&gt; 6</span></span><br><span class="line">c = <span class="number">7</span></span><br><span class="line">print(c)<span class="comment"># ==&gt; 7</span></span><br><span class="line"></span><br><span class="line">function()</span><br><span class="line"><span class="comment"># print(c)# Error 在函数内部定义的变量,作用域在函数内部</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.全局变量的获取和修改</span></span><br><span class="line">d = <span class="number">5</span></span><br><span class="line">print(d)<span class="comment"># ==&gt; 5</span></span><br><span class="line">d = <span class="number">3</span></span><br><span class="line">print(d)<span class="comment"># ==&gt; 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.函数内部可以获取到全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span></span><br><span class="line">print(d)</span><br><span class="line">function()<span class="comment"># ==&gt; 3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.在函数内部可以通过 global 修改全局变量</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">如果函数外部有这个变量,那么通过 global可以在函数内部进行修改</span></span><br><span class="line"><span class="string">如果函数外部没有这个变量,那么通过 global 可以在函数内部定义全局变量</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> a</span><br><span class="line">a = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">function()</span><br><span class="line">print(a)<span class="comment"># ==&gt; 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局变量和局部变量的生命周期 : 生效时间的长短</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">内置命名空间的生命周期 &gt; 全局变量的生命周期 &gt; 局部变量的生命周期</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 作用域:作用范围</span></span><br><span class="line"><span class="string">命名空间 : 划分一块区域保存所有数据,以字典的方式存储(变量与值形成映射关系)</span></span><br><span class="line"><span class="string">(1)内建命名空间:解释器启动时创建,直到解释器运行结束,生存周期最长</span></span><br><span class="line"><span class="string">(2)全局命名空间:文件运行时创建,直到解释器运行结束,生存周期较长</span></span><br><span class="line"><span class="string">(3)局部命名空间:函数调用时,里面的局部变量才创建,调用结束后即释放,生存周期较短</span></span><br><span class="line"><span class="string">命名空间的提出是为了划分和控制变量是否可见,以及生存周期的长短</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 命名空间 创建顺序:</span></span><br><span class="line"><span class="string">python 解释器启动 -&gt; 创建内建命名空间 -&gt; 创建全局命名空间 -&gt; 创建局部命名空间</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 命名空间 销毁顺序:</span></span><br><span class="line"><span class="string">函数调用结束后 -&gt; 销毁函数对应的局部命名空间数据 -&gt; 销毁全局命名空间数据 -&gt; 销毁内建命名空间数据</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="函数的嵌套"><a href="#函数的嵌套" class="headerlink" title="函数的嵌套"></a>函数的嵌套</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数的嵌套</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">互相嵌套的两层函数:</span></span><br><span class="line"><span class="string">嵌套在外层的是外函数</span></span><br><span class="line"><span class="string">嵌套在里层的时内函数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">'I am inner function ！'</span>)</span><br><span class="line"><span class="comment"># inner()# ==&gt; Error 内部函数 不可以 直接在函数外部调用</span></span><br><span class="line"><span class="comment"># outer()</span></span><br><span class="line"><span class="comment"># inner()# ==&gt; Error 调用外部函数后,内部函数 不可以 在函数外部调用</span></span><br><span class="line"></span><br><span class="line">inner()<span class="comment"># ==&gt; 内部函数可以在函数内部调用</span></span><br><span class="line">outer()</span><br><span class="line"><span class="comment"># 内部函数在函数内部调用时,需要 先定义 再调用,不能颠倒顺序</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 三层函数，调用最里层的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">innermost</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">'I am innermost function ！'</span>)</span><br><span class="line">innermost()</span><br><span class="line">inner()</span><br><span class="line">outer()<span class="comment"># ==&gt; I am innermost function ！</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">innermost</span><span class="params">()</span>:</span></span><br><span class="line">print(id)</span><br><span class="line">innermost()</span><br><span class="line">inner()</span><br><span class="line">outer()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">LEGB 原则: 就近找变量原则</span></span><br><span class="line"><span class="string">找寻变量的调用顺序采用 LEGB 原则,即就近原则</span></span><br><span class="line"><span class="string">B —— Builtin(Python) Python内置模块的命名空间(内建作用域)</span></span><br><span class="line"><span class="string">G —— Global(module) 函数外部所在的命名空间(全局作用域)</span></span><br><span class="line"><span class="string">E —— Enclosing function locals 外部嵌套函数的作用域(嵌套作用域)</span></span><br><span class="line"><span class="string">L —— Local(function) 当前函数内的作用域(局部作用域)</span></span><br><span class="line"><span class="string">依据就近原则,从下往上 从内向外 依次寻找</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nonlical 修改局部变量</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.nonlocal符合 LEGB 原则,就近找变量,用来修改当前空间上一层的局部变量</span></span><br><span class="line"><span class="string">2.如果上一层找不到了,在继续向上寻找,直到找到为止,如果都没有,则会报错</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">nonlocal</span> a</span><br><span class="line">a = <span class="number">20</span></span><br><span class="line">inner()</span><br><span class="line">print(a)</span><br><span class="line">outer()<span class="comment"># ==&gt; 20</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">66</span> <span class="comment"># 全局变量,nonlocal 无法修该变量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">innermost</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">nonlocal</span> a</span><br><span class="line">a = <span class="number">200</span></span><br><span class="line">innermost()</span><br><span class="line">print(a)<span class="comment"># ==&gt; 200</span></span><br><span class="line">inner()</span><br><span class="line">print(a)<span class="comment"># ==&gt; 200</span></span><br><span class="line">outer()</span><br><span class="line">print(a)<span class="comment"># ==&gt; 66</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过列表也能修改局部变量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">lst[<span class="number">-1</span>] += <span class="number">10</span></span><br><span class="line">inner()</span><br><span class="line">print(lst)</span><br><span class="line">outer()<span class="comment"># ==&gt; [1, 2, 13]</span></span><br></pre></td></tr></table></figure><h3 id="闭包函数"><a href="#闭包函数" class="headerlink" title="闭包函数"></a>闭包函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 闭包函数</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">内函数使用了外函数的 局部变量</span></span><br><span class="line"><span class="string">且外函数把内函数返回出来的过程叫做 闭包</span></span><br><span class="line"><span class="string">这个内函数叫做 闭包函数</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">a = <span class="number">99</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">res = outer()<span class="comment"># res = inner</span></span><br><span class="line">res()<span class="comment"># ==&gt; inner() ==&gt; 99</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 闭包的特征</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">内函数使用了外函数的局部变量</span></span><br><span class="line"><span class="string">那么该变量会和内函数发生 绑定关系 不释放</span></span><br><span class="line"><span class="string">延长该变量的生命周期</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">core = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner_1</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">nonlocal</span> core</span><br><span class="line">core += <span class="number">2</span></span><br><span class="line">print(core)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner_2</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">nonlocal</span> core</span><br><span class="line">core += <span class="number">4</span></span><br><span class="line">print(core)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner_sum</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> [inner_1,inner_2]</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> inner_sum</span><br><span class="line"></span><br><span class="line">res = outer()()</span><br><span class="line">print(res)<span class="comment"># ==&gt; [inner_1,inner_2]</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> res:</span><br><span class="line">x()<span class="comment"># ==&gt; 4 # ==&gt; 8</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'-----------------------------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(num)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(val)</span>:</span></span><br><span class="line"><span class="keyword">return</span> num + val</span><br><span class="line"><span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">function = outer(<span class="number">5</span>) <span class="comment"># ==&gt; num = 5  function = inner</span></span><br><span class="line">print(function)<span class="comment"># ==&gt; &lt;function outer.&lt;locals&gt;.inner at 0x000002B9ECD267B8&gt;</span></span><br><span class="line"></span><br><span class="line">res = function(<span class="number">10</span>)<span class="comment"># ==&gt; inner(10) val = 10  res = 5 + 10 </span></span><br><span class="line">print(res)<span class="comment"># ==&gt; 15</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 闭包的意义</span></span><br><span class="line"><span class="comment"># 闭包可以优先使用外函数中的变量,并对闭包中的值起到了封装保护的作用,外部无法访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局变量用来计数,由于作用域太大,容易被串改</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">click_num</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> num</span><br><span class="line">num += <span class="number">1</span></span><br><span class="line">print(num)</span><br><span class="line">click_num()</span><br><span class="line">num = <span class="number">100</span></span><br><span class="line">click_num()</span><br><span class="line">click_num()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'-----------------------------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用闭包函数改进</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">click_num</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">nonlocal</span> num</span><br><span class="line">num += <span class="number">1</span></span><br><span class="line">print(num)</span><br><span class="line"><span class="keyword">return</span> click_num</span><br><span class="line"></span><br><span class="line">res = function()</span><br><span class="line">res()</span><br><span class="line">num = <span class="number">1000</span></span><br><span class="line">res()</span><br><span class="line">res()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># locals 函数 会以字典类型返回当前位置的全部局部变量(若在全局空间,获取的是所有全局变量)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前作用域在 全局空间</span></span><br><span class="line">test_a = <span class="number">1</span></span><br><span class="line">test_b = <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span></span><br><span class="line">test_c = <span class="number">100</span></span><br><span class="line">dicvar = locals()</span><br><span class="line">test_d = <span class="number">3</span></span><br><span class="line">function()</span><br><span class="line">print(dicvar)</span><br><span class="line"><span class="comment"># print(dicvar['test_c'])# ==&gt; Error</span></span><br><span class="line">print(dicvar[<span class="string">'test_d'</span>])<span class="comment"># ==&gt; 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前作用域在 局部空间</span></span><br><span class="line">test_e = <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span></span><br><span class="line">test_f = <span class="number">100</span></span><br><span class="line">dicvar = locals()</span><br><span class="line">print(dicvar)<span class="comment"># ==&gt; &#123;'test_f': 100&#125;</span></span><br><span class="line"><span class="comment"># print(dicvar['test_e'])# ==&gt; Error</span></span><br><span class="line">print(dicvar[<span class="string">'test_f'</span>])<span class="comment"># ==&gt; 100</span></span><br><span class="line">function()</span><br><span class="line"></span><br><span class="line"><span class="comment"># globals 函数 会以字典类型返回当前位置的全部全局变量</span></span><br><span class="line"><span class="comment"># 当前作用域在 全局空间</span></span><br><span class="line">test_h = <span class="number">1</span></span><br><span class="line">test_i = <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span></span><br><span class="line">test_j = <span class="number">101</span></span><br><span class="line">dicvar = globals()</span><br><span class="line">test_k = <span class="number">3</span></span><br><span class="line">function()</span><br><span class="line">print(dicvar)</span><br><span class="line"><span class="comment"># print(dicvar['test_j'])# ==&gt; Error</span></span><br><span class="line">print(dicvar[<span class="string">'test_k'</span>])<span class="comment"># ==&gt; 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前作用域在 全局空间</span></span><br><span class="line">test_m = <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span></span><br><span class="line">test_n = <span class="number">100</span></span><br><span class="line">dicvar = globals()</span><br><span class="line">print(dicvar)</span><br><span class="line">print(dicvar[<span class="string">'test_m'</span>])<span class="comment"># ==&gt; 2</span></span><br><span class="line"><span class="comment"># print(dicvar['test_n'])# ==&gt; Error</span></span><br><span class="line">function()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 globals 来定义全局变量</span></span><br><span class="line"><span class="comment"># globals() 以字典的形式存放了所有的全局变量,在这个字典中,添加键值对,就等于定义了一个变量</span></span><br><span class="line">dicvar = globals()</span><br><span class="line">dicvar[<span class="string">'wow'</span>] = <span class="string">'HoH'</span></span><br><span class="line">print(wow)</span><br><span class="line">print(globals())</span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匿名函数</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">lambda 关键字表达匿名函数,函数没名字</span></span><br><span class="line"><span class="string">特点: 用一句来表达只有返回值的函数;</span></span><br><span class="line"><span class="string">优点: 简洁高效;</span></span><br><span class="line"><span class="string">语法: lambda 参数 : 返回值</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 1.无参数的 lambda 表达式</span></span><br><span class="line"><span class="comment"># 原型:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改写:</span></span><br><span class="line">function = <span class="keyword">lambda</span> : <span class="number">123</span></span><br><span class="line">print(function())<span class="comment"># ==&gt; 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.有参数的 lambda 表达式</span></span><br><span class="line"><span class="comment"># 原型:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(i)</span>:</span></span><br><span class="line"><span class="keyword">return</span> type(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改写:</span></span><br><span class="line">function = <span class="keyword">lambda</span> i : type(i)</span><br><span class="line">print(function(<span class="string">"abc"</span>))<span class="comment"># ==&gt; &lt;class 'str'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.带有判断条件的 lambda 表达式</span></span><br><span class="line"><span class="comment"># 原型:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(i)</span>:</span></span><br><span class="line"><span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"even"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"odd"</span></span><br><span class="line">res = function(<span class="number">0</span>)</span><br><span class="line">print(res)<span class="comment"># ==&gt; even</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 三目运算符 </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">语法: 真值 if 表达式 else 假值</span></span><br><span class="line"><span class="string">如果表达式为真,返回真值</span></span><br><span class="line"><span class="string">如果表达式为假,返回假值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注意: 三目运算符只能针对于双项分支进行改造</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line">res = <span class="string">'even'</span> <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="string">'odd'</span></span><br><span class="line">print(res)<span class="comment"># ==&gt; odd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改写：</span></span><br><span class="line">function = <span class="keyword">lambda</span> i : <span class="string">'even'</span> <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="string">'odd'</span></span><br><span class="line">print(function(<span class="number">100</span>))<span class="comment"># ==&gt; even</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传递两个参数,返回值较大的参数</span></span><br><span class="line">function = <span class="keyword">lambda</span> a,b : a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br><span class="line">print(function(<span class="number">511</span>,<span class="number">377</span>)) <span class="comment"># ==&gt; 511</span></span><br></pre></td></tr></table></figure><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 递归函数</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">递归函数: 自己调用自己的函数</span></span><br><span class="line"><span class="string">递: 去</span></span><br><span class="line"><span class="string">归: 回</span></span><br><span class="line"><span class="string">一去一回即递归</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(num)</span>:</span></span><br><span class="line">print(num,end=<span class="string">' '</span>)</span><br><span class="line"><span class="keyword">if</span> num &gt; <span class="number">0</span>:</span><br><span class="line">function(num<span class="number">-1</span>)</span><br><span class="line">print(num,end=<span class="string">' '</span>)</span><br><span class="line">function(<span class="number">3</span>)<span class="comment"># ==&gt; 3 2 1 0 0 1 2 3 </span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">执行过程</span></span><br><span class="line"><span class="string">num = 3 ==&gt; print(3) ==&gt; 3 &gt; 0 ==&gt; function(3-1) ==&gt; print(3) 暂停 ==&gt; 执行 function(2)</span></span><br><span class="line"><span class="string">num = 2 ==&gt; print(2) ==&gt; 2 &gt; 0 ==&gt; function(2-1) ==&gt; print(2) 暂停 ==&gt; 执行 function(1)</span></span><br><span class="line"><span class="string">num = 1 ==&gt; print(1) ==&gt; 1 &gt; 0 ==&gt; function(1-1) ==&gt; print(1) 暂停 ==&gt; 执行 function(0)</span></span><br><span class="line"><span class="string">num = 0 ==&gt; print(0) ==&gt; 0 &gt; 0 ==&gt; print(0)</span></span><br><span class="line"><span class="string">继续执行完暂停项</span></span><br><span class="line"><span class="string">print(1) ==&gt; print(2) ==&gt; print(3)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">调用函数就是在开辟空间,这个空间叫做栈帧空间</span></span><br><span class="line"><span class="string">1.递归函数是不停的开辟空间和不停的释放空间的一个过程,每一个空间都相对独立</span></span><br><span class="line"><span class="string">2.递归函数存在 回 的过程:</span></span><br><span class="line"><span class="string">(1)当最后一层栈帧空间代码全部执行结束的之后,触发回的过程</span></span><br><span class="line"><span class="string">(2)遇到 return 的时候,触底反弹,回到上一次调用的位置,往下执行</span></span><br><span class="line"><span class="string">(3)递归调用函数的层数过多,就不推荐使用,官方默认提供的层数为 1000 层,实际 996~1000;如果过多,会过度耗费内存资源,导致蓝屏死机,所以务必要给递归一个跳出的条件</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求任意一个数的阶乘</span></span><br><span class="line">print(<span class="string">'------------------------------------'</span>)</span><br><span class="line">num = <span class="number">5</span></span><br><span class="line">sum = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> num &gt; <span class="number">1</span>:</span><br><span class="line">sum *= num</span><br><span class="line"><span class="keyword">if</span> num &gt; <span class="number">1</span>:</span><br><span class="line">num -= <span class="number">1</span></span><br><span class="line">print(sum)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'------------------------------------'</span>)</span><br><span class="line"></span><br><span class="line">sum = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(num)</span>:</span></span><br><span class="line"><span class="keyword">global</span> sum</span><br><span class="line">sum *= num</span><br><span class="line"><span class="keyword">if</span> num &gt; <span class="number">1</span>:</span><br><span class="line">function(num<span class="number">-1</span>)</span><br><span class="line">function(<span class="number">6</span>)</span><br><span class="line">print(sum)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'------------------------------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">sum = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="keyword">nonlocal</span> sum</span><br><span class="line">sum *= n</span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="number">1</span>:</span><br><span class="line">inner(n<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line"><span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">res = outer()</span><br><span class="line">print(res(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'------------------------------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Error"</span></span><br><span class="line"><span class="keyword">elif</span> n &lt;= <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> n * function(n<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">res = function(<span class="number">5</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ### 迭代器</span></span><br><span class="line"><span class="comment"># 迭代器：能被 next() 函数调用并不断返回下一个值的对象称为迭代器(Iterator 迭代器是对象)</span></span><br><span class="line"><span class="comment"># 特征:迭代器会生成惰性序列,它通过计算把值依次的返回,一边循环一边计算而不是一次性得到所有数据</span></span><br><span class="line"><span class="comment"># 优点:需要数据的时候,一次取一个,可以大大节省内存空间.而不是把所有数据放进内存</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可迭代对象：再数据当中,含有 __iter__ 方法,就称为可迭代对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dir : 可以获取当前数据所有内部成员</span></span><br><span class="line">strvar = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>&#125;</span><br><span class="line">res = dir(strvar)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment"># ['__and__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__iand__', '__init__', '__init_subclass__', '__ior__', '__isub__', '__iter__', '__ixor__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__or__', '__rand__', '__reduce__', '__reduce_ex__', '__repr__', '__ror__', '__rsub__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__xor__', 'add', 'clear', 'copy', 'difference', 'difference_update', 'discard', 'intersection', 'intersection_update', 'isdisjoint', 'issubset', 'issuperset', 'pop', 'remove', 'symmetric_difference', 'symmetric_difference_update', 'union', 'update']</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 迭代器</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">为什么 for 循环能够遍历数据?</span></span><br><span class="line"><span class="string">因为 for 循环底层是先把该数据变成迭代器,转化成之后通过 next 这个方法一个一个将值取出</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">当数据当中,含有 __iter__ 和 __next__ 这两个方法,就可以称为迭代器</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(1) 如何判断迭代器 </span></span><br><span class="line"><span class="string">1. dir 获取当前数据所有内部成员 查看是否含有 __iter__ 和 __next__</span></span><br><span class="line"><span class="string">2. from collections import Iterator,Iterable</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(2) 如何变成迭代器</span></span><br><span class="line"><span class="string">1. iter  2. __iter__()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(3) 如何遍历迭代器</span></span><br><span class="line"><span class="string">1. next  2. for  3. for + next</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果当前数据是迭代器时,它一定是一个可迭代对象</span></span><br><span class="line"><span class="string">如果当前数据是可迭代对象时,它并不一定是迭代器</span></span><br><span class="line"><span class="string">可迭代对象和迭代器是包含和被包含之间的关系</span></span><br><span class="line"><span class="string">可迭代对象: 容器类型数据 , range对象, 迭代器 , fp文件对象等</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">可迭代对象 和 迭代器之间 </span></span><br><span class="line"><span class="string">实际上是把数据 从不能够被直接调用 变为 可直接被调用</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># isinstance 判断数据类型</span></span><br><span class="line"><span class="comment"># 判断的类型 : int float bool complex str list tuple set dic</span></span><br><span class="line"><span class="comment"># 用法一</span></span><br><span class="line"><span class="comment"># res = isinstance (要判断的数据,要判断的类型)</span></span><br><span class="line">res = isinstance(<span class="number">3</span>,float)</span><br><span class="line">print(res)<span class="comment"># ==&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用法二</span></span><br><span class="line"><span class="comment"># res = isinstance (要判断的数据, (写上可能的数据类型,满足一个条件,就返回 True) )</span></span><br><span class="line">res = isinstance(<span class="string">"abc"</span>, (int,float,list,str)  )</span><br><span class="line">print(res)<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断迭代器</span></span><br><span class="line">setvar = &#123;<span class="string">"a"</span>,<span class="string">"b"</span>&#125;</span><br><span class="line"></span><br><span class="line">lst = dir(setvar)</span><br><span class="line">res = <span class="string">"__iter__"</span> <span class="keyword">in</span> lst <span class="keyword">and</span> <span class="string">"__next__"</span> <span class="keyword">in</span> lst</span><br><span class="line">print(res)<span class="comment"># ==&gt; Flase</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator,Iterable</span><br><span class="line">res = isinstance(setvar,Iterator)<span class="comment"># 判断是否为 迭代器</span></span><br><span class="line">print(res)<span class="comment"># ==&gt; Flase</span></span><br><span class="line"></span><br><span class="line">res = isinstance(setvar,Iterable)<span class="comment"># 判断是否为 可迭代对象</span></span><br><span class="line">print(res)<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 变成迭代器</span></span><br><span class="line">setvar = &#123;<span class="string">"a"</span>,<span class="string">"b"</span>&#125;</span><br><span class="line">it = iter(setvar)</span><br><span class="line">print(it)<span class="comment"># ==&gt; &lt;set_iterator object at 0x000001B12718D9D8&gt;</span></span><br><span class="line"></span><br><span class="line">lst = dir(it)</span><br><span class="line">res = <span class="string">"__iter__"</span> <span class="keyword">in</span> lst <span class="keyword">and</span> <span class="string">"__next__"</span> <span class="keyword">in</span> lst</span><br><span class="line">print(res)<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator,Iterable</span><br><span class="line">res = isinstance(it,Iterator)<span class="comment"># 判断是否为 迭代器</span></span><br><span class="line">print(res)<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line">res = isinstance(it,Iterable)<span class="comment"># 判断是否为 可迭代对象</span></span><br><span class="line">print(res)<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历迭代器</span></span><br><span class="line">it = iter(range(<span class="number">1</span>,<span class="number">6</span>))<span class="comment"># 生成一个迭代器</span></span><br><span class="line">print(isinstance(it,Iterator))<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. next 在调用迭代器时,是单向不可逆,如果没有数据可调用会提示 Error StopIteration</span></span><br><span class="line">res = next(it)</span><br><span class="line">print(res)<span class="comment"># ==&gt; 1</span></span><br><span class="line">res = next(it)</span><br><span class="line">print(res)<span class="comment"># ==&gt; 2</span></span><br><span class="line">res = next(it)</span><br><span class="line">print(res)<span class="comment"># ==&gt; 3</span></span><br><span class="line">res = next(it)</span><br><span class="line">print(res)<span class="comment"># ==&gt; 4</span></span><br><span class="line">res = next(it)</span><br><span class="line"><span class="comment"># res = next(it) error</span></span><br><span class="line">print(res)<span class="comment"># ==&gt; 5</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"-----------------------------------------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. for</span></span><br><span class="line">it = iter(range(<span class="number">1</span>,<span class="number">6</span>))<span class="comment"># 重置迭代器</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it:</span><br><span class="line">print(i)<span class="comment"># ==&gt; 1 # ==&gt; 2 # ==&gt; 3 # ==&gt; 4 # ==&gt; 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. for + next 应用在控制遍历次数上</span></span><br><span class="line">it = iter(range(<span class="number">1</span>,<span class="number">6</span>))<span class="comment"># 重置迭代器</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>): <span class="comment"># 控制遍历的次数</span></span><br><span class="line">res = next(it) <span class="comment"># 调用迭代器</span></span><br><span class="line">print(res)<span class="comment"># ==&gt; 1 # ==&gt; 2 # ==&gt; 3</span></span><br></pre></td></tr></table></figure><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 高阶函数 : 能够把函数当成参数传递的就是高阶函数 (map,reduce,sorted,filter)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># map(function,Iterable)</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># function: 自定义函数 或 内置函数 </span></span><br><span class="line"><span class="comment"># Iterable: 可迭代对象(容器类型数据, range 对象, 迭代器)</span></span><br><span class="line"><span class="comment"># 功能：把 Iterable 中的值,一个一个拿出来,放到 function 函数当中进行处理,再把处理的结果放入迭代器当中,最后返回迭代器</span></span><br><span class="line"><span class="comment"># 返回值：迭代器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. ["1","2","3","4"] ==&gt; [1,2,3,4]</span></span><br><span class="line">lst = [<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>]</span><br><span class="line">lst_new = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">res = int(i)</span><br><span class="line">lst_new.append(res)</span><br><span class="line">print(lst_new)<span class="comment"># ==&gt; [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 使用 map ["1","2","3","4"] ==&gt; [1,2,3,4]</span></span><br><span class="line">lst = [<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>]</span><br><span class="line">it = map(int,lst)<span class="comment"># [1, 2, 3, 4]</span></span><br><span class="line">print(it)<span class="comment"># ==&gt; &lt;map object at 0x0000023BB4D847F0&gt;</span></span><br><span class="line">print(list(it))<span class="comment"># ==&gt; [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否为 迭代器</span></span><br><span class="line">lst = [<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>]</span><br><span class="line">it = map(int,lst)</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</span><br><span class="line">res = isinstance(it,Iterator)</span><br><span class="line">print(res)<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># next 遍历迭代器</span></span><br><span class="line">lst = [<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>]</span><br><span class="line">it = map(int,lst)</span><br><span class="line"></span><br><span class="line">res = next(it)</span><br><span class="line">print(res)<span class="comment"># ==&gt; 1</span></span><br><span class="line">res = next(it)</span><br><span class="line">print(res)<span class="comment"># ==&gt; 2</span></span><br><span class="line">res = next(it)</span><br><span class="line">print(res)<span class="comment"># ==&gt; 3</span></span><br><span class="line">res = next(it)</span><br><span class="line">print(res)<span class="comment"># ==&gt; 4</span></span><br><span class="line"><span class="comment"># res = next(it) error</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for 遍历迭代器</span></span><br><span class="line">lst = [<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>]</span><br><span class="line">it = map(int,lst)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it:</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># for + next 遍历迭代器</span></span><br><span class="line">lst = [<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>]</span><br><span class="line">it = map(int,lst)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">res = next(it)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># list 强转 一次性拿出所有数据 </span></span><br><span class="line">lst = [<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>]</span><br><span class="line">it = map(int,lst)</span><br><span class="line"></span><br><span class="line">lst = list(it)</span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 [ 1,2,3,4] ==&gt; [3,6,9,12]</span></span><br><span class="line">lst = [ <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> ]</span><br><span class="line">lst_new = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">res = i * <span class="number">3</span></span><br><span class="line">lst_new.append(res)</span><br><span class="line">print(lst_new)<span class="comment"># ==&gt; # ==&gt; [3, 6, 9, 12]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 map [ 1,2,3,4] ==&gt; [3,6,9,12]</span></span><br><span class="line"><span class="comment"># 参数 n 和 return 返回值是必要的</span></span><br><span class="line">lst = [ <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> ]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="keyword">return</span> n*<span class="number">3</span></span><br><span class="line">it = map(function,lst)</span><br><span class="line">lst = list(it)</span><br><span class="line">print(lst)<span class="comment"># ==&gt; [3, 6, 9, 12]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 &#123;97:"a",98:"b",99:"c"&#125; ==&gt; ["a":97,"b":98,"c":99] ,通过 ["a","b","c"] 列表获取 [97,98,99]</span></span><br><span class="line">dic = &#123;<span class="number">97</span>:<span class="string">"a"</span>,<span class="number">98</span>:<span class="string">"b"</span>,<span class="number">99</span>:<span class="string">"c"</span>&#125;</span><br><span class="line"><span class="comment"># 字典键值对反转</span></span><br><span class="line">dic_new = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> dic.items():</span><br><span class="line">print(k,v)</span><br><span class="line">dic_new[v] = k</span><br><span class="line">print(dic_new)</span><br><span class="line"></span><br><span class="line">lst = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]</span><br><span class="line">lst_new = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">res = dic_new[i]</span><br><span class="line">lst_new.append(res)</span><br><span class="line">print(lst_new)<span class="comment"># ==&gt; [97, 98, 99]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 map &#123;97:"a",98:"b",99:"c"&#125; ==&gt; ["a":97,"b":98,"c":99] ,通过 ["a","b","c"] 列表获取 [97,98,99]</span></span><br><span class="line">dic = &#123;<span class="number">97</span>:<span class="string">"a"</span>,<span class="number">98</span>:<span class="string">"b"</span>,<span class="number">99</span>:<span class="string">"c"</span>&#125;</span><br><span class="line">lst = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(n)</span>:</span><span class="comment"># n 分别接收参数 a , b , c</span></span><br><span class="line">dic = &#123;<span class="number">97</span>:<span class="string">"a"</span>,<span class="number">98</span>:<span class="string">"b"</span>,<span class="number">99</span>:<span class="string">"c"</span>&#125;</span><br><span class="line">dic_new = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> dic.items():<span class="comment"># 让字典的键值对反转</span></span><br><span class="line">dic_new[v] = k</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dic_new[n]</span><br><span class="line"></span><br><span class="line">it = map(function,lst)</span><br><span class="line">print(list(it))<span class="comment"># ==&gt; [97, 98, 99]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># reduce(function,iterable)</span></span><br><span class="line"><span class="comment"># 功能:一次性先从 iterable 中拿出两个数据,放到 function 中进行计算处理,</span></span><br><span class="line"><span class="comment">#再把计算的结果在和 iterable 中的第 3 个元素放入 function 当中进行处理计算</span></span><br><span class="line"><span class="comment">#依次类推,直到 iterable 中的数据全部计算完毕,返回最终的计算结果</span></span><br><span class="line"><span class="comment"># 参数:</span></span><br><span class="line"><span class="comment">#function : 自定义函数</span></span><br><span class="line"><span class="comment">#iterable : 可迭代对象(容器类型数据, range 对象, 迭代器等)</span></span><br><span class="line"><span class="comment"># 返回值: 计算结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [5,4,8,8] ==&gt; 5488</span></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">lst = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">8</span>]</span><br><span class="line">res = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">res += str(i)</span><br><span class="line">res = int(res)</span><br><span class="line">print(res,type(res))<span class="comment"># ==&gt; 5488 &lt;class 'int'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">lst = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">8</span>]</span><br><span class="line">it = iter(lst)</span><br><span class="line">num1 = next(it)</span><br><span class="line">num2 = next(it)</span><br><span class="line">res = num1 * <span class="number">10</span> + num2<span class="comment"># ==&gt; 5 * 10 + 4 = 54</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it:</span><br><span class="line">res = res * <span class="number">10</span> + i <span class="comment"># ==&gt; 54 * 10 + i</span></span><br><span class="line">print(res,type(res))<span class="comment"># ==&gt; 5488 &lt;class 'int'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法三</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">lst = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">8</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(x,y)</span>:</span></span><br><span class="line"><span class="keyword">return</span> x*<span class="number">10</span>+y</span><br><span class="line">res = reduce(function,lst)</span><br><span class="line">print(res,type(res))<span class="comment"># ==&gt; 5488 &lt;class 'int'&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">执行过程:</span></span><br><span class="line"><span class="string">先拿出两个元素 5 和 4</span></span><br><span class="line"><span class="string">放到 function 函数中, return 5 * 10 + 4 = 54</span></span><br><span class="line"><span class="string">取出 54 和 iterable 中的下一个值 8 </span></span><br><span class="line"><span class="string">放入 function 函数中, return 54 * 10 + 8 = 548</span></span><br><span class="line"><span class="string">取出 548 和 iterable 中的下一个值 8</span></span><br><span class="line"><span class="string">放入 function 函数中, return 548 * 10 + 8</span></span><br><span class="line"><span class="string">返回结果 5488</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># "789" ==&gt; 789 不能使用 int 强转</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_map</span><span class="params">(n)</span>:</span></span><br><span class="line">dic = &#123;<span class="string">"0"</span>:<span class="number">0</span>,<span class="string">"1"</span>:<span class="number">1</span>,<span class="string">"2"</span>:<span class="number">2</span>,<span class="string">"3"</span>:<span class="number">3</span>,<span class="string">"4"</span>:<span class="number">4</span>,<span class="string">"5"</span>:<span class="number">5</span>,<span class="string">"6"</span>:<span class="number">6</span>,<span class="string">"7"</span>:<span class="number">7</span>,<span class="string">"8"</span>:<span class="number">8</span>,<span class="string">"9"</span>:<span class="number">9</span>&#125;</span><br><span class="line"><span class="keyword">return</span> dic[n]</span><br><span class="line">it = map(func_map,<span class="string">"789"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x,y)</span>:</span></span><br><span class="line"><span class="keyword">return</span> x*<span class="number">10</span>+y</span><br><span class="line">strvar = <span class="string">"789"</span></span><br><span class="line">res = reduce(func,it)</span><br><span class="line">print(res,type(res))<span class="comment"># ==&gt; 789 &lt;class 'int'&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># sorted(iterable, reverse=False, key=函数)</span></span><br><span class="line"><span class="comment"># 功能: 排序</span></span><br><span class="line"><span class="comment"># 参数:</span></span><br><span class="line"><span class="comment">#iterable: 可迭代对象(容器类型数据, range 对象, 迭代器等)</span></span><br><span class="line"><span class="comment">#reverse : 是否倒序</span></span><br><span class="line"><span class="comment">#key     : 内置函数,自定义函数 (自定义排序的规则)</span></span><br><span class="line"><span class="comment"># 返回值: 排序后的结果(列表)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认从小到大排序</span></span><br><span class="line">tup = (<span class="number">45</span>,<span class="number">10</span>,<span class="number">71</span>,<span class="number">100</span>,<span class="number">-1</span>,<span class="number">-101</span>)</span><br><span class="line">res = sorted(tup)</span><br><span class="line">print(res)<span class="comment"># ==&gt; [-101, -1, 10, 45, 71, 100]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从大到小排序</span></span><br><span class="line">res = sorted(tup,reverse=<span class="literal">True</span>)</span><br><span class="line">print(res)<span class="comment"># ==&gt; [100, 71, 45, 10, -1, -101]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照绝对值排序</span></span><br><span class="line">res = sorted(tup,key=abs)<span class="comment"># abs() 返回数字的绝对值</span></span><br><span class="line">print(res)<span class="comment"># ==&gt; [-1, 10, 45, 71, 100, -101]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照数值的个位数大小进行排序</span></span><br><span class="line">setvar = &#123;<span class="number">19</span>,<span class="number">-25</span>,<span class="number">-42</span>,<span class="number">38</span>,<span class="number">77</span>,<span class="number">63</span>,<span class="number">101</span>,<span class="number">516</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="keyword">return</span> abs(n) % <span class="number">10</span> </span><br><span class="line">res = sorted(setvar,key=function)</span><br><span class="line">print(res)<span class="comment"># ==&gt; [101, -42, 63, -25, 516, 77, 38, 19]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串默认按照 ascii 编码进行排序</span></span><br><span class="line">strvar = <span class="string">"igabc"</span></span><br><span class="line">res = sorted(strvar)</span><br><span class="line">print(res)<span class="comment"># ==&gt; ['a', 'b', 'c', 'g', 'i']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对比 sort 和 sorted</span></span><br><span class="line"><span class="comment"># sort:1.只能针对列表这个单一类型数据能够排序 2.基于原有列表进行修改</span></span><br><span class="line"><span class="comment"># sorted: 1.所有容器类型数据都可以2.返回一个新列表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># filter(function,iterable)</span></span><br><span class="line"><span class="comment"># 功能: 过滤</span></span><br><span class="line"><span class="comment">#根据自定义函数中的返回值来决定,这个数据是否保留</span></span><br><span class="line"><span class="comment">#return True  保留</span></span><br><span class="line"><span class="comment">#return False 舍弃</span></span><br><span class="line"><span class="comment"># 参数: </span></span><br><span class="line"><span class="comment">#function: 自定义函数</span></span><br><span class="line"><span class="comment">#iterable: 可迭代对象(容器类型数据, range 对象, 迭代器等)</span></span><br><span class="line"><span class="comment"># 返回值: 迭代器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印列表中的偶数</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">34</span>,<span class="number">4</span>,<span class="number">545</span>,<span class="number">65</span>,<span class="number">6</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line"><span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 filter 打印列表中的偶数</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">34</span>,<span class="number">4</span>,<span class="number">545</span>,<span class="number">65</span>,<span class="number">6</span>,<span class="number">5</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(i)</span>:</span></span><br><span class="line"><span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">it = filter(function,lst)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it:</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 lambda 表达式印列表中的偶数</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">34</span>,<span class="number">4</span>,<span class="number">545</span>,<span class="number">65</span>,<span class="number">6</span>,<span class="number">5</span>]</span><br><span class="line">it = filter(<span class="keyword">lambda</span> i: <span class="literal">True</span> <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="literal">False</span>, lst)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it:</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><h2 id="推导式"><a href="#推导式" class="headerlink" title="推导式"></a>推导式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推导式</span></span><br><span class="line"><span class="comment"># 通过一行循环判断,遍历出一系列数据的方式是推导式</span></span><br><span class="line"><span class="comment"># 语法: val for val in Iterable (把想要的值写在 for 的左侧)</span></span><br><span class="line"><span class="comment"># 右侧是一行循环判断，根据套在推导式外层的括号来定义推导式的类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推导式的种类:</span></span><br><span class="line"><span class="comment"># [val for val in Iterable]  列表推导式</span></span><br><span class="line"><span class="comment"># &#123;val for val in Iterable&#125;  集合推导式</span></span><br><span class="line"><span class="comment"># &#123;a:b for a,b in iterable&#125;  字典推导式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.单循环推导式</span></span><br><span class="line">lst = [ i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>) ]</span><br><span class="line">print(lst)<span class="comment"># ==&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.带有判断条件的单循环推导式</span></span><br><span class="line"><span class="comment"># 原型 将一个列表中的奇数提取出来，重新生成一个列表</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">lst_new = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line"><span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">lst_new.append(i)</span><br><span class="line">print(lst_new)<span class="comment"># ==&gt; [1, 3, 5, 7]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单循环推导式 将一个列表中的奇数提取出来，重新生成一个列表</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">lst_new = [i <span class="keyword">for</span> i <span class="keyword">in</span> lst <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>]</span><br><span class="line">print(lst_new)<span class="comment"># ==&gt; [1, 3, 5, 7]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.双循环推导式</span></span><br><span class="line"><span class="comment"># 原型 通过两组列表生成 ['A+a', 'A+b', 'A+c', 'B+a', 'B+b', 'B+c', 'C+a', 'C+b', 'C+c']</span></span><br><span class="line">lst1 = [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>]</span><br><span class="line">lst2 = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]</span><br><span class="line">strvar = <span class="string">""</span></span><br><span class="line">lst = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst1:</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> lst2:</span><br><span class="line">strvar = i + <span class="string">"+"</span>  + j</span><br><span class="line">lst.append(strvar)</span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 双循环推导式 通过两组列表生成 ['A+a', 'A+b', 'A+c', 'B+a', 'B+b', 'B+c', 'C+a', 'C+b', 'C+c']</span></span><br><span class="line">lst1 = [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>]</span><br><span class="line">lst2 = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]</span><br><span class="line">lst = [i + <span class="string">"+"</span>  + j <span class="keyword">for</span> i <span class="keyword">in</span> lst1 <span class="keyword">for</span> j <span class="keyword">in</span> lst2]</span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.带有判断条件的双循环推导式</span></span><br><span class="line"><span class="comment"># 原型 通过两组列表生成 ['A=a', 'B=b', 'C=c']</span></span><br><span class="line">lst1 = [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>]</span><br><span class="line">lst2 = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]</span><br><span class="line">strvar = <span class="string">""</span></span><br><span class="line">lst = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst1:</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> lst2:</span><br><span class="line"><span class="keyword">if</span> lst1.index(i) == lst2.index(j):</span><br><span class="line">strvar = i + <span class="string">"="</span>  +j</span><br><span class="line">lst.append(strvar)</span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 双循环推导式 通过两组列表生成 ['A=a', 'B=b', 'C=c']</span></span><br><span class="line">lst1 = [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>]</span><br><span class="line">lst2 = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]</span><br><span class="line">lst = [i + <span class="string">"="</span>  +j <span class="keyword">for</span> i <span class="keyword">in</span> lst1 <span class="keyword">for</span> j <span class="keyword">in</span> lst2 <span class="keyword">if</span> lst1.index(i) == lst2.index(j)]</span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合推导式</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">案例:</span></span><br><span class="line"><span class="string">满足年龄在 18 到 21,存款大于等于 5000 且小于等于 5500 的人</span></span><br><span class="line"><span class="string">开卡格式为: VIP卡 姓氏 先生/女士,否则开卡格式为: 普通卡 姓氏 先生/女士</span></span><br><span class="line"><span class="string">把开卡的种类统计出来</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">listvar = [</span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"王家辉"</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"money"</span>:<span class="number">10000</span>&#125;,</span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"王水机"</span>,<span class="string">"age"</span>:<span class="number">19</span>,<span class="string">"money"</span>:<span class="number">5100</span>&#125;,</span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"谢鹏"</span>,<span class="string">"age"</span>:<span class="number">20</span>,<span class="string">"money"</span>:<span class="number">4800</span>&#125;,</span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"王站"</span>,<span class="string">"age"</span>:<span class="number">21</span>,<span class="string">"money"</span>:<span class="number">2000</span>&#125;,</span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"李小龙"</span>,<span class="string">"age"</span>:<span class="number">180</span>,<span class="string">"money"</span>:<span class="number">20</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">setvar = set()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> listvar:</span><br><span class="line"><span class="keyword">if</span> <span class="number">18</span> &lt;= i[<span class="string">"age"</span>] &lt;= <span class="number">21</span> <span class="keyword">and</span> <span class="number">5000</span> &lt;= i[<span class="string">"money"</span>] &lt;= <span class="number">5500</span>:</span><br><span class="line">strvar = <span class="string">"VIP卡 &#123;&#125;先生/女士"</span>.format(i[<span class="string">"name"</span>][<span class="number">0</span>])</span><br><span class="line">setvar.add(strvar)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">strvar = <span class="string">"普通卡 &#123;&#125;先生/女士"</span>.format(i[<span class="string">"name"</span>][<span class="number">0</span>])</span><br><span class="line">setvar.add(strvar)</span><br><span class="line"></span><br><span class="line">print(setvar)</span><br><span class="line"><span class="comment"># &#123;'普通卡 李先生/女士', '普通卡 谢先生/女士', '普通卡 王先生/女士', 'VIP卡 王先生/女士'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用集合推导式完成案列</span></span><br><span class="line">listvar = [</span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"王家辉"</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"money"</span>:<span class="number">10000</span>&#125;,</span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"王水机"</span>,<span class="string">"age"</span>:<span class="number">19</span>,<span class="string">"money"</span>:<span class="number">5100</span>&#125;,</span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"谢鹏"</span>,<span class="string">"age"</span>:<span class="number">20</span>,<span class="string">"money"</span>:<span class="number">4800</span>&#125;,</span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"王站"</span>,<span class="string">"age"</span>:<span class="number">21</span>,<span class="string">"money"</span>:<span class="number">2000</span>&#125;,</span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"李小龙"</span>,<span class="string">"age"</span>:<span class="number">180</span>,<span class="string">"money"</span>:<span class="number">20</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">setvar = &#123;<span class="string">"VIP卡 &#123;&#125;先生/女士"</span>.format(i[<span class="string">"name"</span>][<span class="number">0</span>]) <span class="keyword">if</span> <span class="number">18</span> &lt;= i[<span class="string">"age"</span>] &lt;= <span class="number">21</span> \</span><br><span class="line"><span class="keyword">and</span> <span class="number">5000</span> &lt;= i[<span class="string">"money"</span>] &lt;= <span class="number">5500</span> <span class="keyword">else</span> <span class="string">"普通卡 &#123;&#125;先生/女士"</span>.format(i[<span class="string">"name"</span>][<span class="number">0</span>]) \</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> listvar &#125;</span><br><span class="line">print(setvar)</span><br><span class="line"><span class="comment"># &#123;'普通卡 李先生/女士', '普通卡 谢先生/女士', '普通卡 王先生/女士', 'VIP卡 王先生/女士'&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典推导式</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">enumerate(iterable,[start=0])</span></span><br><span class="line"><span class="string">功能: 枚举, 将索引号和 iterable 中的值,一个一个拿出来配对组成元组放入迭代器中</span></span><br><span class="line"><span class="string">参数:</span></span><br><span class="line"><span class="string">    iterable: 可迭代性数据 (迭代器, 容器类型数据, 可迭代对象 range 等) </span></span><br><span class="line"><span class="string">    start:  可以选择开始的索引号(默认从 0 开始索引)</span></span><br><span class="line"><span class="string">返回值: 迭代器</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">lst = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]</span><br><span class="line">it = enumerate(lst)</span><br><span class="line">res = list(it)</span><br><span class="line">print(res)<span class="comment"># ==&gt; [(0, 'a'), (1, 'b'), (2, 'c')]</span></span><br><span class="line"></span><br><span class="line">it = enumerate(lst,start=<span class="number">10</span>)</span><br><span class="line">res = list(it)</span><br><span class="line">print(res)<span class="comment"># ==&gt; [(10, 'a'), (11, 'b'), (12, 'c')]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.利用 enumerate, 完成字典推导式</span></span><br><span class="line">lst = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]</span><br><span class="line">it = enumerate(lst)</span><br><span class="line">dic = &#123;a:b <span class="keyword">for</span> a,b <span class="keyword">in</span> it&#125;</span><br><span class="line">print(dic,type(dic))<span class="comment"># ==&gt; &#123;0: 'a', 1: 'b', 2: 'c'&#125; &lt;class 'dict'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.利用 dict 强制迭代器转换为字典类型</span></span><br><span class="line">it = enumerate(lst)</span><br><span class="line">dic = dict(it)</span><br><span class="line">print(dic,type(dic))<span class="comment"># ==&gt; &#123;0: 'a', 1: 'b', 2: 'c'&#125; &lt;class 'dict'&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># zip(iterable, ... ...)</span></span><br><span class="line"><span class="comment"># 功能: 将多个 iterable 中的值,一个一个拿出来 配对 组成元组放入迭代器中</span></span><br><span class="line"><span class="comment"># iterable: 可迭代性数据 (迭代器, 容器类型数据, 可迭代对象 range 等) </span></span><br><span class="line"><span class="comment"># 返回值: 迭代器 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有值和相应的数据配对,那么这个值会被舍弃</span></span><br><span class="line"></span><br><span class="line">lst1 = [<span class="string">"叶伟明"</span>,<span class="string">"张军"</span>,<span class="string">"陈书杰"</span>,<span class="string">"陈源威"</span>]</span><br><span class="line">lst2 = [<span class="string">"梁永浩"</span>,<span class="string">"江源"</span>,<span class="string">"程锴"</span>]</span><br><span class="line">it = zip(lst1,lst2)</span><br><span class="line">print(list(it))<span class="comment"># ==&gt; [('叶伟明', '梁永浩'), ('张军', '江源'), ('陈书杰', '程锴')]</span></span><br><span class="line"></span><br><span class="line">lst1 = [<span class="string">"叶伟明"</span>,<span class="string">"张军"</span>,<span class="string">"陈书杰"</span>,<span class="string">"陈源威"</span>]</span><br><span class="line">lst2 = [<span class="string">"梁永浩"</span>,<span class="string">"江源"</span>,<span class="string">"程锴"</span>]</span><br><span class="line">lst3 = [<span class="string">"赵皎洁"</span>,<span class="string">"林永辉"</span>]</span><br><span class="line">it = zip(lst1,lst2,lst3)</span><br><span class="line">print(list(it))<span class="comment"># ==&gt; [('叶伟明', '梁永浩', '赵皎洁'), ('张军', '江源', '林永辉')]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</span><br><span class="line">res = isinstance(it,Iterator)</span><br><span class="line">print(res)<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.利用 zip 完成字典推导式</span></span><br><span class="line">lst1 = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]</span><br><span class="line">lst2 = [<span class="string">"AA"</span>,<span class="string">"BB"</span>,<span class="string">"CC"</span>]</span><br><span class="line">it = zip(lst1,lst2)</span><br><span class="line"></span><br><span class="line">dic = &#123;a:b <span class="keyword">for</span> a,b <span class="keyword">in</span> it&#125;</span><br><span class="line">print(dic)<span class="comment"># ==&gt; &#123;'a': 'AA', 'b': 'BB', 'c': 'CC'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.利用 dict 强制迭代器转换为字典</span></span><br><span class="line">lst1 = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]</span><br><span class="line">lst2 = [<span class="string">"AA"</span>,<span class="string">"BB"</span>,<span class="string">"CC"</span>]</span><br><span class="line">it = zip(lst1,lst2)</span><br><span class="line"></span><br><span class="line">dic = dict(it)</span><br><span class="line">print(dic)<span class="comment"># ==&gt; &#123;'a': 'AA', 'b': 'BB', 'c': 'CC'&#125;</span></span><br></pre></td></tr></table></figure><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成器表达式 generator</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 元组推导式的返回值是一个生成器对象,简称生成器,生成器本质就是迭代器</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 迭代器和生成器区别:</span></span><br><span class="line"><span class="string">迭代器本身是系统内置的,无法重写,而生成器是用户自定义的,可以重写迭代逻辑</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 生成器可以用两种方式创建:</span></span><br><span class="line"><span class="string">    1.生成器表达式  (里面是推导式,外面用圆括号)</span></span><br><span class="line"><span class="string">    2.生成器函数    (用 def 定义,里面含有 yield)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过生成器表达式,创建生成器</span></span><br><span class="line">gen = (i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">print(gen)<span class="comment"># ==&gt; &lt;generator object &lt;genexpr&gt; at 0x000002273CECC7D8&gt;</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</span><br><span class="line">res = isinstance(gen,Iterator)</span><br><span class="line">print(res)<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历生成器</span></span><br><span class="line"><span class="comment"># 1.for 循环</span></span><br><span class="line">gen = (i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> gen:</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.next 方法</span></span><br><span class="line">gen = (i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">res = next(gen)</span><br><span class="line">print(res)<span class="comment"># ==&gt; 0</span></span><br><span class="line">res = next(gen)</span><br><span class="line">print(res)<span class="comment"># ==&gt; 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.for + next</span></span><br><span class="line">gen = (i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">res = next(gen)</span><br><span class="line">print(res)<span class="comment"># ==&gt; 0  # ==&gt; 1  # ==&gt; 2</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 生成器函数</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># yield 类似于 return</span></span><br><span class="line"><span class="string">共同点在于: 执行到这个语句时都会返回值</span></span><br><span class="line"><span class="string">不同点在于: yield 每次返回时,会记住上次离开时执行的位置, 下次在调用生成器, 会从上次执行的位置往下走</span></span><br><span class="line"><span class="string">   而 return 直接终止函数,每次都会重新调用</span></span><br><span class="line"><span class="string">语法： yield 6 或 yield(6)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.定义一个生成器函数</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">"one"</span>)</span><br><span class="line"><span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"two"</span>)</span><br><span class="line"><span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"three"</span>)</span><br><span class="line"><span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">gen = function()</span><br><span class="line">print(isinstance(gen,Iterator))<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次调用</span></span><br><span class="line">res = next(gen)</span><br><span class="line">print(res)<span class="comment"># ==&gt; one  # ==&gt; 1</span></span><br><span class="line"><span class="comment"># 第二次调用</span></span><br><span class="line">res = next(gen)</span><br><span class="line">print(res)<span class="comment"># ==&gt; two  # ==&gt; 2</span></span><br><span class="line"><span class="comment"># 第三次调用</span></span><br><span class="line">res = next(gen)</span><br><span class="line">print(res)<span class="comment"># ==&gt; three  # ==&gt; 3</span></span><br><span class="line"><span class="comment"># 第四次调用</span></span><br><span class="line"><span class="comment"># res = next(gen)</span></span><br><span class="line"><span class="comment"># print(res) # ==&gt; Error StopIteration </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.优化生成器函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line"><span class="keyword">yield</span> <span class="string">"No.&#123;&#125;"</span>.format(i)</span><br><span class="line"></span><br><span class="line">gen = function()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">res = next(gen)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.send 给上一个 yield 所在的位置传值</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># next 和 send 区别:</span></span><br><span class="line"><span class="string">next 只能取值</span></span><br><span class="line"><span class="string">send 能取值和发送值</span></span><br><span class="line"><span class="string"># send 注意点:</span></span><br><span class="line"><span class="string">第一个 send 不能给 yield 传值 默认只能写 None</span></span><br><span class="line"><span class="string">最后一个 yield 无法给 send 返回值</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">"start"</span>)</span><br><span class="line"></span><br><span class="line">res = <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">print(res,<span class="string">"inner"</span>)</span><br><span class="line"></span><br><span class="line">res = <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">print(res,<span class="string">"inner"</span>)</span><br><span class="line"></span><br><span class="line">res = <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">print(res,<span class="string">"inner"</span>)</span><br><span class="line">print(<span class="string">"end"</span>)</span><br><span class="line"></span><br><span class="line">gen = function()</span><br><span class="line"><span class="comment"># 通过 send 调用数据时,第一次还没有遇到 yield ,只能发送 None 作为初始化</span></span><br><span class="line"><span class="comment"># 第一次发送</span></span><br><span class="line">res = gen.send(<span class="literal">None</span>)</span><br><span class="line">print(res)<span class="comment"># ==&gt; start  # ==&gt; 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次发送</span></span><br><span class="line">res = gen.send(<span class="string">'send 2'</span>)</span><br><span class="line">print(res)<span class="comment"># ==&gt; send 2 inne  # ==&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三次发送</span></span><br><span class="line">res = gen.send(<span class="string">'send 3'</span>)</span><br><span class="line">print(res)<span class="comment"># ==&gt; send 3 inne  # ==&gt; 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第四次发送</span></span><br><span class="line"><span class="comment"># res = gen.send('send 4')</span></span><br><span class="line"><span class="comment"># print(res)# ==&gt; Error StopIteration  # ==&gt; send 4 inner  # ==&gt; end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.yield from: 将一个可迭代对象变成一个迭代器返回</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">yield</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    </span><br><span class="line">gen = function()</span><br><span class="line">print(gen)<span class="comment"># ==&gt; &lt;generator object function at 0x0000025A433AC0A0&gt;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> gen:</span><br><span class="line">print(i)    <span class="comment"># ==&gt; [1, 2, 3]</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">yield</span> <span class="keyword">from</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">gen = function()</span><br><span class="line">print(gen)<span class="comment"># ==&gt; &lt;generator object function at 0x000001F51119C0A0&gt;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> gen:</span><br><span class="line">print(i)<span class="comment"># ==&gt; 1  # ==&gt; 2  # ==&gt; 3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.斐波那契数列</span></span><br><span class="line"><span class="comment"># 1 1 2 3 5 8 13 21 34</span></span><br><span class="line"><span class="comment"># 第 n 个元素 是多少</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(n)</span>:</span></span><br><span class="line">a,b = <span class="number">0</span>,<span class="number">1</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; n:</span><br><span class="line"><span class="keyword">yield</span> b</span><br><span class="line">a,b = b,a + b</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">n= <span class="number">7</span></span><br><span class="line">gen = function(n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">res = next(gen)</span><br><span class="line"><span class="keyword">if</span> i == n - <span class="number">1</span>:</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 内置函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># abs 绝对值函数</span></span><br><span class="line">print(abs(<span class="number">-3</span>))<span class="comment"># ==&gt; 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># round 四舍五入((n.5 当 n 为偶数则舍去 n.5 n为奇数则进一，偶舍奇进)</span></span><br><span class="line">print(round(<span class="number">3.3</span>))<span class="comment"># ==&gt; 3</span></span><br><span class="line">print(round(<span class="number">3.5</span>))<span class="comment"># ==&gt; 4</span></span><br><span class="line">print(round(<span class="number">-3.2</span>))<span class="comment"># ==&gt; -3</span></span><br><span class="line">print(round(<span class="number">-3.5</span>))<span class="comment"># ==&gt; -4</span></span><br><span class="line">print(round(<span class="number">-4.1</span>))<span class="comment"># ==&gt; -4</span></span><br><span class="line">print(round(<span class="number">-4.5</span>))<span class="comment"># ==&gt; -4</span></span><br><span class="line">print(round(<span class="number">-4.51</span>))<span class="comment"># ==&gt; -5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sum 计算一个序列的累加和</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">100</span>]</span><br><span class="line">print(sum(lst))<span class="comment"># ==&gt; 125</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># max 获取一个序列里的最大值</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">100</span>]</span><br><span class="line">print(max(lst))<span class="comment"># ==&gt; 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># min 获取一个序列里的最小值</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">100</span>]</span><br><span class="line">print(min(lst))<span class="comment"># ==&gt; 1</span></span><br><span class="line"></span><br><span class="line">lst = [(<span class="string">"yui"</span>,<span class="number">25</span>),(<span class="string">"alan"</span>,<span class="number">15</span>),(<span class="string">"tom"</span>,<span class="number">19</span>)]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="keyword">return</span> n[<span class="number">1</span>]</span><br><span class="line"><span class="comment"># res = max(lst,key=function)</span></span><br><span class="line">res = min(lst,key=function)</span><br><span class="line">print(res)<span class="comment"># ==&gt; ('alan', 15)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pow 计算某个数值的 n 次方</span></span><br><span class="line">print(pow(<span class="number">2</span>,<span class="number">3</span>))<span class="comment"># ==&gt; 8</span></span><br><span class="line"></span><br><span class="line">print(pow(<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>))<span class="comment"># ==&gt; 0  先计算次幂,再和第三个参数计算取余</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># range 产生指定范围数据的可迭代对象</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">print(i)<span class="comment"># ==&gt; 0  # ==&gt; 1  # ==&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">3</span>):</span><br><span class="line">print(i)<span class="comment"># ==&gt; 1  # ==&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>,<span class="number">5</span>):</span><br><span class="line">print(i)<span class="comment"># ==&gt; 1  # ==&gt; 6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># bin 将十进制数据转化为二进制</span></span><br><span class="line">print(bin(<span class="number">255</span>))<span class="comment"># ==&gt; 0b11111111</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># oct 将十进制数据转化为八进制</span></span><br><span class="line">print(oct(<span class="number">25</span>))<span class="comment"># ==&gt; 0o31</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hex 将十进制数据转化为十六进制</span></span><br><span class="line">print(hex(<span class="number">25</span>))<span class="comment"># ==&gt; 0x19</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chr 将 ASCII 编码转换为字符</span></span><br><span class="line">print(chr(<span class="number">65</span>))<span class="comment"># ==&gt; A</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ord 将字符转换为 ASCII 编码</span></span><br><span class="line">print(ord(<span class="string">'A'</span>))<span class="comment"># ==&gt; 65</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># eval 将字符串当作 python 代码执行</span></span><br><span class="line">strvar = <span class="string">'print(1)'</span></span><br><span class="line">eval(strvar)<span class="comment"># ==&gt; 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># strvar = 'a = 3'</span></span><br><span class="line"><span class="comment"># eval(strvar)# ==&gt; Error</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># exec 将字符串当作 python 代码执行(相对于 eval 功能更完善)</span></span><br><span class="line">strvar = <span class="string">'a = 6'</span></span><br><span class="line">exec(strvar)</span><br><span class="line">print(a)<span class="comment"># ==&gt; 6</span></span><br><span class="line"></span><br><span class="line">strvar = <span class="string">'print(7)'</span></span><br><span class="line">exec(strvar)<span class="comment"># ==&gt; 7</span></span><br><span class="line"></span><br><span class="line">strvar = <span class="string">"""</span></span><br><span class="line"><span class="string">for i in range(5):</span></span><br><span class="line"><span class="string">print(i,end='')</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">exec(strvar)<span class="comment"># ==&gt; 01234</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'-----------------------------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># repr 不转义字符输出字符串</span></span><br><span class="line">res = repr(str([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br><span class="line">print(res)<span class="comment"># ==&gt; '[1, 2, 3]'</span></span><br><span class="line"></span><br><span class="line">res = repr(<span class="string">'a\n\rb\nc'</span>)</span><br><span class="line">print(res)<span class="comment"># ==&gt; 'a\n\rb\nc'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># input 接收输入字符串</span></span><br><span class="line"><span class="comment"># res = input('Please input anything: ')</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># hash 生成哈希值</span></span><br><span class="line">strvar1 = <span class="string">'abc'</span></span><br><span class="line">strvar2 = <span class="string">'abc'</span></span><br><span class="line">print(id(strvar1),id(strvar2))<span class="comment"># ==&gt; 1213843602656 1213843602656</span></span><br><span class="line">res1 = hash(strvar1)</span><br><span class="line">res2 = hash(strvar2)</span><br><span class="line">print(res1,res2)<span class="comment"># ==&gt; 910053544713526705 910053544713526705</span></span><br><span class="line"></span><br><span class="line">strvar1 = <span class="string">'abc'</span></span><br><span class="line">strvar2 = <span class="string">'abcd'</span></span><br><span class="line">print(id(strvar1),id(strvar2))<span class="comment"># ==&gt; 2142814502112 2142815471576</span></span><br><span class="line">res1 = hash(strvar1)</span><br><span class="line">res2 = hash(strvar2)</span><br><span class="line">print(res1,res2)<span class="comment"># ==&gt; -3245526725922590342 -8877769855893350421</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hash 校验两个文件的内容是否相同</span></span><br><span class="line"><span class="comment"># 文件 test1.txt 内容为 hello</span></span><br><span class="line"><span class="comment"># 文件 test2.txt 内容为 hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test1.txt'</span>,mode=<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp1, open(<span class="string">'test2.txt'</span>,mode=<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp2:</span><br><span class="line">res1 = hash(fp1.read())</span><br><span class="line">res2 = hash(fp2.read())</span><br><span class="line">print(res1,res2)<span class="comment"># ==&gt; -8769311301827870167 -8769311301827870167</span></span><br></pre></td></tr></table></figure><h2 id="math-数学模块"><a href="#math-数学模块" class="headerlink" title="math 数学模块"></a>math 数学模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># math 数学模块</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># ceil() 向上取整操作(类似内置函数 round)</span></span><br><span class="line">print(math.ceil(<span class="number">3.1</span>))<span class="comment"># ==&gt; 4</span></span><br><span class="line">print(math.ceil(<span class="number">-3.1</span>))<span class="comment"># ==&gt; -3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># floor() 向下取整操作(类似内置函数 round)</span></span><br><span class="line">print(math.floor(<span class="number">3.1</span>))<span class="comment"># ==&gt; 3</span></span><br><span class="line">print(math.floor(<span class="number">-3.1</span>))<span class="comment"># ==&gt; -4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pow() 计算一个数值的 n 次方,结果为浮点型数值(似内置函数 pow)</span></span><br><span class="line">print(math.pow(<span class="number">3</span>,<span class="number">3</span>))<span class="comment"># ==&gt; 27.0</span></span><br><span class="line">print(math.pow(<span class="number">3.3</span>,<span class="number">3</span>))<span class="comment"># ==&gt; 35.937</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sqrt() 计算一个数值的平方根,结果为浮点型数值</span></span><br><span class="line">print(math.sqrt(<span class="number">3</span>))<span class="comment"># ==&gt; 1.7320508075688772</span></span><br><span class="line">print(math.sqrt(<span class="number">9</span>))<span class="comment"># ==&gt; 3.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fabs() 计算一个数值的绝对值,结果为浮点型数值(似内置函数 abs)</span></span><br><span class="line">print(math.fabs(<span class="number">-9.9</span>))<span class="comment"># ==&gt; 9.9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># modf() 将一个数值拆分为小数和整数两个浮点型的数值并组成元组</span></span><br><span class="line">print(math.modf(<span class="number">5.11</span>))<span class="comment"># ==&gt; (0.11000000000000032, 5.0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># copysign() 将参数的第二个数值的正负号传递给第一个数值，结果为浮点型</span></span><br><span class="line">print(math.copysign(<span class="number">8</span>,<span class="number">-9</span>))<span class="comment"># ==&gt; -8.0</span></span><br><span class="line">print(math.copysign(<span class="number">-8</span>,<span class="number">9</span>))<span class="comment"># ==&gt; 8.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fsum() 将一个容器数据中的数据进行累加求和运算,结果为浮点型(似内置函数 sum)</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">73</span>]</span><br><span class="line">print(math.fsum(lst))<span class="comment"># ==&gt; 97.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 圆周率常数 pi</span></span><br><span class="line">print(math.pi)<span class="comment"># ==&gt; 3.141592653589793</span></span><br></pre></td></tr></table></figure><h2 id="time-时间模块"><a href="#time-时间模块" class="headerlink" title="time 时间模块"></a>time 时间模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># time 时间模块</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># time() 获取本地时间戳</span></span><br><span class="line">print(time.time())<span class="comment"># ==&gt; 1579340122.5295157</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mktime() 通过 [时间元组] 获取 [时间戳] 参数为 [时间元组]</span></span><br><span class="line">ttp = (<span class="number">2020</span>,<span class="number">1</span>,<span class="number">18</span>,<span class="number">17</span>,<span class="number">37</span>,<span class="number">17</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">print(time.mktime(ttp))<span class="comment"># ==&gt; 1579340237.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># localtime() 通过 [时间戳] 获取 [时间元组] 默认为当前时间</span></span><br><span class="line">print(time.localtime())<span class="comment"># ==&gt; time.struct_time(tm_year=2020, tm_mon=1, tm_mday=18, tm_hour=17, tm_min=42, tm_sec=19, tm_wday=5, tm_yday=18, tm_isdst=0)</span></span><br><span class="line">print(time.localtime(<span class="number">1579340237.0</span>)) <span class="comment"># ==&gt; time.struct_time(tm_year=2020, tm_mon=1, tm_mday=18, tm_hour=17, tm_min=37, tm_sec=17, tm_wday=5, tm_yday=18, tm_isdst=0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ctime() 通过 [时间戳] 获取 [时间字符串] 默认为当前时间</span></span><br><span class="line">print(time.ctime())<span class="comment"># ==&gt; Sat Jan 18 17:44:43 2020</span></span><br><span class="line">print(time.ctime(<span class="number">1579340122.5295157</span>))<span class="comment"># ==&gt; Sat Jan 18 17:35:22 2020</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># asctime() 通过 [时间元组] 获取 [时间字符串] 参数是 [时间元组]</span></span><br><span class="line"><span class="comment"># 必须手动设置周几,无法自动获取</span></span><br><span class="line">ttp = (<span class="number">2020</span>,<span class="number">1</span>,<span class="number">18</span>,<span class="number">17</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">print(time.asctime(ttp))<span class="comment"># ==&gt; Sat Jan 18 17:40:30 2020</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动获取</span></span><br><span class="line">ttp = (<span class="number">2020</span>,<span class="number">1</span>,<span class="number">18</span>,<span class="number">17</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">res = time.mktime(ttp)</span><br><span class="line">print(res)<span class="comment"># ==&gt; 1579340430.0</span></span><br><span class="line">strvar = time.ctime(res)</span><br><span class="line">print(strvar)<span class="comment"># ==&gt; Sat Jan 18 17:40:30 2020</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># strftime() 通过 [时间元组] 格式化 [时间字符串] (格式化字符串,[可选时间元组参数])</span></span><br><span class="line">print(time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>))<span class="comment"># ==&gt; 2020-01-18 17:54:11</span></span><br><span class="line">print(time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, (<span class="number">2020</span>,<span class="number">1</span>,<span class="number">18</span>,<span class="number">18</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>) ))<span class="comment"># ==&gt; 2020-01-18 18:00:00</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sleep() 程序睡眠等待</span></span><br><span class="line"><span class="comment"># time.sleep(2)</span></span><br><span class="line"><span class="comment"># print("sleep ...")</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># perf_counter() 计算程序运行的时间</span></span><br><span class="line">starttime = time.perf_counter()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</span><br><span class="line">print(<span class="string">'.'</span>,end=<span class="string">''</span>)</span><br><span class="line">endtime = time.perf_counter()</span><br><span class="line">print(<span class="string">'\n'</span>,endtime-starttime)<span class="comment"># ==&gt;  0.2814196</span></span><br></pre></td></tr></table></figure><h2 id="pickle-序列化模块"><a href="#pickle-序列化模块" class="headerlink" title="pickle 序列化模块"></a>pickle 序列化模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pickle 序列化模块</span></span><br><span class="line"><span class="comment"># 序列化: 把不能够直接存储到文件中的数据变得可存储</span></span><br><span class="line"><span class="comment"># 反序列化: 把存储的数据拿出来,恢复成原来的数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># dumps 把任意对象序列化成为 bytes 数据</span></span><br><span class="line">res = pickle.dumps(lst)</span><br><span class="line">print(res,type(res))<span class="comment"># ==&gt; b'\x80\x03]q\x00(K\x01K\x02K\x03e.' &lt;class 'bytes'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># loads 把任意 bytes 数据反序列化成原来的数据</span></span><br><span class="line">lst = pickle.loads(res)</span><br><span class="line">print(lst,type(lst))<span class="comment"># ==&gt; [1, 2, 3] &lt;class 'list'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dump 将对象序列化后写入到 file-like Object (即文件对象)</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.txt'</span>,mode=<span class="string">'wb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">pickle.dump(lst,fp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># load 将 file-like Object(即文件对象)中的内容拿出来,反序列化成为原数据</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.txt'</span>,mode=<span class="string">'rb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">res = pickle.load(fp)</span><br><span class="line">print(res,type(res))<span class="comment"># ==&gt; [1, 2, 3] &lt;class 'list'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将函数序列化</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">'abc'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'text.txt'</span>,mode=<span class="string">'wb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">pickle.dump(function,fp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'text.txt'</span>,mode=<span class="string">'rb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">res = pickle.load(fp)</span><br><span class="line"></span><br><span class="line">print(res,type(res))<span class="comment"># ==&gt; &lt;function function at 0x0000028E59E81EA0&gt; &lt;class 'function'&gt;</span></span><br><span class="line">res()<span class="comment"># ==&gt; abc</span></span><br></pre></td></tr></table></figure><h2 id="json-模块"><a href="#json-模块" class="headerlink" title="json 模块"></a>json 模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># json 模块</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">json 所有编程语言都能够识别的数据格式</span></span><br><span class="line"><span class="string">json 可以序列化数据,但是 仅限于 (int float bool)(str list tuple dict None) 类型</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">json 是一个字符串类型的数据,里面的字符串看起来像一个字典</span></span><br><span class="line"><span class="string">json 也可以进行 序列化 和 反序列化,转化之后的数据类型是字符串,而 pickle 是字节流</span></span><br><span class="line"><span class="string">json 应用的方向在不同语言形成数据交流时,使用 json 格式的数据</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># dumps 和 loads ,对数据进行 序列化 和 反序列化,通过字符串的形式</span></span><br><span class="line">dicvar = &#123;<span class="string">"name"</span>:<span class="string">"汤姆"</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"family"</span>:[<span class="string">"father"</span>,<span class="string">"mother"</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ensure_ascii=False 支持显示中文</span></span><br><span class="line">res = json.dumps(dicvar,ensure_ascii=<span class="literal">False</span>,sort_keys=<span class="literal">True</span>)</span><br><span class="line">print(res,type(res))<span class="comment"># ==&gt; &#123;"age": 18, "family": ["father", "mother"], "name": "汤姆", "sex": "male"&#125; &lt;class 'str'&gt;</span></span><br><span class="line"></span><br><span class="line">dicvar = json.loads(res)</span><br><span class="line">print(dicvar,type(dicvar))<span class="comment"># ==&gt; &#123;'age': 18, 'family': ['father', 'mother'], 'name': '汤姆', 'sex': 'male'&#125; &lt;class 'dict'&gt;</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'------------------------------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dump 和 load ,对数据进行 序列化 和 反序列化</span></span><br><span class="line"><span class="comment"># dump 将字典数据序列化为字符串写入到文件中</span></span><br><span class="line">dicvar = &#123;<span class="string">"name"</span>:<span class="string">"汤姆"</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"family"</span>:[<span class="string">"father"</span>,<span class="string">"mother"</span>]&#125;</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'text.txt'</span>,mode=<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">json.dump(dicvar,fp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># load 将文件中的字符串数据反序列化成为字典</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'text.txt'</span>,mode=<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">res = json.load(fp)</span><br><span class="line">print(res,type(res))<span class="comment"># ==&gt; &#123;'name': '汤姆', 'sex': 'male', 'age': 18, 'family': ['father', 'mother']&#125; &lt;class 'dict'&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># json 和 pickle 之间的区别</span></span><br><span class="line"><span class="comment"># json 可以连续 dump,但是不能连续 load</span></span><br><span class="line"><span class="comment"># load 一次性读取所有数据,看作一个整体</span></span><br><span class="line"></span><br><span class="line">dic1 = &#123;<span class="string">"a"</span>:<span class="number">1</span>,<span class="string">"b"</span>:<span class="number">2</span>&#125;</span><br><span class="line">dic2 = &#123;<span class="string">"c"</span>:<span class="number">3</span>,<span class="string">"d"</span>:<span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以连续 dump 存储数据</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"test.txt"</span>,mode=<span class="string">"w"</span>,encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> fp:</span><br><span class="line">json.dump(dic1,fp)</span><br><span class="line">fp.write(<span class="string">"\n"</span>)<span class="comment"># ==&gt; 通过 loads 读取连续 dump 存储数据，必须分隔各段数据</span></span><br><span class="line">json.dump(dic2,fp)</span><br><span class="line">fp.write(<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 但无法通过 load 反序列化数据,一次性拿出所有数据,但实际是 2个字典,不能够识别,显示报错</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">with open("test.txt",mode="r",encoding="utf-8") as fp:</span></span><br><span class="line"><span class="string">dic = json.load(fp)</span></span><br><span class="line"><span class="string">print(dic)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 通过 loads 解决上述问题</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator,Iterable</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"test.txt"</span>,mode=<span class="string">"r"</span>,encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> fp:</span><br><span class="line">res1 = isinstance(fp,Iterator)<span class="comment"># ==&gt; True</span></span><br><span class="line">res2 = isinstance(fp,Iterable)<span class="comment"># ==&gt; True</span></span><br><span class="line">print(res1,res2)</span><br><span class="line"><span class="comment"># 直接遍历 fp 文件 io 对象,会自动一行一行读取内容</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fp:</span><br><span class="line">dic = json.loads(i)</span><br><span class="line">print(dic,type(dic))<span class="comment"># ==&gt; &#123;'a': 1, 'b': 2&#125; &lt;class 'dict'&gt;  # ==&gt; &#123;'c': 3, 'd': 4&#125; &lt;class 'dict'&gt;</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'------------------------------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pickle 可以连续 dump,也可以连续 load</span></span><br><span class="line"><span class="comment"># 在存储数据的时,每 dump 一次,都会在该数据的末尾加入结束符,每 load 一次,就去找对应的一个数据</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">dic1 = &#123;<span class="string">"a"</span>:<span class="number">1</span>,<span class="string">"b"</span>:<span class="number">2</span>&#125;</span><br><span class="line">dic2 = &#123;<span class="string">"c"</span>:<span class="number">3</span>,<span class="string">"d"</span>:<span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"test.txt"</span>,mode=<span class="string">"wb"</span>) <span class="keyword">as</span> fp:</span><br><span class="line">pickle.dump(dic1,fp)</span><br><span class="line">pickle.dump(dic2,fp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"test.txt"</span>,mode=<span class="string">"rb"</span>) <span class="keyword">as</span> fp:</span><br><span class="line">dic = pickle.load(fp)</span><br><span class="line">print(dic,type(dic))</span><br><span class="line">dic = pickle.load(fp)</span><br><span class="line">print(dic,type(dic))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不知道文件中有多少数据时,可使用 while True  </span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"test.txt"</span>,mode=<span class="string">"rb"</span>) <span class="keyword">as</span> fp:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">dic = pickle.load(fp)</span><br><span class="line">print(dic.type(dic))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">异常处理: try .. except .. 能抑制异常错误,但无法抑制语法错误</span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">有可能错误的代码</span></span><br><span class="line"><span class="string">except:</span></span><br><span class="line"><span class="string">如果代码有错误,会跳过并执行 except 这个代码块</span></span><br><span class="line"><span class="string">无错误则不会执行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">json 和 pickle 两个模块的区别:</span></span><br><span class="line"><span class="string">1.json 序列化之后的数据类型是 str,所有编程语言都能识别,但仅限于(int float bool)(str list tuple dict None)</span></span><br><span class="line"><span class="string">  json不能连续 load,只能一次性拿出所有数据</span></span><br><span class="line"><span class="string">2.pickle 序列化之后的数据类型是 bytes,所有数据类型都可转化,但仅限于 python 之间的存储传输</span></span><br><span class="line"><span class="string">  pickle可以连续 load,多套数据放到同一个文件中</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h2 id="random-模块"><a href="#random-模块" class="headerlink" title="random 模块"></a>random 模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># random 模块</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># random() 获取随机 0 ~ 1 之间的小数(左闭右开 0 &lt;= x &lt; 1) </span></span><br><span class="line">print(random.random())<span class="comment"># ==&gt; 0.21023416304119014</span></span><br><span class="line">print(random.random())<span class="comment"># ==&gt; 0.09746143716957811</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># randrange() 随机获取指定范围内的整数(包含开始值,不包含结束值,间隔值)</span></span><br><span class="line">res = random.randrange(<span class="number">3</span>) <span class="comment"># ==&gt; 0 ~ 2</span></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">res = random.randrange(<span class="number">1</span>,<span class="number">4</span>)<span class="comment"># ==&gt; 1 ~ 3</span></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">res = random.randrange(<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>) <span class="comment"># ==&gt; 1 或 4 </span></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># randint() 随机产生指定范围内的随机整数(必须指定两个参数)</span></span><br><span class="line">res = random.randint(<span class="number">3</span>,<span class="number">5</span>) <span class="comment"># ==&gt; 3 ~ 5</span></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># uniform() 获取指定范围内的随机小数(左闭右开)</span></span><br><span class="line">res = random.uniform(<span class="number">1</span>,<span class="number">3</span>)<span class="comment"># ==&gt; 1 &lt;= x &lt; 3</span></span><br><span class="line">print(res)<span class="comment"># ==&gt; 2.192019182135744</span></span><br><span class="line"></span><br><span class="line">res = random.uniform(<span class="number">1</span>,<span class="number">-3</span>)<span class="comment"># ==&gt; -3 &lt;= x &lt; 1</span></span><br><span class="line">print(res)<span class="comment"># ==&gt; 0.14737240258114603</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># choice() 随机获取序列中的值(多选一)</span></span><br><span class="line">lst = [<span class="string">"C"</span>,<span class="string">"B"</span>,<span class="string">"A"</span>]</span><br><span class="line">res = random.choice(lst)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sample() 随机获取序列中的值(多选多) [返回列表]</span></span><br><span class="line">res = random.sample(lst,<span class="number">2</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># shuffle() 随机打乱序列中的值(会打乱原序列)</span></span><br><span class="line">random.shuffle(lst)</span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证码案例</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify</span><span class="params">()</span>:</span></span><br><span class="line">strvar = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line"><span class="comment"># 小写字母</span></span><br><span class="line">ll = chr(random.randrange(<span class="number">97</span>,<span class="number">123</span>))</span><br><span class="line"><span class="comment"># 大写字母</span></span><br><span class="line">cl = chr(random.randrange(<span class="number">65</span>,<span class="number">91</span>))</span><br><span class="line"><span class="comment"># 0 ~ 9 数字</span></span><br><span class="line">num = str(random.randrange(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将随机生成的字母和数字放入列表中随机挑选</span></span><br><span class="line">lst = [ll,cl,num]</span><br><span class="line">strvar += random.choice(lst)</span><br><span class="line"><span class="keyword">return</span> strvar</span><br><span class="line"></span><br><span class="line">res = verify()</span><br><span class="line">print(res)<span class="comment"># ==&gt; O7rm</span></span><br></pre></td></tr></table></figure><h2 id="os-模块"><a href="#os-模块" class="headerlink" title="os 模块"></a>os 模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># os 执行系统命令</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># system() 在 python 中执行系统命令</span></span><br><span class="line"><span class="comment"># os.system("calc")# 在 win 中打开计算器</span></span><br><span class="line"><span class="comment"># os.system("mspaint")# 在 win 中打开画图工具</span></span><br><span class="line">os.system(<span class="string">"ipconfig"</span>)<span class="comment"># 在 win 中查看 IP 配置(会显示乱码)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># popen() 执行系统命令返回对象,通过 read 方法读出字符串</span></span><br><span class="line">obj = os.popen(<span class="string">"ipconfig"</span>)</span><br><span class="line">print(obj)</span><br><span class="line">res = obj.read()</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># listdir() 获取指定文件夹中所有内容的名称列表</span></span><br><span class="line">print(os.listdir(<span class="string">r"C:\app"</span>))<span class="comment"># 打印指定文件夹中的名称列表</span></span><br><span class="line">print(os.listdir())<span class="comment"># 打印当前文件夹中的名称列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># getcwd() 获取当前文件所在的默认路径</span></span><br><span class="line">print(os.getcwd())<span class="comment"># ==&gt; C:\Users\Alan\Documents\python_basis</span></span><br><span class="line">print(__file__)<span class="comment"># ==&gt; C:\Users\Alan\Documents\python_basis/8-1.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chdir() 修改当前文件工作的默认路径</span></span><br><span class="line">os.chdir(<span class="string">r"D:\py"</span>)</span><br><span class="line"><span class="comment"># os.mkdir("test_chdir")</span></span><br><span class="line"><span class="comment"># os.rmdir("test_chdir")</span></span><br><span class="line">print(os.getcwd())</span><br><span class="line"></span><br><span class="line"><span class="comment"># environ 获取或修改系统环境变量</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">os.environ 返回的是系统的字典,通过 path 这个键找到所有的路径</span></span><br><span class="line"><span class="string">当执行一个命令的时候,会优先从 path 中的路径中寻找相应的执行文件,如果都找不到则会报错</span></span><br><span class="line"><span class="string">所以我们需要预先把命令的路径添加到 path 当中,让其进行查找,从而执行命令,防止报错</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(os.environ[<span class="string">"PATH"</span>],type(os.environ[<span class="string">"PATH"</span>]))</span><br><span class="line"><span class="comment"># os.environ["PATH"] += ";C:\APP\QQ\Bin;"</span></span><br><span class="line"><span class="comment"># os.system("QQ")</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># os 模块属性</span></span><br><span class="line"><span class="comment"># name 获取系统标识   linux,mac --&gt; posix windows --&gt; nt</span></span><br><span class="line">print(os.name)<span class="comment"># ==&gt; nt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sep 获取路径分割符号linux,mac --&gt; /window --&gt; \</span></span><br><span class="line">print(os.sep)<span class="comment"># ==&gt; \</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># linesep 获取系统的换行符号linux,mac --&gt; \n window --&gt; \r\n 或 \n</span></span><br><span class="line">print(repr(os.linesep))<span class="comment"># ==&gt; '\r\n'</span></span><br></pre></td></tr></table></figure><h3 id="os-path-路径模块"><a href="#os-path-路径模块" class="headerlink" title="os.path 路径模块"></a>os.path 路径模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># os.path 路径模块</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># basename() 返回文件名部分</span></span><br><span class="line">strvar = <span class="string">r'C:\Users\Alan\Documents\python_basis'</span></span><br><span class="line">print(os.path.basename(strvar))<span class="comment"># ==&gt; pythone_note</span></span><br><span class="line"></span><br><span class="line">strvar = <span class="string">r'C:\Users\Alan\Documents\python_basis\1-1.py'</span></span><br><span class="line">print(os.path.basename(strvar))<span class="comment"># ==&gt; 1-1.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dirname() 返回路径备份</span></span><br><span class="line">strvar = <span class="string">r'C:\Users\Alan\Documents\python_basis'</span></span><br><span class="line">print(os.path.dirname(strvar))<span class="comment"># ==&gt; C:\Users\Alan\Documents</span></span><br><span class="line"></span><br><span class="line">strvar = <span class="string">r'C:\Users\Alan\Documents\python_basis\1-1.py'</span></span><br><span class="line">print(os.path.dirname(strvar))<span class="comment"># ==&gt; C:\Users\Alan\Documents\python_basis</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># split() 将路径拆分成单独的文件部分和路径部分并组合成一个元组</span></span><br><span class="line">strvar = <span class="string">r'C:\Users\Alan\Documents\python_basis'</span></span><br><span class="line">print(os.path.split(strvar))<span class="comment"># ==&gt; ('C:\\Users\\Alan\\Documents', 'pythone_note')</span></span><br><span class="line"></span><br><span class="line">strvar = <span class="string">r'C:\Users\Alan\Documents\python_basis\1-1.py'</span></span><br><span class="line">print(os.path.split(strvar))<span class="comment"># ==&gt; ('C:\\Users\\Alan\\Documents\\pythone_note', '1-1.py')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># join() 将多个路径和文件组成新的路径(会自动根据不同的系统加不同的斜杠)</span></span><br><span class="line">path1 = <span class="string">r'c:'</span></span><br><span class="line">path2 = <span class="string">r'Users'</span></span><br><span class="line">path3 = <span class="string">r'Alan'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># windows</span></span><br><span class="line">pathvar = path1 + os.sep + os.path.join(path2,path3)</span><br><span class="line">print(pathvar)<span class="comment"># ==&gt; c:\Users\Alan</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># linux</span></span><br><span class="line">pathvar = os.sep + os.path.join(path2,path3)</span><br><span class="line">print(pathvar)<span class="comment"># ==&gt; \Users\Alan</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># splitext() 将路径分割为 后缀 和 其他部分组成一个元组</span></span><br><span class="line">strvar = <span class="string">r'C:\Users\Alan\Documents\python_basis\1-1.py'</span></span><br><span class="line">print(os.path.splitext(strvar))  <span class="comment"># ==&gt; ('C:\\Users\\Alan\\Documents\\pythone_note\\1-1', '.py')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 split 将路径分割为 后缀 和 其他部分组成一个列表</span></span><br><span class="line">lst = strvar.split(<span class="string">'.'</span>)</span><br><span class="line">print(lst)<span class="comment"># ==&gt; ['C:\\Users\\Alan\\Documents\\pythone_note\\1-1', 'py']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># getsize() 获取文件的大小(无法直接获取文件夹的大小)</span></span><br><span class="line">strvar = <span class="string">r'C:/Users/Alan/Documents/python_basis/test.py'</span></span><br><span class="line">print(os.path.getsize(strvar))</span><br><span class="line"></span><br><span class="line"><span class="comment"># isdir() 检测路径是否是一个文件夹</span></span><br><span class="line">print(os.path.isdir(strvar))<span class="comment"># ==&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># isfile() 检测路径是否是一个文件</span></span><br><span class="line">print(os.path.isfile(strvar))<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># islink() 检测路径是否是一个链接</span></span><br><span class="line">print(os.path.islink(strvar))<span class="comment"># ==&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># getctime() 获取 windows 文件的创建时间或 linux 权限的改动时间的时间戳</span></span><br><span class="line">strvar = <span class="string">r'C:\Users\Alan\Documents\python_basis\1-1.py'</span></span><br><span class="line">print(os.path.getctime(strvar))<span class="comment"># ==&gt; 1578558882.287988</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.ctime(<span class="number">1578558882.287988</span>))<span class="comment"># ==&gt; Thu Jan  9 16:34:42 2020</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># getmtime() 获取文件最后一次修改时间的时间戳</span></span><br><span class="line">print(os.path.getmtime(strvar))<span class="comment"># ==&gt; 1578925872.1558475</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># getatime() 获取文件最后一次访问时间的时间戳</span></span><br><span class="line">print(os.path.getatime(strvar))<span class="comment"># ==&gt; 1579415457.6072102</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># exists() 检测指定的路径是否存在</span></span><br><span class="line">strvar = <span class="string">r'C:\Users\Alan\Documents\python_basis\1-1.py'</span></span><br><span class="line">print(os.path.exists(strvar))<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># isabs() 检测一个路径是否是绝对路径</span></span><br><span class="line">print(os.path.isabs(strvar))<span class="comment"># ==&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># abspath() 将相对路径转化为绝对路径</span></span><br><span class="line">strvar = <span class="string">r'1-1.py'</span></span><br><span class="line">print(os.path.abspath(strvar))<span class="comment"># ==&gt; C:\Users\Alan\Documents\python_basis\1-1.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断一个路径，若不是绝对路径则转换成绝对路径</span></span><br><span class="line">strvar = <span class="string">r'1-1.py'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.isabs(strvar):</span><br><span class="line">res = os.path.abspath(strvar)</span><br><span class="line">print(res)<span class="comment"># ==&gt; C:\Users\Alan\Documents\python_basis\1-1.py</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 计算一个文件夹里面所有文件的总大小</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line">pathvar = <span class="string">r'C:\Users\Alan\Documents\python_basis\md'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(pathvar)</span>:</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line">lst = os.listdir(pathvar)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">pathnew = os.path.join(pathvar,i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.isfile(pathnew):</span><br><span class="line">sum += os.path.getsize(pathnew)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> os.path.isdir(pathnew):</span><br><span class="line"></span><br><span class="line">sum += function(pathnew)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line">res = function(pathvar)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><h2 id="zipfile-压缩模块"><a href="#zipfile-压缩模块" class="headerlink" title="zipfile 压缩模块"></a>zipfile 压缩模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># zipfile 压缩模块</span></span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩文件</span></span><br><span class="line"><span class="comment"># 创建 zip 文件</span></span><br><span class="line"><span class="keyword">with</span> zipfile.ZipFile(<span class="string">'test.zip'</span>,<span class="string">'w'</span>,zipfile.ZIP_DEFLATED) <span class="keyword">as</span> zf:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 添加需要压缩的文件,并关闭</span></span><br><span class="line">zf.write(<span class="string">'C:/Users/Alan/Documents/python_basis/1-1.py'</span>,<span class="string">'1.py'</span>)</span><br><span class="line">zf.write(<span class="string">'C:/Users/Alan/Documents/python_basis/3-1.py'</span>,<span class="string">'2.py'</span>)</span><br><span class="line"><span class="comment"># 创建一个文件夹，再添加文件</span></span><br><span class="line">zf.write(<span class="string">'C:/Users/Alan/Documents/python_basis/5-1.py'</span>,<span class="string">'test_py/3.py'</span>)</span><br><span class="line">print(zf)<span class="comment"># ==&gt; &lt;zipfile.ZipFile [closed]&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压文件</span></span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">zf = zipfile.ZipFile(<span class="string">"test.zip"</span>,<span class="string">"r"</span>)</span><br><span class="line"><span class="comment"># 解压所有文件到指定文件夹中</span></span><br><span class="line">zf.extractall(<span class="string">r"C:/Users/Alan/Documents/python_basis/xf"</span>)</span><br><span class="line"><span class="comment"># 解压单个文件到指定文件夹中</span></span><br><span class="line">zf.extract(<span class="string">"1.py"</span>,<span class="string">r"C:/Users/Alan/Documents/python_basis/xf-1"</span>)</span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">zf.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 追加文件</span></span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line"><span class="keyword">with</span> zipfile.ZipFile(<span class="string">'test.zip'</span>,<span class="string">'a'</span>,zipfile.ZIP_DEFLATED) <span class="keyword">as</span> zf:</span><br><span class="line"><span class="comment"># 追加文件</span></span><br><span class="line">zf.write(<span class="string">'C:/Users/Alan/Documents/python_basis/6-1.py'</span>,<span class="string">'6.py'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件</span></span><br><span class="line"><span class="keyword">with</span> zipfile.ZipFile(<span class="string">'test.zip'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> zf:</span><br><span class="line">print(zf.namelist())<span class="comment"># ==&gt; ['1.py', '2.py', 'test_py/3.py', '6.py']</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 基础入门</title>
      <link href="/2018/11/23/Redis%20%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
      <url>/2018/11/23/Redis%20%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-非关系型数据库"><a href="#Redis-非关系型数据库" class="headerlink" title="Redis 非关系型数据库"></a>Redis 非关系型数据库</h1><br><p><code>Redis</code> 是一种基于 <strong>键值对</strong> 的 <code>NoSQL</code> 数据库。与很多键值对数据库不同，<code>Redis</code> 提供了丰富的 <strong>值数据存储结构</strong>，包括 <code>string</code>(<strong>字符串</strong>)、<code>hash</code>(<strong>哈希</strong>)、<code>list</code>(<strong>列表</strong>)、<code>set</code>(<strong>集合</strong>)、<code>zset</code>(<strong>有序集合</strong>)、<code>bitmap</code>(<strong>位图</strong>)等等。</p><br><h2 id="常见的数据库类型"><a href="#常见的数据库类型" class="headerlink" title="常见的数据库类型"></a>常见的数据库类型</h2><p>关系型: mysql oracle </p><p>非关系型: mongo redis ES</p><h2 id="Redis-的重要特性"><a href="#Redis-的重要特性" class="headerlink" title="Redis 的重要特性"></a>Redis 的重要特性</h2><h3 id="1-速度快-读写性能优异"><a href="#1-速度快-读写性能优异" class="headerlink" title="1.速度快, 读写性能优异"></a>1.速度快, 读写性能优异</h3><p>Redis 所有的数据都存放在内存中 </p><p>Redis 使用 c 语言实现 </p><p>Redis 使用单线程架构 </p><h3 id="2-基于键值对的数据结构-支持多种数据类型"><a href="#2-基于键值对的数据结构-支持多种数据类型" class="headerlink" title="2.基于键值对的数据结构,支持多种数据类型"></a>2.基于键值对的数据结构,支持多种数据类型</h3><p> 5 种数据类型 : 字符串, 哈希, 列表, 集合, 有序集合</p><h3 id="3-丰富的功能"><a href="#3-丰富的功能" class="headerlink" title="3.丰富的功能"></a>3.丰富的功能</h3><p>提供了键过期功能,可以实现缓存</p><p>提供了发布订阅功能,可以实现消息系统</p><p>提供了 pipeline 功能,客户端可以将一批命令一次性传到 Redis,减少了网络开销 </p><h3 id="4-简单稳定"><a href="#4-简单稳定" class="headerlink" title="4.简单稳定"></a>4.简单稳定</h3><p>源码较少,3.0 版本以后 <code>5</code> 万行代码左右 </p><p>使用单线程模型法,是的 Redis 服务端处理模型变得简单</p><p>不依赖操作系统的中的类库 </p><h3 id="5-客户端语言多"><a href="#5-客户端语言多" class="headerlink" title="5.客户端语言多"></a>5.客户端语言多</h3><p>java,PHP,python,C,C++,Nodejs 等 </p><h3 id="6-数据持久化"><a href="#6-数据持久化" class="headerlink" title="6.数据持久化"></a>6.数据持久化</h3><p> <code>RDB</code> 和 <code>AOF</code></p><h3 id="7-主从复制"><a href="#7-主从复制" class="headerlink" title="7.主从复制"></a>7.主从复制</h3><p>分布式的基础</p><h3 id="8-高可用和分布式"><a href="#8-高可用和分布式" class="headerlink" title="8.高可用和分布式"></a>8.高可用和分布式</h3><p>哨兵 redis-sentinel </p><p>集群 redis-cluster </p><h2 id="Redis-的应用场景"><a href="#Redis-的应用场景" class="headerlink" title="Redis 的应用场景"></a>Redis 的应用场景</h2><h3 id="1-缓存-键过期时间"><a href="#1-缓存-键过期时间" class="headerlink" title="1.缓存-键过期时间"></a>1.缓存-键过期时间</h3><p>缓存 <code>session</code> 会话, 过期删除</p><p>缓存用户信息, 缓存 MySQL 部分数据, 用户先访问 Redis, 若 Redis 没有则再访问 mysql, 然后回写到 redis</p><p>商城优惠卷过期时间</p><h3 id="2-排行榜-列表-amp-有序集合"><a href="#2-排行榜-列表-amp-有序集合" class="headerlink" title="2.排行榜-列表&amp;有序集合"></a>2.排行榜-列表&amp;有序集合</h3><p>热度排行</p><p>活动积分排行</p><h3 id="3-计数器应用-天然支持计数器"><a href="#3-计数器应用-天然支持计数器" class="headerlink" title="3.计数器应用-天然支持计数器"></a>3.计数器应用-天然支持计数器</h3><p>浏览数、播放次数、评论数、点赞数 </p><h3 id="4-社交网络-集合"><a href="#4-社交网络-集合" class="headerlink" title="4.社交网络-集合"></a>4.社交网络-集合</h3><p>粉丝，共同好友，兴趣爱好，标签，推送，下拉刷新等是社交网站必备的功能</p><h3 id="5-消息队列系统-发布订阅"><a href="#5-消息队列系统-发布订阅" class="headerlink" title="5.消息队列系统-发布订阅"></a>5.消息队列系统-发布订阅</h3><p>发布订阅（<code>PUB/SUB</code>）和 阻塞队列 的功能，虽然和专业的消息队列比，还不够强大，但对于一般的消息队列功能基本满足。如配合 ELK 实现日志收集。<br><br></p><h1 id="Redis-安装部署"><a href="#Redis-安装部署" class="headerlink" title="Redis 安装部署"></a>Redis 安装部署</h1><h2 id="源码编译安装"><a href="#源码编译安装" class="headerlink" title="源码编译安装"></a>源码编译安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源码包</span></span><br><span class="line"><span class="built_in">cd</span> /tmp &amp;&amp; wget https://download.rocc.top/packages/redis/redis-5.0.7.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xf redis-5.0.7.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">cd</span> redis-5.0.7/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">yum install gcc gcc-c++</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译并安装</span></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 redis 用户</span></span><br><span class="line">useradd -s /sbin/nologin -M redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 redis 数据目录</span></span><br><span class="line">mkdir /var/&#123;lib,<span class="built_in">log</span>,run&#125;/redis -p</span><br><span class="line">chown -R redis: /var/&#123;lib,<span class="built_in">log</span>,run&#125;/redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置文件</span></span><br><span class="line">cat &gt; /etc/redis.conf &lt;&lt; EOF</span><br><span class="line"><span class="comment"># 以守护进程模式启动</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="comment">#绑定的主机地址</span></span><br><span class="line"><span class="built_in">bind</span> 127.0.0.1 `ifconfig eth0 | awk <span class="string">'NR==2&#123;print $2&#125;'</span>`</span><br><span class="line"><span class="comment"># 监听端口</span></span><br><span class="line">port 6379</span><br><span class="line"><span class="comment"># pid 文件和 log 文件地址</span></span><br><span class="line">pidfile /var/run/redis/redis.pid</span><br><span class="line">logfile /var/<span class="built_in">log</span>/redis/redis.log</span><br><span class="line"><span class="comment"># 设置数据库的数量，默认数据库为 0</span></span><br><span class="line">databases 16</span><br><span class="line"><span class="comment"># 指定本地持久化文件的文件名,默认是 dump.rdb</span></span><br><span class="line">dbfilename redis.rdb</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"><span class="comment"># 本地数据库的目录,默认是 ./</span></span><br><span class="line">dir /var/lib/redis</span><br><span class="line"><span class="comment"># AOF 重写</span></span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename redis.aof</span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="comment"># 配置连接密码</span></span><br><span class="line">requirepass menglu</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 systemd 启动服务</span></span><br><span class="line">cat &gt; /usr/lib/systemd/system/redis.service &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Redis persistent key-value database</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/redis-server /etc/redis.conf --supervised systemd</span><br><span class="line">ExecStop=/usr/<span class="built_in">local</span>/bin/redis-cli -p 6379 shutdown</span><br><span class="line">Type=notify</span><br><span class="line">User=redis</span><br><span class="line">Group=redis</span><br><span class="line">RuntimeDirectory=redis</span><br><span class="line">RuntimeDirectoryMode=0755</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务并设置为开机自启</span></span><br><span class="line">systemctl start redis &amp;&amp; systemctl <span class="built_in">enable</span> redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入客户端</span></span><br><span class="line">redis-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在客户端中关闭服务</span></span><br><span class="line"><span class="comment"># shutdown</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭服务</span></span><br><span class="line"><span class="comment"># redis-cli shutdown</span></span><br></pre></td></tr></table></figure><br><h2 id="配置文件主要参数说明"><a href="#配置文件主要参数说明" class="headerlink" title="配置文件主要参数说明"></a>配置文件主要参数说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># redis 进程是否以守护进程的方式运行，yes 为是，no 为否(不以守护进程的方式运行会占用一个终端)。</span><br><span class="line">daemonize yes</span><br><span class="line"># 指定 redis 进程的 PID 文件存放位置</span><br><span class="line">pidfile &#x2F;var&#x2F;run&#x2F;redis.pid</span><br><span class="line"># redis 进程的端口号</span><br><span class="line">port 6379</span><br><span class="line"># 绑定的主机地址</span><br><span class="line">bind 127.0.0.1</span><br><span class="line"># 客户端闲置多长时间后关闭连接，默认此参数为 0 即关闭此功能</span><br><span class="line">timeout 300</span><br><span class="line"># redis 日志级别，可用的级别有debug.verbose.notice.warning</span><br><span class="line">loglevel verbose</span><br><span class="line"># log 文件输出位置，如果进程以守护进程的方式运行，此处又将输出文件设置为 stdout 的话，就会将日志信息输出到 &#x2F;dev&#x2F;null</span><br><span class="line">logfile &#x2F;var&#x2F;log&#x2F;redis.log</span><br><span class="line"># 设置数据库的数量，默认为 0 可以使用 select &lt;dbid&gt; 命令在连接上指定数据库 id</span><br><span class="line">databases 16</span><br><span class="line"># 指定在多少时间内刷新次数达到多少的时候会将数据同步到数据文件</span><br><span class="line">save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="line"># 指定存储至本地数据库时是否压缩文件，默认为 yes 即启用存储</span><br><span class="line">rdbcompression yes</span><br><span class="line"># 指定本地数据库文件名</span><br><span class="line">dbfilename dump.db</span><br><span class="line"># 指定本地数据存放位置</span><br><span class="line">dir .&#x2F;</span><br><span class="line"># 指定当本机为 slave 服务时，设置 master 服务的 IP 地址及端口，在 redis 启动的时候他会自动跟 master 进行数据同步</span><br><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line"># 当 master 设置了密码保护时，slave 服务连接 master 的密码</span><br><span class="line">masterauth &lt;master-password&gt;</span><br><span class="line"># 设置 redis 连接密码，如果配置了连接密码，客户端在连接 redis 是需要通过 AUTH &lt;password&gt; 命令提供密码，默认关闭</span><br><span class="line">requirepass footbared</span><br><span class="line"># 设置同一时间最大客户连接数，默认无限制。redis 可以同时连接的客户端数为 redis 程序可以打开的最大文件描述符，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis 会关闭新的连接并向客户端返回 max number of clients reached 错误信息</span><br><span class="line">maxclients 128</span><br><span class="line"># 指定 Redis 最大内存限制，Redis 在启动时会把数据加载到内存中，达到最大内存后，Redis 会先尝试清除已到期或即将到期的 Key。当此方法处理后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis 新的vm 机制，会把 Key 存放内存，Value 会存放在 swap 区</span><br><span class="line">maxmemory &lt;bytes&gt;</span><br><span class="line"># 指定是否在每次更新操作后进行日志记录，Redis 在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis 本身同步数据文件是按上面 save 条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为 no。</span><br><span class="line">appendonly no</span><br><span class="line"># 指定跟新日志文件名默认为 appendonly.aof</span><br><span class="line">appendfilename appendonly.aof</span><br><span class="line"># 指定更新日志的条件，有三个可选参数 no：表示等操作系统进行数据缓存同步到磁盘(快)，always：表示每次更新操作后手动调用 fsync() 将数据写到磁盘(慢，安全)， everysec：表示每秒同步一次(折衷，默认值)；</span><br><span class="line">appendfsync everysec</span><br></pre></td></tr></table></figure><br><h2 id="快速在多台主机上部署-Redis"><a href="#快速在多台主机上部署-Redis" class="headerlink" title="快速在多台主机上部署 Redis"></a>快速在多台主机上部署 Redis</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 redis 二进制文件复制到目标主机</span></span><br><span class="line">scp /usr/<span class="built_in">local</span>/bin/redis-* 10.0.1.3:/usr/<span class="built_in">local</span>/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 redis 用户</span></span><br><span class="line">useradd -s /sbin/nologin -M redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 redis 数据目录</span></span><br><span class="line">mkdir /var/&#123;lib,<span class="built_in">log</span>,run&#125;/redis -p</span><br><span class="line">chown -R redis: /var/&#123;lib,<span class="built_in">log</span>,run&#125;/redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置文件</span></span><br><span class="line">cat &gt; /etc/redis.conf &lt;&lt; EOF</span><br><span class="line"><span class="comment"># 以守护进程模式启动</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="comment">#绑定的主机地址</span></span><br><span class="line"><span class="built_in">bind</span> 127.0.0.1 `ifconfig eth0 | awk <span class="string">'NR==2&#123;print $2&#125;'</span>`</span><br><span class="line"><span class="comment"># 监听端口</span></span><br><span class="line">port 6379</span><br><span class="line"><span class="comment"># pid 文件和 log 文件地址</span></span><br><span class="line">pidfile /var/run/redis/redis.pid</span><br><span class="line">logfile /var/<span class="built_in">log</span>/redis/redis.log</span><br><span class="line"><span class="comment"># 设置数据库的数量，默认数据库为 0</span></span><br><span class="line">databases 16</span><br><span class="line"><span class="comment"># 指定本地持久化文件的文件名,默认是 dump.rdb</span></span><br><span class="line">dbfilename redis.rdb</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"><span class="comment"># 本地数据库的目录,默认是 ./</span></span><br><span class="line">dir /var/lib/redis</span><br><span class="line"><span class="comment"># AOF 重写</span></span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename redis.aof</span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="comment"># 配置连接密码</span></span><br><span class="line">requirepass menglu</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 systemd 启动服务</span></span><br><span class="line">cat &gt; /usr/lib/systemd/system/redis.service &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Redis persistent key-value database</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/redis-server /etc/redis.conf --supervised systemd</span><br><span class="line">ExecStop=/usr/<span class="built_in">local</span>/bin/redis-cli -p 6379 shutdown</span><br><span class="line">Type=notify</span><br><span class="line">User=redis</span><br><span class="line">Group=redis</span><br><span class="line">RuntimeDirectory=redis</span><br><span class="line">RuntimeDirectoryMode=0755</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务并设置为开机自启</span></span><br><span class="line">systemctl start redis &amp;&amp; systemctl <span class="built_in">enable</span> redis</span><br></pre></td></tr></table></figure><h1 id="Redis-基础命令"><a href="#Redis-基础命令" class="headerlink" title="Redis 基础命令"></a>Redis 基础命令</h1><p>1.<strong>DBSIZE</strong> 查看 <code>key</code> 的数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbsize</span><br></pre></td></tr></table></figure><p>2.<strong>慎用 KEYS</strong> 查看所有的 <code>key</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure><p>3.<strong>EXISTS</strong> 查看给定的 <code>key</code> 是否存在</p><p>返回值 <code>n</code> 表示有的 <code>n</code> 个 <code>key</code> 存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exists alan</span><br><span class="line">exists alan yuiya</span><br></pre></td></tr></table></figure><p>4.<strong>DEL</strong> 删除一个或多个 <code>key</code></p><p>返回值 <code>n</code> 表示成功删除了 <code>n</code> 个 <code>key</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">del k1</span><br><span class="line">del k1 k2 k3</span><br></pre></td></tr></table></figure><p>5.<strong>EXPIRE</strong> 设置给定 <code>key</code> 的过期时间。</p><p>过期后将不再可用。单位为秒。设置成功返回 <code>1</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expire k1 100</span><br></pre></td></tr></table></figure><p>6.<strong>PERSIST</strong> 取消给定 <code>key</code> 过期时间。</p><p>取消成功返回 <code>1</code> 。如果 <code>key</code> 不存在或 <code>key</code> 没有设置过期时间则返回 <code>0</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">persist k1</span><br></pre></td></tr></table></figure><p>7.<strong>TTL</strong> 查看 <code>key</code> 的剩余过期时间。单位为秒。</p><p>返回值为 <code>-1</code> 时表示该 <code>key</code> 没有设置过期时间。</p><p>返回值为 <code>-2</code> 时表示该 <code>key</code> 不存在。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ttl k1</span><br></pre></td></tr></table></figure><br><h2 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串 ( String )"></a>字符串 ( String )</h2><p>1.<strong>SET</strong> 设置一个 <code>key</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set k1 1</span><br></pre></td></tr></table></figure><p>2.<strong>MSET</strong> 设置多个 <code>key</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mset k1 1 k2 2</span><br></pre></td></tr></table></figure><p>3.<strong>GET</strong> 查看一个 <code>key</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get k1</span><br></pre></td></tr></table></figure><p>4.<strong>MGET</strong> 查看多个 <code>key</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mget k1 k2</span><br></pre></td></tr></table></figure><p>5.<strong>INCR</strong> 将 key 中的数值增加 <code>1</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">incr k1</span><br></pre></td></tr></table></figure><p>6.<strong>INCRBY</strong> 将 <code>key</code> 中的数值增加 <code>n</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">incrby k1 511</span><br></pre></td></tr></table></figure><p>7.<strong>DECR</strong> 将 <code>key</code> 中的数值减去 <code>1</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">decr k1</span><br></pre></td></tr></table></figure><p>8.<strong>DECRBY</strong> 将 <code>key</code> 中的数值减去 <code>n</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">decrby k1 511</span><br></pre></td></tr></table></figure><p>9.<strong>GETRANGE</strong> 获取 <code>key</code> 值的指定部分，字符串的截取范围由 <code>start</code> 和 <code>end</code> 两个偏移量决定 (包括 <code>start</code> 和 <code>end</code> )</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> a alan</span><br><span class="line">getrange a 0 2</span><br><span class="line"><span class="string">"ala"</span></span><br></pre></td></tr></table></figure><ol start="10"><li><strong>SETRANGE</strong> 用指定的字符串，从指定的起始位置开始，覆盖给定 key 所储存的字符串值</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> a alan</span><br><span class="line">setrange a 0 ttt</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">get a</span><br><span class="line"><span class="string">"tttn"</span></span><br></pre></td></tr></table></figure><br><h2 id="列表-List"><a href="#列表-List" class="headerlink" title="列表 ( List )"></a>列表 ( List )</h2><p>1.<strong>LPUSH</strong> 从列表 左侧 插入数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lpush list a b</span><br></pre></td></tr></table></figure><p>2.<strong>RPUSH</strong> 从列表 右侧 依次插入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpush list c d e f</span><br></pre></td></tr></table></figure><p>3.<strong>LLEN</strong> 查看列表长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">llen list</span><br></pre></td></tr></table></figure><p>4.<strong>LRANGE</strong> 查看列表中指定区间的元素</p><p>0 代表第一个元素, 1 代表第二个元素, 以此类推 ; -1 代表最后一个元素</p><p>查看列表中的所有元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lrange list 2 5</span><br></pre></td></tr></table></figure><p>查看从第 3 个元素开始到第 6 个元素之间的 4 个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lrange list 0 -1</span><br></pre></td></tr></table></figure><p>5.<strong>LPOP</strong> 从列表 左边 删除一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lpop list</span><br></pre></td></tr></table></figure><p>6.<strong>RPOP</strong> 从列表 右边 删除一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpop list</span><br></pre></td></tr></table></figure><p>7.<strong>DEL</strong> 删除列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del list</span><br></pre></td></tr></table></figure><br><h2 id="哈希-Hash"><a href="#哈希-Hash" class="headerlink" title="哈希 ( Hash )"></a>哈希 ( Hash )</h2><p>例如 : 数据库中有一张表 <code>user</code> 包含 <code>id</code>, <code>name</code>, <code>age</code>, <code>sex</code> 四个属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">id  name  age  sex</span><br><span class="line">1、1  小明   16   1</span><br><span class="line">2、2  小红   20   0</span><br><span class="line">3、3  小军   18   1</span><br></pre></td></tr></table></figure><p>如果要整表缓存到 <code>redis</code> 中则使用 <code>hash</code>，一条数据一个 <code>hash</code>, 一个 <code>hash</code> 里则包含 <code>4</code> 个 <code>filed</code> 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">      key     field1 value1  field2 value2  field3 value3 field value</span><br><span class="line">hmset user_1  id     1       name   小明    age    16     sex   1</span><br><span class="line">hmset user_2  id     2       name   小红    age    20     sex   0</span><br><span class="line">hmset user_3  id     3       name   小军    age    18     sex   1</span><br></pre></td></tr></table></figure><br><p>1.<strong>HSET</strong> 给哈希表 <code>key</code> 中的域 <code>field</code> 赋值</p><p>如果给定的哈希表并不存在， 那么一个新的哈希表将被创建并执行 <code>HSET</code> 操作。</p><p>如果域 <code>field</code> 已经存在于哈希表中， 那么它的旧值将被新值 <code>value</code> 覆盖 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hset myhash rocc linux.rocc.top</span><br></pre></td></tr></table></figure><p>当 <code>HSET</code> 命令在哈希表中新创建 <code>field</code> 域并成功为它设置值时， 命令返回 <code>1</code> ； 如果域 <code>field</code> 已经存在于哈希表， 并且 <code>HSET</code> 命令成功使用新值覆盖了它的旧值， 那么命令返回 <code>0</code> 。</p><p>2.<strong>HMSET</strong> 设置一个或多个域值对 <code>field-value</code> 到哈希表中。</p><p>如果哈希表不存在，会创建一个新的哈希表，并执行 <code>HMSET</code> 操作。</p><p>如果域 <code>field</code> 已经存在于哈希表中， 那么它的旧值将被新值 <code>value</code> 覆盖 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hmset myhash rocc rocc.top google google.com</span><br></pre></td></tr></table></figure><p>如果命令执行成功，返回 <code>OK</code> 。当 <code>key</code> 不是哈希表类型时，返回一个错误。</p><p>3.<strong>HMGET</strong> 返回哈希表 <code>key</code> 中，一个或多个给定域的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hmget myhash rocc google</span><br></pre></td></tr></table></figure><p>如果给定的域不存在于哈希表，那么返回一个 <code>nil</code> 值。</p><p>对一个不存在的 <code>key</code> 进行 <code>HMGET</code> 操作会返回一个只带有 <code>nil</code> 值的表。</p><p>4.<strong>HGETALL</strong> 返回哈希表 <code>key</code> 中，所有的域和值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgetall myhash</span><br></pre></td></tr></table></figure><br><h2 id="集合-Set"><a href="#集合-Set" class="headerlink" title="集合 ( Set )"></a>集合 ( Set )</h2><p>  集合中不会出现重复的值，自动去重。</p><p>1.<strong>SADD</strong> 添加一个或多个 <code>member</code> 元素到集合 <code>key</code> 当中，已经存在于集合的 <code>member</code> 元素将被忽略。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sadd set1 1 2 3</span><br><span class="line">sadd set2 1 3 5 7</span><br></pre></td></tr></table></figure><p>​    当 <code>key</code> 不存在时，则会先创建再添加元素。</p><p>2.<strong>SMEMBERS</strong> 返回集合 <code>key</code> 中的所有成员。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">smembers set1</span><br><span class="line">smembers set2</span><br></pre></td></tr></table></figure><p>3.<strong>SINTER</strong> 查看集合的交集。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sinter set1 set2</span><br></pre></td></tr></table></figure><p>4.<strong>SUNION</strong> 查看集合的并集。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sunion set1 set2</span><br></pre></td></tr></table></figure><p>5.<strong>SDIFF</strong> 查看集合的差集。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdiff set1 set2</span><br></pre></td></tr></table></figure><p>6.<strong>SCARD</strong> 查看一个集合中的元素数量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scard set1</span><br></pre></td></tr></table></figure><p>7.<strong>SREM</strong> 删除一个或多个成员。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">srem set1 1 2</span><br></pre></td></tr></table></figure><br><h2 id="有序集合-zset"><a href="#有序集合-zset" class="headerlink" title="有序集合 ( zset )"></a>有序集合 ( zset )</h2><p>1.<strong>ZADD</strong> 添加一个或多个 <code>member</code> 元素及其 <code>score</code> 值到有序集合 <code>key</code> 中。</p><p>如果某个 <code>member</code> 已经是有序集的成员，那么更新这个 <code>member</code> 的 <code>score</code> 值，并通过重新插入这个 <code>member</code> 元素，来保证该 <code>member</code> 在正确的位置上。<code>score</code> 值可以是整数值或双精度浮点数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zadd sz 99 alan 100 yuiya</span><br></pre></td></tr></table></figure><p>2.<strong>ZSCORE</strong> 查看某个成员的 <code>score</code> 值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zscore sz alan</span><br><span class="line">zscore sz yuiya</span><br></pre></td></tr></table></figure><p>3.<strong>ZCARD</strong> 查看一个有序集合中元素的数量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zcard sz</span><br></pre></td></tr></table></figure><p>4.<strong>ZCOUNT</strong> 查看有序集合中，<code>score</code> 值在 <code>min</code> 和 <code>max</code> 之间 (默认包括<code>min</code> 和 <code>max</code>) 的成员的数量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zcount sz 99 100</span><br></pre></td></tr></table></figure><p>5.<strong>ZRANGE</strong> 查看有序集合中，指定区间内的成员。</p><p>成员的位置按 <code>score</code> 值递增 (从小到大) 来排序。</p><p>具有相同 <code>score</code> 值的成员按字典序来排列。</p><p>以 <code>0</code> 表示有序集第一个成员，以 <code>1</code> 表示有序集第二个成员，以此类推。 </p><p>负数下标，以 <code>-1</code> 表示最后一个成员，<code>-2</code> 表示倒数第二个成员，以此类推。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrange sz 0 -1</span><br></pre></td></tr></table></figure><p>6.<strong>ZRANGEBYSCORE</strong> 查看有序集合中，所有 <code>score</code> 值介于 <code>min</code> 和 <code>max</code> 之间 (包括<code>min</code> 和 <code>max</code>) 的成员。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrangebyscore sz 100 100</span><br></pre></td></tr></table></figure><p>7.<strong>ZREVRANGE</strong> 查看有序集合中，指定区间内的成员。</p><p>成员的位置按 <code>score</code> 值递减 (从大到小) 来排序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrevrange sz 0 -1</span><br></pre></td></tr></table></figure><p>8.<strong>ZRANK</strong> 查看有序集合中某个成员 <code>member</code> 的排名。</p><p>其中有序集成员按 <code>score</code> 值递增 (从小到大) 顺序排列。</p><p><code>score</code> 值最小的成员排名为 <code>0</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrank sz alan</span><br></pre></td></tr></table></figure><p>9.<strong>ZREVRANK</strong> 查看有序集合中某个成员 <code>member</code> 的排名。</p><p>其中有序集成员按 <code>score</code> 值递减 (从大到小) 顺序排列。</p><p><code>score</code> 值最大的成员排名为 <code>0</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrevrank sz yuiya</span><br></pre></td></tr></table></figure><p>10.<strong>ZINCRBY</strong> 为有序集合中的成员 <code>member</code> 的 <code>score</code> 值加上增量 <code>increment</code> 。</p><p>可以通过传递一个负数值 <code>increment</code> ，让 <code>score</code> 减去相应的值。</p><p>当 <code>key</code> 不存在，或 <code>member</code> 不是 <code>key</code> 的成员时， <code>ZINCRBY key increment member</code> 等同于 <code>ZADD key increment member</code> 。</p><p><code>score</code> 和 <code>increment</code> 的值可以是整数值或双精度浮点数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zincrby sz 1 alan</span><br></pre></td></tr></table></figure><p>11.<strong>ZREM</strong> 删除有序集合中的一个或多个成员。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrem sz alan</span><br></pre></td></tr></table></figure><br><h1 id="Redis-用户认证"><a href="#Redis-用户认证" class="headerlink" title="Redis 用户认证"></a>Redis 用户认证</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 1.在配置文件中设置密码</span><br><span class="line">requirepass linux</span><br><span class="line"></span><br><span class="line"># 2.使用密码登陆的两种方式：</span><br><span class="line"># 方式一</span><br><span class="line">redis-cli </span><br><span class="line">auth linux</span><br><span class="line">set k1 v1</span><br><span class="line"># 方式二</span><br><span class="line">redis-cli -a linux get k1</span><br><span class="line"></span><br><span class="line"># 禁用或重命名危险命令</span><br><span class="line">rename-command CONFIG &quot;&quot;</span><br><span class="line">rename-command KEYS &quot;&quot;</span><br><span class="line">rename-command SHUTDOWN &quot;&quot;</span><br><span class="line">rename-command FLUSHALL &quot;&quot;</span><br><span class="line">rename-command DEL &quot;&quot;</span><br><span class="line">rename-command FLUSHDB &quot;&quot;</span><br></pre></td></tr></table></figure><h1 id="Redis-持久化"><a href="#Redis-持久化" class="headerlink" title="Redis 持久化"></a>Redis 持久化</h1><p>持久化是最简单的高可用方法。它的主要作用是 <strong>数据备份</strong>，即将数据存储在 <strong>磁盘</strong>，保证数据不会因进程退出而丢失。Redis 为持久化提供了 RDB 和 AOF 两种方式。</p><p>Redis 内部存在一个定时任务机制，定时任务执行的频率可以在配置文件中通过 hz 10 来设置（这个配置表示 1s 内执行 10 次，即每 100ms 触发一次定时任务）。该值最大能够设置为：500，但是不建议超过：100，因为值越大说明执行频率越频繁越高，这会带来 CPU 的更多消耗，从而影响主进程读写性能。</p><p>定时任务使用的是 Redis 自己实现的 <strong>TimeEvent</strong>，它会定时去调用一些命令完成定时任务，这些任务可能会阻塞主进程导致 Redis 性能下降。因此我们在配置 Redis 时，一定要整体考虑一些会触发定时任务的配置，根据实际情况进行调整。</p><br><h2 id="RDB-方式持久化"><a href="#RDB-方式持久化" class="headerlink" title="RDB  方式持久化"></a>RDB  方式持久化</h2><p><strong>RDB</strong>：在指定的时间间隔对数据进行快照存储。</p><p>优点：文件简洁，恢复速度快，适合做备份。</p><p>缺点：实时性差，容易造成数据的丢失。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RDB 文件名，默认为 dump.rdb</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件存放的目录，AOF 文件同样存放在此目录。默认为当前工作目录</span></span><br><span class="line">dir ./</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定在每 N 秒后数据发生了 M 次改变就保存快照文件</span></span><br><span class="line">save 900 1<span class="comment"># 900 秒内如果有 1 条是写入命令，就触发产生一次快照</span></span><br><span class="line">save 300 10 <span class="comment"># 300 秒内如果有 10 条是写入命令，就触发产生一次快照</span></span><br><span class="line">save 60 10000 <span class="comment"># 60  秒内如果有 10000 条是写入命令，就触发产生一次快照</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认 Redis 会采用 LZF 对数据进行压缩。如果你想节省点 CPU 的性能，就可以把压缩功能禁用掉，但是数据集就会比没压缩时大</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果持久化出错，主进程是否停止写入</span></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入时是否检查，从版本 5.0 的 RDB 开始，一个 CRC64 的校验码会放在文件的末尾。这样更能保证文件的完整性，但是在保存或者加载文件时会损失一定的性能（大概10%）。如果想追求更高的性能，可以把它禁用掉，这样文件在写入校验码时会用 0 替代，加载的时候看到 0 就会直接跳过校验。</span></span><br><span class="line">rdbchecksum yes</span><br></pre></td></tr></table></figure><br><p>在 Redis 中 RDB 持久化的触发分为两种：自己手动触发与 Redis 定时触发。</p><p><strong>针对 RDB 方式的持久化，手动触发可以使用：</strong></p><ul><li>save：会阻塞当前 Redis 服务器，直到持久化完成，线上应该禁止使用。</li><li>bgsave：该触发方式会 <code>fork</code> 一个子进程，由子进程负责持久化过程，因此阻塞只会发生在 <code>fork</code> 子进程的时候。</li></ul><p><strong>自动触发的场景主要是有以下几点：</strong></p><ul><li>根据 <code>save m n</code> 配置规则自动触发；</li><li>从节点全量复制时，主节点发送 <code>rdb</code> 文件给从节点完成复制操作，主节点会触发 <code>bgsave</code>；</li><li>执行 <code>debug reload</code> 时；</li><li>执行 <code>shutdown</code>,<code>kill</code>,<code>pkill</code> 时都会自动触发 <code>bgsave</code>。</li></ul><p>需要注意的是 <code>fork</code> 操作会阻塞，导致 Redis 读写性能下降。我们可以控制单个 Redis 实例的最大内存，来尽可能降低Redis 在 <code>fork</code> 时的事件消耗。也可以通过控制自动触发的频率减少 <code>fork</code> 次数，或者使用手动触发，根据自己的机制来完成持久化。</p><br><br><h2 id="AOF-方式持久化"><a href="#AOF-方式持久化" class="headerlink" title="AOF  方式持久化"></a>AOF  方式持久化</h2><p><strong>AOF</strong>：以追加的方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据。</p><p>优点：安全，在默认配置下最多损失 1 秒的数据，aof 文件简单易读。</p><p>缺点：文件较大，恢复速度慢。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否启用 AOF</span></span><br><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># aof 文件存放目录，与 rdb 共用。默认为当前工作目录</span></span><br><span class="line">dir ./</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认文件名为 appendonly.aof</span></span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步方式 (调用 fsync)</span></span><br><span class="line"><span class="comment"># fsync 函数只对由文件描述符 filedes 指定的单一文件起作用，并且等待写磁盘操作结束，然后返回。fsync 可用于数据库这样的应用程序，这种应用程序需要确保将修改过的块立即写到磁盘上。</span></span><br><span class="line"><span class="comment"># appendfsync no    # 从不调用 fsync，交给 OS 来处理，非常快但最不安全</span></span><br><span class="line"><span class="comment"># appendfsync always # 每当有新命令时立即写入到 AOF </span></span><br><span class="line">appendfsync everysec <span class="comment"># 每秒同步(fsync)一次，默认推荐方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果启用 aof-load-truncated，在加载时发现 aof 尾部不正确时，会向客户端写入一个 log，但是会继续执行，如果设置为 no ，发现错误就会停止，必须修复后才能重新加载</span></span><br><span class="line">aof-load-truncated yes</span><br></pre></td></tr></table></figure><br><p>AOF 的整个流程大体来看可以分为两步，一步是命令的实时写入（如果是 <code>appendfsync everysec</code> 配置，会有 1s 损耗），第二步是对 aof 文件的重写。</p><p>对于实时写入这一步主要的流程是：命令写入 ==&gt; 追加到 aof_buf ==&gt; 同步到 aof 磁盘。那么这里为什么要先写入 buf 在同步到磁盘呢？如果实时写入磁盘会带来非常高的磁盘 IO，影响整体性能。</p><p>aof 重写是为了减少 aof 文件的大小，可以手动或者自动触发。<code>fork</code> 的操作也是发生在重写这一步，这里也会对主进程产生阻塞。</p><p><strong>手动触发：</strong> <code>bgrewriteaof</code>，<strong>自动触发</strong> 就是根据配置规则来触发，当然自动触发的整体时间还跟 Redis 的定时任务频率有关系。</p><ol><li>在重写期间，由于主进程依然在响应命令，为了保证最终备份的完整性；因此它依然会写入旧的 AOF file 中，如果重写失败，能够保证数据不丢失。</li><li>为了把重写期间响应的写入信息也写入到新的文件中，因此也会为子进程保留一个 buf，防止新写的 file 丢失数据。</li><li>重写是直接把当前内存的数据生成对应命令，并不需要读取旧的 AOF 文件进行分析、命令合并。</li><li>AOF 文件直接采用的文本协议，主要是兼容性好、追加方便、可读性高可认为修改修复。</li></ol><blockquote><p>无论是 RDB 还是 AOF 都是先写入一个临时文件，然后通过 <code>rename</code> 完成文件的替换工作。</p></blockquote><br><h2 id="性能与实践"><a href="#性能与实践" class="headerlink" title="性能与实践"></a>性能与实践</h2><p>RDB 的快照和 AOF 的重写都需要 fork，这是一个重量级操作，会对 Redis 造成阻塞。因此为了不影响 Redis 主进程响应，我们需要尽可能降低阻塞。</p><ol><li>降低 fork 的频率，比如可以手动来触发 RDB 生成快照、与 AOF 重写；</li><li>控制 Redis 最大使用内存，防止 fork 耗时过长；</li><li>使用更高配置的硬件；</li><li>合理配置 Linux 的内存分配策略，避免因为物理内存不足导致 fork 失败。</li></ol><p>在线上我们到底该怎么做？</p><ol><li>如果 Redis 中的数据并不是特别敏感或者可以通过其它方式重写生成数据，可以关闭持久化，如果丢失数据可以通过其它途径补回；</li><li>自己制定策略定期检查 Redis 的情况，然后可以手动触发备份、重写数据；</li><li>单机如果部署多个实例，要防止多个实例同时运行持久化、重写操作，防止出现内存、CPU、IO 资源竞争，让持久化变为串行；</li><li>可以加入主从机器，利用一台从机器进行备份处理，其它机器正常响应客户端的命令；</li><li>RDB 持久化与 AOF 持久化可以同时存在，配合使用。</li></ol><h1 id="Redis-主从复制"><a href="#Redis-主从复制" class="headerlink" title="Redis 主从复制"></a>Redis 主从复制</h1><p>复制是高可用 <code>Redis</code> 的基础，<strong>哨兵</strong> 和 <strong>集群</strong> 都是在 <strong>复制基础</strong> 上实现高可用的。复制主要实现了数据的多机备份以及对于读操作的负载均衡和简单的故障恢复。缺陷是故障恢复无法自动化、写操作无法负载均衡、存储能力受到单机的限制。</p><br><h2 id="配置主从坏境"><a href="#配置主从坏境" class="headerlink" title="配置主从坏境"></a>配置主从坏境</h2><table><thead><tr><th>主机名</th><th align="left">角色</th><th align="left">IP 地址</th><th align="left">端口号</th></tr></thead><tbody><tr><td>db01</td><td align="left">Master</td><td align="left">10.0.0.3</td><td align="left">6379</td></tr><tr><td>db02</td><td align="left">Slave-01</td><td align="left">10.0.1.3</td><td align="left">6379</td></tr><tr><td>db03</td><td align="left">Slave-02</td><td align="left">10.0.2.3</td><td align="left">6379</td></tr></tbody></table><br><h3 id="Master-主服务器-db01-配置"><a href="#Master-主服务器-db01-配置" class="headerlink" title="Master 主服务器 db01 配置"></a>Master 主服务器 db01 配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/redis.conf &lt;&lt; EOF</span><br><span class="line">daemonize yes</span><br><span class="line"><span class="built_in">bind</span> 10.0.0.3 127.0.0.1</span><br><span class="line">port 6379</span><br><span class="line">pidfile /var/run/redis/redis.pid</span><br><span class="line">logfile /var/<span class="built_in">log</span>/redis/redis.log</span><br><span class="line">databases 16</span><br><span class="line">dbfilename redis.rdb</span><br><span class="line">dir /var/lib/redis</span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename redis.aof</span><br><span class="line">appendfsync everysec</span><br><span class="line">masterauth menglu</span><br><span class="line">requirepass menglu</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl restart redis</span><br></pre></td></tr></table></figure><br><h3 id="Slave-01-从服务器-db02-配置"><a href="#Slave-01-从服务器-db02-配置" class="headerlink" title="Slave-01 从服务器 db02 配置"></a>Slave-01 从服务器 db02 配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/redis.conf &lt;&lt; EOF</span><br><span class="line">daemonize yes</span><br><span class="line"><span class="built_in">bind</span> 10.0.1.3 127.0.0.1</span><br><span class="line">port 6379</span><br><span class="line">pidfile /var/run/redis/redis.pid</span><br><span class="line">logfile /var/<span class="built_in">log</span>/redis/redis.log</span><br><span class="line">databases 16</span><br><span class="line">dbfilename redis.rdb</span><br><span class="line">dir /var/lib/redis</span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename redis.aof</span><br><span class="line">appendfsync everysec</span><br><span class="line">masterauth menglu</span><br><span class="line">requirepass menglu</span><br><span class="line">slaveof 10.0.0.3 6379</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl restart redis</span><br></pre></td></tr></table></figure><br><h3 id="Slave-02-从服务器-db03-配置"><a href="#Slave-02-从服务器-db03-配置" class="headerlink" title="Slave-02 从服务器 db03 配置"></a>Slave-02 从服务器 db03 配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/redis.conf &lt;&lt; EOF</span><br><span class="line">daemonize yes</span><br><span class="line"><span class="built_in">bind</span> 10.0.2.3 127.0.0.1</span><br><span class="line">port 6379</span><br><span class="line">pidfile /var/run/redis/redis.pid</span><br><span class="line">logfile /var/<span class="built_in">log</span>/redis/redis.log</span><br><span class="line">databases 16</span><br><span class="line">dbfilename redis.rdb</span><br><span class="line">dir /var/lib/redis</span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename redis.aof</span><br><span class="line">appendfsync everysec</span><br><span class="line">masterauth menglu</span><br><span class="line">requirepass menglu</span><br><span class="line">slaveof 10.0.0.3 6379</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl restart redis</span><br></pre></td></tr></table></figure><br><p><strong>临时开启复制</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 10.0.1.3 slaveof 10.0.0.3 6379</span><br><span class="line">redis-cli -h 10.0.2.3 slaveof 10.0.0.3 6379</span><br></pre></td></tr></table></figure><p>*<em>临时取消复制 *</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 10.0.1.3  slaveof no one</span><br><span class="line">redis-cli -h 10.0.2.3  slaveof no one</span><br></pre></td></tr></table></figure><br><h2 id="主从复制流程"><a href="#主从复制流程" class="headerlink" title="主从复制流程"></a>主从复制流程</h2><ol><li>从节点发送同步请求到主节点。</li><li>主节点接收到从节点的请求之后,立即执行 bgsave 将当前内存里的数据持久化到磁盘上,完成之后,将 rdb 文件发送给从节点。</li><li>从节点从主节点接收到 rdb 文件后,清空自己的数据,载入从主节点接收的 rdb 文件到自己的内存里。</li><li>从节点与和主节点实时同步。</li></ol><h1 id="Redis-sentinel-哨兵模式"><a href="#Redis-sentinel-哨兵模式" class="headerlink" title="Redis sentinel 哨兵模式"></a>Redis sentinel 哨兵模式</h1><p>哨兵在主从复制的基础上，实现了 <strong>自动化</strong> 的 <strong>故障恢复</strong>。缺陷是 <strong>写操作</strong> 无法 <strong>负载均衡</strong>，<strong>存储能力</strong> 受到 <strong>单机</strong> 的限制。</p><br><p><img src="https://download.rocc.top/img/image-20200311103320214.png" alt></p><br><table><thead><tr><th>主机名</th><th align="left">角色</th><th align="left">IP 地址</th><th align="left">端口号</th></tr></thead><tbody><tr><td>db01</td><td align="left">Master，Sentinel</td><td align="left">10.0.0.3</td><td align="left">6379，26379</td></tr><tr><td>db02</td><td align="left">Slave，Sentinel</td><td align="left">10.0.1.3</td><td align="left">6379，26379</td></tr><tr><td>db03</td><td align="left">Slave，Sentinel</td><td align="left">10.0.2.3</td><td align="left">6379，26379</td></tr></tbody></table><br><h2 id="Redis-Sentinel-搭建"><a href="#Redis-Sentinel-搭建" class="headerlink" title="Redis Sentinel 搭建"></a>Redis Sentinel 搭建</h2><p><strong>前提 : 主从复制已配置完成</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在三个节点上各执行一次</span></span><br><span class="line">cat &gt; /etc/redis-sentinel.conf &lt;&lt; EOF</span><br><span class="line"><span class="built_in">bind</span> $(ifconfig eth0 | awk <span class="string">'NR==2&#123;print $2&#125;'</span>)</span><br><span class="line">port 26379</span><br><span class="line">daemonize yes</span><br><span class="line">logfile /var/<span class="built_in">log</span>/redis/redis-sentinel.log</span><br><span class="line">dir /var/lib/redis</span><br><span class="line">sentinel monitor myredis 10.0.0.3 6379 2</span><br><span class="line">sentinel down-after-milliseconds myredis 3000</span><br><span class="line">sentinel parallel-syncs myredis 1</span><br><span class="line">sentinel failover-timeout myredis 18000</span><br><span class="line">sentinel auth-pass myredis menglu</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">chown -R redis: /etc/redis*</span><br><span class="line"></span><br><span class="line">cat &gt; /usr/lib/systemd/system/redis-sentinel.service &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Redis Sentinel</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/redis-sentinel /etc/redis-sentinel.conf --supervised systemd</span><br><span class="line">ExecStop=/usr/<span class="built_in">local</span>/bin/redis-cli -h  $(ifconfig eth0|awk <span class="string">'NR==2&#123;print $2&#125;'</span>) -p 26379 shutdown</span><br><span class="line">Type=notify</span><br><span class="line">User=redis</span><br><span class="line">Group=redis</span><br><span class="line">RuntimeDirectory=redis</span><br><span class="line">RuntimeDirectoryMode=0755</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl start redis-sentinel &amp;&amp; systemctl <span class="built_in">enable</span> redis-sentinel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查各节点上的 master 地址是否一致</span></span><br><span class="line">redis-cli -h 10.0.0.3 -p 26379 Sentinel get-master-addr-by-name myredis</span><br><span class="line">redis-cli -h 10.0.1.3 -p 26379 Sentinel get-master-addr-by-name myredis</span><br><span class="line">redis-cli -h 10.0.2.3 -p 26379 Sentinel get-master-addr-by-name myredis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在该配置下实现故障自动转移前提: sentinel 最多能宕掉 1 个, redis 节点最多可以宕掉 2 个。</span></span><br></pre></td></tr></table></figure><br><h2 id="Redis-Sentinel-的主要功能"><a href="#Redis-Sentinel-的主要功能" class="headerlink" title="Redis Sentinel 的主要功能"></a>Redis Sentinel 的主要功能</h2><p><code>Sentinel</code> 的主要功能包括 <strong>主节点存活检测</strong>、<strong>主从运行情况检测</strong>、<strong>自动故障转移</strong>（<code>failover</code>）、<strong>主从切换</strong>。<code>Redis</code> 的 <code>Sentinel</code> 最小配置是 <strong>一主一从</strong>。</p><p><code>Redis</code> 的 <code>Sentinel</code> 系统可以用来管理多个 <code>Redis</code> 服务器，该系统可以执行以下四个任务：</p><ul><li><strong>监控</strong></li></ul><p><code>Sentinel</code> 会不断的检查 <strong>主节点</strong> 和 <strong>从节点</strong> 是否正常运行。</p><ul><li><strong>通知</strong></li></ul><p>当被监控的某个 <code>Redis</code> 节点出现问题，<code>Sentinel</code> 通过 <code>API</code> <strong>脚本</strong> 向 <strong>管理员</strong> 或者其他的 <strong>应用程序</strong> 发送通知。</p><ul><li><strong>自动故障转移</strong></li></ul><p>当 <strong>主节点</strong> 不能正常工作时，<code>Sentinel</code> 会开始一次 <strong>自动的</strong> 故障转移操作，它会将与 <strong>失效主节点</strong> 是 <strong>主从关系</strong> 的其中一个 <strong>从节点</strong> 升级为新的 <strong>主节点</strong>，并且将其他的 <strong>从节点</strong> 指向 <strong>新的主节点</strong>。</p><ul><li><strong>配置提供者</strong></li></ul><p>在 <code>Redis Sentinel</code> 模式下，<strong>客户端应用</strong> 在初始化时连接的是 <code>Sentinel</code> <strong>节点集合</strong>，从中获取 <strong>主节点</strong> 的信息。</p><br><p>给 redis 节点加权，来确定优先备选主节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">流程说明：</span><br><span class="line">设置其他节点的权重为 0</span><br><span class="line">手动发起重新选举</span><br><span class="line">观察所有节点消息是否同步</span><br><span class="line">观察切换结果是否符合预期</span><br><span class="line"></span><br><span class="line">命令解释：</span><br><span class="line">查询命令:CONFIG GET slave-priority</span><br><span class="line">设置命令:CONFIG SET slave-priority 0</span><br><span class="line">主动切换:sentinel failover myredis</span><br><span class="line"></span><br><span class="line">操作命令：</span><br><span class="line">redis-cli -h 10.0.0.3 -p 6379 CONFIG SET slave-priority 0</span><br><span class="line">redis-cli -h 10.0.1.3 -p 6379 CONFIG SET slave-priority 0</span><br><span class="line">redis-cli -h 10.0.2.3 -p 26379 sentinel failover myredis</span><br><span class="line"></span><br><span class="line">验证选举结果：</span><br><span class="line">redis-cli -h 10.0.0.3 -p 26379 Sentinel get-master-addr-by-name myredis</span><br></pre></td></tr></table></figure><h1 id="Redis-集群"><a href="#Redis-集群" class="headerlink" title="Redis 集群"></a>Redis 集群</h1><br><p>通过集群，<code>Redis</code> 可以解决 写操作无法 <strong>负载均衡</strong> 以及 <strong>存储能力</strong> 受到 <strong>单机限制</strong> 的问题，实现了较为 完善 的 高可用方案。<code>Redis Cluster</code> 集群模式通常具有 <strong>高可用</strong>、<strong>可扩展性</strong>、<strong>分布式</strong>、<strong>容错</strong> 等特性。</p><br><h2 id="集群的基本概念"><a href="#集群的基本概念" class="headerlink" title="集群的基本概念"></a><strong>集群的基本概念</strong></h2><p>redis 集群，无论有几个节点，一共只有16384个槽。</p><p>所有的槽位都必须分配，哪怕有 <code>1</code> 个槽位不正常，整个集群都无法不用。</p><p>每个节点的槽的顺序不重要，重点是数量。</p><p>hash 算法足够随机，足够平均。</p><p>每个槽被分配到数据的概率是相当的。</p><p>集群的高可用依赖于主从复制。</p><p>集群拥有自己的配置文件，动态更新，不要手动修改。</p><p>集群通讯会使用基础端口号 +10000 的端口，这个是自动创建的，不是配置文件配置的。</p><p>集群槽位分配比例允许误差在 2% 之间。</p><br><table><thead><tr><th>实例名</th><th align="left">IP 地址</th><th align="left">端口号</th></tr></thead><tbody><tr><td>db01-redis-6380</td><td align="left">10.0.0.3</td><td align="left">6380，16380</td></tr><tr><td>db01-redis-6381</td><td align="left">10.0.0.3</td><td align="left">6381，16381</td></tr><tr><td>db02-redis-6380</td><td align="left">10.0.1.3</td><td align="left">6380，16380</td></tr><tr><td>db02-redis-6381</td><td align="left">10.0.1.3</td><td align="left">6381，16381</td></tr><tr><td>db03-redis-6380</td><td align="left">10.0.2.3</td><td align="left">6380，16380</td></tr><tr><td>db03-redis-6381</td><td align="left">10.0.2.3</td><td align="left">6381，26381</td></tr><tr><td>db01-redis-6390</td><td align="left">10.0.0.3</td><td align="left">6390，16390</td></tr><tr><td>db01-redis-6391</td><td align="left">10.0.0.3</td><td align="left">6391，16391</td></tr></tbody></table><br><h2 id="部署集群"><a href="#部署集群" class="headerlink" title="部署集群"></a>部署集群</h2><h3 id="在每台主机-db01、db02、db03-上配置两个实例"><a href="#在每台主机-db01、db02、db03-上配置两个实例" class="headerlink" title="在每台主机(db01、db02、db03)上配置两个实例"></a>在每台主机(db01、db02、db03)上配置两个实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署 redis-6380</span></span><br><span class="line">cat &gt; /etc/redis-6380.conf &lt;&lt; EOF</span><br><span class="line"><span class="comment"># 以守护进程模式启动</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="comment">#绑定的主机地址</span></span><br><span class="line"><span class="built_in">bind</span> `ifconfig eth0 | awk <span class="string">'NR==2&#123;print $2&#125;'</span>`</span><br><span class="line"><span class="comment"># 监听端口</span></span><br><span class="line">port 6380</span><br><span class="line"><span class="comment"># pid 文件和 log 文件地址</span></span><br><span class="line">pidfile /var/run/redis/redis-6380.pid</span><br><span class="line">logfile /var/<span class="built_in">log</span>/redis/redis-6380.log</span><br><span class="line"><span class="comment"># 设置数据库的数量，默认数据库为 0</span></span><br><span class="line">databases 16</span><br><span class="line"><span class="comment"># 指定本地持久化文件的文件名,默认是 dump.rdb</span></span><br><span class="line">dbfilename redis-6380.rdb</span><br><span class="line"><span class="comment"># 本地数据库的目录,默认是 ./</span></span><br><span class="line">dir /var/lib/redis</span><br><span class="line"><span class="comment"># AOF 重写</span></span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename redis-6380.aof</span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="comment"># 开启集群</span></span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file cluster-6380.conf</span><br><span class="line">cluster-node-timeout 15000</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">mkdir /var/&#123;lib,<span class="built_in">log</span>,run&#125;/redis -p</span><br><span class="line">chown -R redis: /var/&#123;lib,<span class="built_in">log</span>,run&#125;/redis /etc/redis*</span><br><span class="line"></span><br><span class="line">cat &gt; /usr/lib/systemd/system/redis-6380.service &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Redis 6380</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/redis-server /etc/redis-6380.conf --supervised systemd</span><br><span class="line">ExecStop=/usr/<span class="built_in">local</span>/bin/redis-cli -h `ifconfig eth0 | awk <span class="string">'NR==2&#123;print $2&#125;'</span>` -p 6380 shutdown</span><br><span class="line">Type=notify</span><br><span class="line">User=redis</span><br><span class="line">Group=redis</span><br><span class="line">RuntimeDirectory=redis</span><br><span class="line">RuntimeDirectoryMode=0755</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl start redis-6380 &amp;&amp; systemctl <span class="built_in">enable</span> redis-6380</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署 redis-6381</span></span><br><span class="line">cat &gt; /etc/redis-6381.conf &lt;&lt; EOF</span><br><span class="line"><span class="comment"># 以守护进程模式启动</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="comment">#绑定的主机地址</span></span><br><span class="line"><span class="built_in">bind</span> `ifconfig eth0 | awk <span class="string">'NR==2&#123;print $2&#125;'</span>`</span><br><span class="line"><span class="comment"># 监听端口</span></span><br><span class="line">port 6381</span><br><span class="line"><span class="comment"># pid 文件和 log 文件地址</span></span><br><span class="line">pidfile /var/run/redis/redis-6381.pid</span><br><span class="line">logfile /var/<span class="built_in">log</span>/redis/redis-6381.log</span><br><span class="line"><span class="comment"># 设置数据库的数量，默认数据库为 0</span></span><br><span class="line">databases 16</span><br><span class="line"><span class="comment"># 指定本地持久化文件的文件名,默认是 dump.rdb</span></span><br><span class="line">dbfilename redis-6381.rdb</span><br><span class="line"><span class="comment"># 本地数据库的目录,默认是 ./</span></span><br><span class="line">dir /var/lib/redis</span><br><span class="line"><span class="comment"># AOF 重写</span></span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename redis-6381.aof</span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="comment"># 开启集群</span></span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file cluster-6381.conf</span><br><span class="line">cluster-node-timeout 15000</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">mkdir /var/&#123;lib,<span class="built_in">log</span>,run&#125;/redis -p</span><br><span class="line">chown -R redis: /var/&#123;lib,<span class="built_in">log</span>,run&#125;/redis /etc/redis*</span><br><span class="line"></span><br><span class="line">cat &gt; /usr/lib/systemd/system/redis-6381.service &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Redis 6381</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/redis-server /etc/redis-6381.conf --supervised systemd</span><br><span class="line">ExecStop=/usr/<span class="built_in">local</span>/bin/redis-cli -h `ifconfig eth0 | awk <span class="string">'NR==2&#123;print $2&#125;'</span>` -p 6381 shutdown</span><br><span class="line">Type=notify</span><br><span class="line">User=redis</span><br><span class="line">Group=redis</span><br><span class="line">RuntimeDirectory=redis</span><br><span class="line">RuntimeDirectoryMode=0755</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl start redis-6381 &amp;&amp; systemctl <span class="built_in">enable</span> redis-6381</span><br></pre></td></tr></table></figure><br><h3 id="手动配置集群"><a href="#手动配置集群" class="headerlink" title="手动配置集群"></a>手动配置集群</h3><h4 id="1-集群各节点互相发现"><a href="#1-集群各节点互相发现" class="headerlink" title="1.集群各节点互相发现"></a>1.集群各节点互相发现</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在一个节点上将各节点加入集群</span></span><br><span class="line">redis-cli -h 10.0.0.5 -p 6380 cluster meet 10.0.0.5 6381</span><br><span class="line">redis-cli -h 10.0.0.5 -p 6380 cluster meet 10.0.0.6 6380</span><br><span class="line">redis-cli -h 10.0.0.5 -p 6380 cluster meet 10.0.0.6 6381</span><br><span class="line">redis-cli -h 10.0.0.5 -p 6380 cluster meet 10.0.0.7 6380</span><br><span class="line">redis-cli -h 10.0.0.5 -p 6380 cluster meet 10.0.0.7 6381</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看各节点是否配置成功</span></span><br><span class="line">redis-cli -h 10.0.0.5 -p 6380 cluster nodes</span><br></pre></td></tr></table></figure><br><h4 id="2-分配槽位"><a href="#2-分配槽位" class="headerlink" title="2.分配槽位"></a>2.分配槽位</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在三个节点平均分配 16384 个槽位</span></span><br><span class="line">redis-cli -h 10.0.0.5 -p 6380 cluster addslots &#123;0..5460&#125;</span><br><span class="line">redis-cli -h 10.0.0.6 -p 6380 cluster addslots &#123;5461..10921‬&#125;</span><br><span class="line">redis-cli -h 10.0.0.7 -p 6380 cluster addslots &#123;10922..16383&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群槽位信息</span></span><br><span class="line">redis-cli --cluster info 10.0.0.5 6380</span><br></pre></td></tr></table></figure><br><h4 id="3-配置复制关系"><a href="#3-配置复制关系" class="headerlink" title="3.配置复制关系"></a>3.配置复制关系</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看集群各节点的 ID</span></span><br><span class="line">redis-cli -h 10.0.0.5 -p 6380 cluster nodes | grep 6380</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交叉配置复制关系 0:6381 = 1:6380 , 1:6381 = 2:6380 , 2:6381 = 0:6380</span></span><br><span class="line">redis-cli -h 10.0.0.5 -p 6381 cluster replicate 32ff53a704b8b948a75378402205fe9aeec8bcfb</span><br><span class="line">redis-cli -h 10.0.0.6 -p 6381 cluster replicate e216a3fa79465a45cbdfedd125836ca7edb759b8</span><br><span class="line">redis-cli -h 10.0.0.7 -p 6381 cluster replicate e69b43cfc5f93aae9121e88fbf3467e6354df6fc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看复制关系</span></span><br><span class="line">redis-cli -h 10.0.0.5 -p 6380 cluster nodes</span><br></pre></td></tr></table></figure><br><h3 id="自动配置集群"><a href="#自动配置集群" class="headerlink" title="自动配置集群"></a>自动配置集群</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster create 10.0.0.5:6380 10.0.0.6:6380 10.0.0.7:6380 10.0.0.5:6381 10.0.0.6:6381 10.0.0.7:6381 --cluster-replicas 1</span><br><span class="line">yes</span><br><span class="line"><span class="comment"># 检查集群各节点</span></span><br><span class="line">redis-cli -h 10.0.0.7 -p 6380 cluster nodes</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 验证集群的写入数据分配是否平衡</span></span><br><span class="line"><span class="comment"># 写入测试数据</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..10000&#125;; <span class="keyword">do</span> redis-cli -c -h 10.0.0.5 -p 6380 <span class="built_in">set</span> k<span class="variable">$&#123;i&#125;</span> v<span class="variable">$&#123;i&#125;</span>; <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看各节点 key 的数量</span></span><br><span class="line">redis-cli --cluster info 10.0.0.5 6380</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行集群检查</span></span><br><span class="line">redis-cli --cluster rebalance 10.0.0.5 6380</span><br></pre></td></tr></table></figure><br><br><h2 id="集群扩容和收缩"><a href="#集群扩容和收缩" class="headerlink" title="集群扩容和收缩"></a>集群扩容和收缩</h2><h3 id="增配-2-个实例"><a href="#增配-2-个实例" class="headerlink" title="增配 2 个实例"></a>增配 2 个实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/redis-6390.conf &lt;&lt; EOF</span><br><span class="line"><span class="comment"># 以守护进程模式启动</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="comment">#绑定的主机地址</span></span><br><span class="line"><span class="built_in">bind</span> `ifconfig eth0 | awk <span class="string">'NR==2&#123;print $2&#125;'</span>`</span><br><span class="line"><span class="comment"># 监听端口</span></span><br><span class="line">port 6390</span><br><span class="line"><span class="comment"># pid 文件和 log 文件地址</span></span><br><span class="line">pidfile /var/run/redis/redis-6390.pid</span><br><span class="line">logfile /var/<span class="built_in">log</span>/redis/redis-6390.log</span><br><span class="line"><span class="comment"># 设置数据库的数量，默认数据库为 0</span></span><br><span class="line">databases 16</span><br><span class="line"><span class="comment"># 指定本地持久化文件的文件名,默认是 dump.rdb</span></span><br><span class="line">dbfilename redis-6390.rdb</span><br><span class="line"><span class="comment"># 本地数据库的目录,默认是 ./</span></span><br><span class="line">dir /var/lib/redis</span><br><span class="line"><span class="comment"># AOF 重写</span></span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename <span class="string">"redis-6390.aof"</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="comment"># 开启集群</span></span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file cluster-6390.conf</span><br><span class="line">cluster-node-timeout 15000</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">mkdir /var/&#123;lib,<span class="built_in">log</span>,run&#125;/redis -p</span><br><span class="line">chown -R redis: /var/&#123;lib,<span class="built_in">log</span>,run&#125;/redis /etc/redis*</span><br><span class="line"></span><br><span class="line">cat &gt; /usr/lib/systemd/system/redis-6390.service &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Redis 6390</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/redis-server /etc/redis-6390.conf --supervised systemd</span><br><span class="line">ExecStop=/usr/<span class="built_in">local</span>/bin/redis-cli -h `ifconfig eth0 | awk <span class="string">'NR==2&#123;print $2&#125;'</span>` -p 6390 shutdown</span><br><span class="line">Type=notify</span><br><span class="line">User=redis</span><br><span class="line">Group=redis</span><br><span class="line">RuntimeDirectory=redis</span><br><span class="line">RuntimeDirectoryMode=0755</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl start redis-6390 &amp;&amp; systemctl <span class="built_in">enable</span> redis-6390</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/redis-6391.conf &lt;&lt; EOF</span><br><span class="line"><span class="comment"># 以守护进程模式启动</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="comment">#绑定的主机地址</span></span><br><span class="line"><span class="built_in">bind</span> `ifconfig eth0 | awk <span class="string">'NR==2&#123;print $2&#125;'</span>`</span><br><span class="line"><span class="comment"># 监听端口</span></span><br><span class="line">port 6391</span><br><span class="line"><span class="comment"># pid 文件和 log 文件地址</span></span><br><span class="line">pidfile /var/run/redis/redis-6391.pid</span><br><span class="line">logfile /var/<span class="built_in">log</span>/redis/redis-6391.log</span><br><span class="line"><span class="comment"># 设置数据库的数量，默认数据库为 0</span></span><br><span class="line">databases 16</span><br><span class="line"><span class="comment"># 指定本地持久化文件的文件名,默认是 dump.rdb</span></span><br><span class="line">dbfilename redis-6391.rdb</span><br><span class="line"><span class="comment"># 本地数据库的目录,默认是 ./</span></span><br><span class="line">dir /var/lib/redis</span><br><span class="line"><span class="comment"># AOF 重写</span></span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename <span class="string">"redis-6391.aof"</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="comment"># 开启集群</span></span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file cluster-6391.conf</span><br><span class="line">cluster-node-timeout 15000</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">mkdir /var/&#123;lib,<span class="built_in">log</span>,run&#125;/redis -p</span><br><span class="line">chown -R redis: /var/&#123;lib,<span class="built_in">log</span>,run&#125;/redis /etc/redis*</span><br><span class="line"></span><br><span class="line">cat &gt; /usr/lib/systemd/system/redis-6391.service &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Redis 6391</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/redis-server /etc/redis-6391.conf --supervised systemd</span><br><span class="line">ExecStop=/usr/<span class="built_in">local</span>/bin/redis-cli -h `ifconfig eth0 | awk <span class="string">'NR==2&#123;print $2&#125;'</span>` -p 6391 shutdown</span><br><span class="line">Type=notify</span><br><span class="line">User=redis</span><br><span class="line">Group=redis</span><br><span class="line">RuntimeDirectory=redis</span><br><span class="line">RuntimeDirectoryMode=0755</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl start redis-6391 &amp;&amp; systemctl <span class="built_in">enable</span> redis-6391</span><br><span class="line"></span><br><span class="line">redis-cli -h 10.0.0.5 -p 6380 cluster meet 10.0.0.5 6390</span><br><span class="line">redis-cli -h 10.0.0.5 -p 6380 cluster meet 10.0.0.5 6391</span><br></pre></td></tr></table></figure><br><h3 id="使用工具扩容和收缩"><a href="#使用工具扩容和收缩" class="headerlink" title="使用工具扩容和收缩"></a>使用工具扩容和收缩</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 扩容</span></span><br><span class="line"><span class="comment"># 重新分配槽位</span></span><br><span class="line">redis-cli --cluster reshard 10.0.0.5:6380</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次交互：需要迁移多少个槽位</span></span><br><span class="line">How many slots <span class="keyword">do</span> you want to move (from 1 to 16384)? 4096</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次交互：接收槽位节点的 ID 是什么</span></span><br><span class="line">What is the receiving node ID? 6390 ID</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三次交互：哪些节点需要迁出槽位 </span></span><br><span class="line">Source node <span class="comment">#1: all</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第四次交互：确认是否执行</span></span><br><span class="line">Do you want to proceed with the proposed reshard plan (yes/no)? yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群槽位状况</span></span><br><span class="line">redis-cli --cluster info 10.0.0.5:6380</span><br><span class="line"></span><br><span class="line"><span class="comment"># 收缩</span></span><br><span class="line"><span class="comment"># 重新分配槽位</span></span><br><span class="line">redis-cli --cluster reshard 10.0.0.5 6380</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次交互：需要迁移多少个槽位</span></span><br><span class="line">How many slots <span class="keyword">do</span> you want to move (from 1 to 16384)? 1365</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次交互：接收槽位节点的 ID 是什么</span></span><br><span class="line">What is the receiving node ID? 6380 ID </span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三次交互：哪些节点需要迁出槽位</span></span><br><span class="line">Source node <span class="comment">#1: 6390 ID </span></span><br><span class="line">Source node <span class="comment">#2: done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第四次交互：确认是否执行</span></span><br><span class="line">Do you want to proceed with the proposed reshard plan (yes/no)? yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重复上面的操作，直到 6390 所有的槽位都被分配出去</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查集群槽位状况</span></span><br><span class="line">redis-cli --cluster info 10.0.0.5:6380</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用工具删除多余节点</span></span><br><span class="line">redis-cli --cluster del-node 10.0.0.5:6390 6390 ID</span><br><span class="line">redis-cli --cluster del-node 10.0.0.5:6391 6391 ID</span><br></pre></td></tr></table></figure><br><br><h2 id="redis-cli–cluster-集群命令"><a href="#redis-cli–cluster-集群命令" class="headerlink" title="redis-cli–cluster 集群命令"></a>redis-cli–cluster 集群命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Cluster Manager Commands:</span><br><span class="line">  create         host1:port1 ... hostN:portN   <span class="comment"># 创建集群</span></span><br><span class="line">                 --cluster-replicas &lt;arg&gt;      <span class="comment"># 从节点个数</span></span><br><span class="line">  check          host:port                     <span class="comment"># 检查集群</span></span><br><span class="line">                 --cluster-search-multiple-owners <span class="comment"># 检查是否有槽同时被分配给了多个节点</span></span><br><span class="line">  info           host:port                     <span class="comment"># 查看集群状态</span></span><br><span class="line">  fix            host:port                     <span class="comment"># 修复集群</span></span><br><span class="line">                 --cluster-search-multiple-owners <span class="comment"># 修复槽的重复分配问题</span></span><br><span class="line">  reshard        host:port                     <span class="comment"># 指定集群的任意一节点进行迁移 slot，重新分 slots</span></span><br><span class="line">                 --cluster-from &lt;arg&gt;          <span class="comment"># 需要从哪些源节点上迁移 slot，可从多个源节点完成迁移，以逗号隔开，传递的是节点的 node id，还可以直接传递 --from all，这样源节点就是集群的所有节点，不传递该参数的话，则会在迁移过程中提示用户输入</span></span><br><span class="line">                 --cluster-to &lt;arg&gt;            <span class="comment"># slot需要迁移的目的节点的 node id，目的节点只能填写一个，不传递该参数的话，则会在迁移过程中提示用户输入</span></span><br><span class="line">                 --cluster-slots &lt;arg&gt;         <span class="comment"># 需要迁移的 slot 数量，不传递该参数的话，则会在迁移过程中提示用户输入</span></span><br><span class="line">                 --cluster-yes                 <span class="comment"># 指定迁移时的确认输入</span></span><br><span class="line">                 --cluster-timeout &lt;arg&gt;       <span class="comment"># 设置 migrate 命令的超时时间</span></span><br><span class="line">                 --cluster-pipeline &lt;arg&gt;      <span class="comment"># 定义集群获取槽中的 key ,一次取出的 key 数量，不传的话使用默认值为 10</span></span><br><span class="line">                 --cluster-replace             <span class="comment"># 是否直接 replace 到目标节点</span></span><br><span class="line">  rebalance      host:port <span class="comment"># 指定集群的任意一节点进行平衡集群节点 slot 数量 </span></span><br><span class="line">                 --cluster-weight &lt;node1=w1...nodeN=wN&gt;    <span class="comment"># 指定集群节点的权重</span></span><br><span class="line">                 --cluster-use-empty-masters    <span class="comment"># 设置可以让没有分配 slot 的主节点参与，默认不允许</span></span><br><span class="line">                 --cluster-timeout &lt;arg&gt;        <span class="comment"># 设置超时时间</span></span><br><span class="line">                 --cluster-simulate             <span class="comment"># 模拟 rebalance 操作，不会真正执行迁移操作</span></span><br><span class="line">                 --cluster-pipeline &lt;arg&gt;      <span class="comment"># 定义 cluster 一次取出的 key 数量，默认值为 10</span></span><br><span class="line">                 --cluster-threshold &lt;arg&gt;     <span class="comment"># 迁移的 slot 阈值超过 threshold，执行 rebalance 操作</span></span><br><span class="line">                 --cluster-replace             <span class="comment"># 是否直接 replace 到目标节点</span></span><br><span class="line">  add-node       new_host:new_port existing_host:existing_port  <span class="comment"># 添加节点，把新节点加入到指定的集群，默认添加主节点</span></span><br><span class="line">                 --cluster-slave              <span class="comment"># 新节点作为从节点，默认随机一个主节点</span></span><br><span class="line">                 --cluster-master-id &lt;arg&gt;    <span class="comment"># 给新节点指定主节点</span></span><br><span class="line">  del-node       host:port node_id            <span class="comment"># 删除给定的一个节点，成功后关闭该节点服务</span></span><br><span class="line">  call           host:port <span class="built_in">command</span> arg arg .. arg    <span class="comment"># 在集群的所有节点执行相关命令</span></span><br><span class="line">  <span class="built_in">set</span>-timeout    host:port milliseconds<span class="comment"># 设置 cluster-node-timeout</span></span><br><span class="line">  import         host:port                   <span class="comment"># 将外部 redis 数据导入集群</span></span><br><span class="line">                 --cluster-from &lt;arg&gt;        <span class="comment"># 将指定实例的数据导入到集群</span></span><br><span class="line">                 --cluster-copy              <span class="comment"># migrate 时指定 copy</span></span><br><span class="line">                 --cluster-replace           <span class="comment"># migrate 时指定 replace</span></span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用工具自动部署 redis 集群</span></span><br><span class="line"><span class="comment"># 1.恢复集群初始化</span></span><br><span class="line">redis-cli -h 10.0.0.5 -p 6380 FLUSHALL</span><br><span class="line">redis-cli -h 10.0.0.6 -p 6380 FLUSHALL</span><br><span class="line">redis-cli -h 10.0.0.7 -p 6380 FLUSHALL</span><br><span class="line">redis-cli -h 10.0.0.5 -p 6381 FLUSHALL</span><br><span class="line">redis-cli -h 10.0.0.6 -p 6381 FLUSHALL</span><br><span class="line">redis-cli -h 10.0.0.7 -p 6381 FLUSHALL</span><br><span class="line">redis-cli -h 10.0.0.5 -p 6380 CLUSTER RESET</span><br><span class="line">redis-cli -h 10.0.0.6 -p 6380 CLUSTER RESET</span><br><span class="line">redis-cli -h 10.0.0.7 -p 6380 CLUSTER RESET</span><br><span class="line">redis-cli -h 10.0.0.5 -p 6381 CLUSTER RESET</span><br><span class="line">redis-cli -h 10.0.0.6 -p 6381 CLUSTER RESET</span><br><span class="line">redis-cli -h 10.0.0.7 -p 6381 CLUSTER RESET</span><br><span class="line">redis-cli -h 10.0.0.5 -p 6380 CLUSTER NODES  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.使用工具初始化</span></span><br><span class="line">redis-cli --cluster create 10.0.0.5:6380 10.0.0.6:6380 10.0.0.7:6380 10.0.0.5:90 10.0.0.5:6381 10.0.0.6:6381 10.0.0.7:6381 10.0.0.5:91 --cluster-replicas 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.检查集群</span></span><br><span class="line">redis-cli --cluster info 10.0.0.5 6380</span><br><span class="line">redis-cli -h 10.0.0.5 -p 6380 CLUSTER NODES </span><br><span class="line">redis-cli --cluster check 10.0.0.5 6380</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模拟故障</span></span><br><span class="line"><span class="comment"># 场景：迁移数据时人为中断了，导致槽的状态不对</span></span><br><span class="line">[11213-&lt;-a69e46ea7560684a7061ddb6dc3f854a1ef3dbd4] 51</span><br><span class="line">[11213-&gt;-ccaa5dcb0f0320332100594d629122b2702660d5] 53</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用工具修复：</span></span><br><span class="line">redis-cli --cluster fix 10.0.0.51:6380</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动修复：</span></span><br><span class="line">CLUSTER SETSLOT &lt;slot&gt; STABLE</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用工具维护集群的好处</span></span><br><span class="line">因为工具有很多判断条件，更加严谨，健壮性更好。</span><br><span class="line">删除槽，使用工具会判断，如果槽里有数据，就不执行。</span><br><span class="line">添加节点使用工具会判断，如果新增加的节点本身不为空，就不允许加入到集群。</span><br><span class="line">删除节点使用工具会判断，如果本删除节点本身还有槽，就不允许删除。</span><br></pre></td></tr></table></figure><br><h2 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.5.0 版本直接可使用自带命令迁移(需要设置密码为空才能进行导入)</span></span><br><span class="line"><span class="comment"># 将单节点 10.0.0.7:6379 的数据迁移到 10.0.0.5:6380 节点的集群 </span></span><br><span class="line"><span class="comment"># 不加 copy 参数相当于 mv 命令，旧数据迁移成功后就会消失</span></span><br><span class="line">redis-cli --cluster import 10.0.0.5:6380 --cluster-from 10.0.0.7:6379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 copy 参数相当于 cp 命令，旧数据迁移成功后会保留</span></span><br><span class="line">redis-cli --cluster import 10.0.0.5:6380 --cluster-copy --cluster-from 10.0.0.7:6379 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 replace 参数会覆盖掉同名的数据，对新集群新增加的数据不受影响</span></span><br><span class="line">redis-cli --cluster import 10.0.0.5:6380 --cluster-copy --cluster-replace --cluster-from  10.0.0.7:6379 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 实验：导入一个持续有数据写入的节点</span></span><br><span class="line"><span class="comment"># 同时开 2 个终端，一个写入 key，一个执行导入命令</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..1000&#125;; <span class="keyword">do</span> redis-cli <span class="built_in">set</span> k_<span class="variable">$&#123;i&#125;</span> v_<span class="variable">$&#123;i&#125;</span>; sleep 0.2;<span class="built_in">echo</span> <span class="variable">$&#123;i&#125;</span>; <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">redis-cli --cluster import 10.0.0.5:6380 --cluster-copy --cluster-replace --cluster-from  10.0.0.7:6379 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 结论：只会导入当你执行导入命令那一刻时已有的数据，类似于快照，对于后面再写入的数据不会更新</span></span><br></pre></td></tr></table></figure><br><h2 id="分析-KEY-的大小"><a href="#分析-KEY-的大小" class="headerlink" title="分析 KEY 的大小"></a>分析 KEY 的大小</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用自带工具分析</span></span><br><span class="line">redis-cli --bigkeys </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用第三方工具分析</span></span><br><span class="line"><span class="comment"># 1.安装工具</span></span><br><span class="line">yum install python-pip gcc python-devel -y</span><br><span class="line"><span class="built_in">cd</span> /opt/</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/sripathikrishnan/redis-rdb-tools</span><br><span class="line"><span class="built_in">cd</span> redis-rdb-tools</span><br><span class="line">pip install python-lzf</span><br><span class="line">python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.生成测试数据</span></span><br><span class="line">redis-cli -h 10.0.0.5 -p 6379 <span class="built_in">set</span> <span class="built_in">test</span> $(cat test.txt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.执行 bgsave 生成 rdb 文件</span></span><br><span class="line">redis-cli -h 10.0.0.5 -p 6379 bgsave</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.使用工具分析</span></span><br><span class="line">rdb -c memory /var/lib/redis/redis.rdb -f redis.rdb.csv</span><br><span class="line"></span><br><span class="line">5.过滤分析</span><br><span class="line">awk -F <span class="string">","</span> <span class="string">'&#123;print $4,$3&#125;'</span> redis.rdb.csv | sort -r</span><br><span class="line"></span><br><span class="line">6.将结果整理汇报给领导,询问开发这个 key 是否可以删除</span><br></pre></td></tr></table></figure><br><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1.设置最大内存限制</span><br><span class="line">config <span class="built_in">set</span> maxmemory 2G</span><br><span class="line"></span><br><span class="line">2.内存回收机制</span><br><span class="line">生产上一定要限制 redis 的内存使用大小。</span><br><span class="line">当达到内存使用限制之后 redis 会出发对应的控制策略</span><br><span class="line">redis 支持 6 种策略：</span><br><span class="line">1.noevicition       <span class="comment"># 默认策略，不会删除任务数据，拒绝所有写入操作并返回客户端错误信息，此时只响应读操作</span></span><br><span class="line">2.volatile-lru      <span class="comment"># 根据 LRU 算法删除设置了超时属性的 key，直到留出足够空间为止，如果没有可删除的 key，则会退回到 noevicition 策略</span></span><br><span class="line">3.allkeys-lru       <span class="comment"># 根据 LRU 算法删除 key，不管数据有没有设置超时属性</span></span><br><span class="line">4.allkeys-random    <span class="comment"># 随机删除所有 key</span></span><br><span class="line">5.volatile-random   <span class="comment"># 随机删除过期 key</span></span><br><span class="line">5.volatile-ttl      <span class="comment"># 根据 key 的 ttl，删除最近要过期的 key</span></span><br><span class="line"></span><br><span class="line">3.生产上 redis 限制多大内存</span><br><span class="line">先预留系统一半内存</span><br><span class="line">48G 总内存 </span><br><span class="line">24G 系统 + 24G redis</span><br><span class="line">redis 先给 8G 内存，内存不足后，分析结果通知相关人员，排查一下是否所有的 key 都必须保留?</span><br><span class="line">redis 再给到 12G 内存，内存不足后，分析结果通知相关人员，排查一下是否所有的 key 都必须保留?</span><br><span class="line">redis 再给到 16G 内存，内存不足后，分析结果通知相关人员，排查一下是否所有的 key 都必须保留?</span><br><span class="line">等到 24G 都不够用时，汇报领导，考虑买内存了。</span><br><span class="line">等到 35G 的时候，就要考虑加内存，还是扩容机器。</span><br></pre></td></tr></table></figure><br><h2 id="集群相关命令"><a href="#集群相关命令" class="headerlink" title="集群相关命令"></a>集群相关命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以正则匹配的方式查看满足条件的 key</span></span><br><span class="line">redis-cli --scan --pattern <span class="string">'k*'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群各节点状态</span></span><br><span class="line">redis-cli -h 10.0.0.5 -p 6380 CLUSTER NODES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置集群中的复制关系</span></span><br><span class="line">redis-cli -h 10.0.0.5 -p 6381 cluster replicate 32ff53a704b8b948a75378402205fe9aeec8bcfb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加槽位</span></span><br><span class="line">redis-cli -h 10.0.0.5 -p 6380 cluster addslots &#123;0..5460&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动修复指定的槽位</span></span><br><span class="line">CLUSTER SETSLOT &lt;slot&gt; STABLE</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平衡集群中各个节点的 slot 数量</span></span><br><span class="line">redis-cli --cluster rebalance 10.0.0.5 6380</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除集群节点</span></span><br><span class="line">redis-cli --cluster del-node 10.0.0.5:6390 节点(6390)ID</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修复集群</span></span><br><span class="line">redis-cli --cluster fix 10.0.0.5:6380</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空集群信息</span></span><br><span class="line">redis-cli -h 10.0.0.5 -p 6380 cluster reset</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群状态</span></span><br><span class="line">redis-cli -h 10.0.0.5 -p 6380 cluster info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群信息</span></span><br><span class="line">redis-cli --cluster info 10.0.0.5 6380</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行集群检查</span></span><br><span class="line">redis-cli --cluster check 10.0.0.5 6380</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入节点到集群</span></span><br><span class="line">redis-cli -h 10.0.0.5 -p 6380 cluster meet 10.0.0.7 6381</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新分配槽位</span></span><br><span class="line">redis-cli --cluster reshard 10.0.0.5:6380</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主动发起集群角色切换</span></span><br><span class="line">redis-cli -h 10.0.0.5 -p 6380 cluster failover</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zabbix 监控</title>
      <link href="/2018/02/13/Zabbix%20%E7%9B%91%E6%8E%A7/"/>
      <url>/2018/02/13/Zabbix%20%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="Zabbix-监控"><a href="#Zabbix-监控" class="headerlink" title="Zabbix 监控"></a>Zabbix 监控</h1><p>Zabbix 是一个企业级的分布式开源监控方案，可以监控服务器健康性以及网络参数的一款软件，Zabbix 几乎可以为任何时间配置邮件警告，这样用户可以实时通过邮箱接收服务器所发生的任何问题。对于已经存在的数据，Zabbix 也提供了出色的报告和可视化分析工具。zabbix server 可以通过 <a href="https://baike.baidu.com/item/SNMP" target="_blank" rel="noopener">SNMP</a>，zabbix agent，<a href="https://baike.baidu.com/item/ping/6235" target="_blank" rel="noopener">ping</a>，端口监视等方法提供对远程服务器 / 网络状态的监视，<a href="https://baike.baidu.com/item/数据收集/2245693" target="_blank" rel="noopener">数据收集</a> 等功能，它可以运行在Linux，Solaris，HP-UX，AIX，Free BSD，Open BSD，OS X等平台上。</p><p>Zabbix 支持主动轮询和被动捕获，它所有的报告，统计信息和配置参数都是通过 web 前端的方式进行访问。</p><p>Zabbix 是基于 GPL 通用许可证编写和发行的，意味着它的源代码都是免费发行的，公众可以任意使用。</p><p><strong>Zabbix 的功能点</strong></p><p>Zabbix 是一个高度集成的网络监控解决方案，它提供了多种功能：</p><p>1.数据收集</p><ul><li>可用性和功能性检查</li><li>支持 SNMP（包括主动轮训和被动获取），IPMI，JMX，VMware 监控</li><li>自定义检查</li><li>按照自定义的间隔收集需要的数据</li><li>通过 server / proxy + agents 来执行</li></ul><p>2.灵活的阈值定义</p><ul><li>可以非常灵活的设置阈值，也就是触发器，触发器从后端数据库获取参考值</li></ul><p>3.高度可配置的告警</p><ul><li>可根据递增机制，接收方和媒介类型自定义发送告警通知</li><li>使用宏变量可以使告警通知更加高效有用</li><li>自动相应动作可包含远程<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.linuxcool.com%2F" target="_blank" rel="noopener">命令</a></li></ul><p>4.实施绘制图表</p><ul><li>使用内置表绘制功能可以将监控项的内容实时绘制图表</li></ul><ol start="5"><li>WEB 监控功能</li></ol><ul><li>Zabbix 可以追踪模拟鼠标在 web 上的点击操作，可以用来检测web的功能和响应时间</li></ul><p>6.丰富的可视化选项</p><ul><li>支持创建自定义的图表，一个试图集中展现多个监控项</li><li>网络拓扑图</li><li>以仪表盘的样式自定义大屏展现和幻灯片轮询播放</li><li>报表</li><li>监控内容的高级（业务）视图</li></ul><p>7.历史数据存储</p><ul><li>数据库数据</li><li>可配置历史数据</li><li>内置数据管理机制（housekeeping）</li></ul><p>8.配置简单</p><ul><li>将被监控对象添加为主机</li><li>在数据库中获取主机进行监视</li><li>应用模板来监控设备</li></ul><p>9.使用模板</p><ul><li>在模板中分组检查</li><li>模板可以关联其他模板</li></ul><p>10.网络发现</p><ul><li>自动发现网络设备</li><li>监控代理自动注册</li><li>发现文件系统，网络接口和 SNMP OID 值</li></ul><p>11.快捷的 web 界面</p><ul><li>PHP Web 前端</li><li>可从任何地方访问</li><li>你可以定制自己的操作方式</li><li>审核日志</li></ul><p>12.Zabbix Api</p><ul><li>Zabbix API 为 Zabbix 提供了对外的可编程接口，用于批量操作，第三方软件集成和其他目的</li></ul><p>13.权限管理系统</p><ul><li>安全用户认证</li><li>特定用户可以限制访问特定的视图</li></ul><p>14.功能强大易于拓展的 agent</p><ul><li>部署在被监控对象上</li><li>支持 Linux 和 Windows</li></ul><p>15.二进制代码</p><ul><li>为了性能和更少内存的占用，用C语言编写</li><li>便于移植</li></ul><p>16.为复杂环境准备</p><ul><li>使用 Zabbix proxy 代理服务器，使得远程监控更简单</li></ul><h1 id="部署-Zabbix-服务"><a href="#部署-Zabbix-服务" class="headerlink" title="部署 Zabbix 服务"></a>部署 Zabbix 服务</h1><p>官方安装手册  <a href="https://www.zabbix.com/documentation/4.0/zh/manual/installation" target="_blank" rel="noopener">https://www.zabbix.com/documentation/4.0/zh/manual/installation</a></p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置 yum 源</span></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/zabbix/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-2.el7.noarch.rpm</span><br><span class="line">yum install zabbix-release-4.0-2.el7.noarch.rpm -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将源地址代换为清华源</span></span><br><span class="line">sed -i <span class="string">'s#http://repo.zabbix.com#https://mirrors.tuna.tsinghua.edu.cn/zabbix#g'</span> /etc/yum.repos.d/zabbix.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 zabbix 服务端、前端和数据库</span></span><br><span class="line">yum install -y zabbix-server-mysql zabbix-web-mysql mariadb-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动数据库并设置为开机自启</span></span><br><span class="line">systemctl start mariadb &amp;&amp; systemctl <span class="built_in">enable</span> mariadb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化数据库</span></span><br><span class="line">mysql_secure_installation</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 zabbix 数据库</span></span><br><span class="line">mysql -e <span class="string">'create database zabbix character set utf8 collate utf8_bin;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 zabbix 用户并授权</span></span><br><span class="line">mysql -e <span class="string">"grant all privileges on zabbix.* to 'zabbix'@'localhost' identified by 'linux';"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -plinux zabbix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 zabbix-server 配置文件连接数据库</span></span><br><span class="line">sed -i <span class="string">'/DBPassword=/c DBPassword=linux'</span> /etc/zabbix/zabbix_server.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 zabbix-web 前端配置的时区</span></span><br><span class="line">sed -i <span class="string">"/date.timezone/c php_value date.timezone Asia/Shanghai"</span> /etc/httpd/conf.d/zabbix.conf</span><br><span class="line">sed -i <span class="string">'/date.timezone/s#^#\t#'</span> /etc/httpd/conf.d/zabbix.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动 zabbix-server 服务并设置为开机自启</span></span><br><span class="line">systemctl start zabbix-server &amp;&amp; systemctl <span class="built_in">enable</span> zabbix-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 httpd 服务并设置为开机自启</span></span><br><span class="line">systemctl start httpd &amp;&amp; systemctl <span class="built_in">enable</span> httpd</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 zabbix-agent</span></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/zabbix/zabbix/4.0/rhel/7/x86_64/zabbix-agent-4.0.18-1.el7.x86_64.rpm</span><br><span class="line">yum install -y zabbix-agent-4.0.18-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改客户端配置文件关联服务端</span></span><br><span class="line">egrep -v <span class="string">'^$|#'</span> /etc/zabbix/zabbix_agentd.conf</span><br><span class="line">PidFile=/var/run/zabbix/zabbix_agentd.pid</span><br><span class="line">LogFile=/var/<span class="built_in">log</span>/zabbix/zabbix_agentd.log</span><br><span class="line">LogFileSize=0</span><br><span class="line">Server=10.0.0.3<span class="comment"># Zabbix 服务端 IP</span></span><br><span class="line">ServerActive=10.0.0.3    <span class="comment"># Zabbix 服务端 IP(自动注册到服务端)</span></span><br><span class="line">Hostname=10.0.0.3<span class="comment"># Zabbix 客户端的昵称(自定义)</span></span><br><span class="line">HostMetadata=linux<span class="comment"># 主机元数据 (自动注册匹配的内容)</span></span><br><span class="line">Include=/etc/zabbix/zabbix_agentd.d/*.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 zabbix-agent 并设置为开机自启</span></span><br><span class="line">systemctl start zabbix-agent &amp;&amp; systemctl <span class="built_in">enable</span> zabbix-agent</span><br></pre></td></tr></table></figure><h3 id="Web-端"><a href="#Web-端" class="headerlink" title="Web 端"></a>Web 端</h3><p>⦁    配置 &gt;&gt; 动作 &gt;&gt; 自动注册</p><p>![alt](“Zabbix 监控.assets/image-20200307114320692.png”)</p><p>⦁    名称 &gt;&gt; 主机元数据</p><p>![image-20200307115237010](Zabbix 监控.assets/image-20200307115237010.png)</p><p>⦁    操作 &gt;&gt; 新的</p><p>![image-20200307115447979](Zabbix 监控.assets/image-20200307115447979.png)</p><p>⦁    与模板关联</p><p>![image-20200307115818109](Zabbix 监控.assets/image-20200307115818109.png)</p><p>⦁    添加到主机群组</p><p>![image-20200307120050342](Zabbix 监控.assets/image-20200307120050342.png)</p><p>客户端自动注册配置完成</p><h1 id="Zabbix-邮件报警"><a href="#Zabbix-邮件报警" class="headerlink" title="Zabbix 邮件报警"></a>Zabbix 邮件报警</h1><p>⦁    定义发件人</p><p>![](Zabbix 监控.assets/image-20200307173432729.png)</p><p>⦁    定义收件人</p><p>![image-20200307180013340](Zabbix 监控.assets/image-20200307180013340.png)</p><p>⦁    配置动作</p><p>![image-20200307180256028](Zabbix 监控.assets/image-20200307180256028.png)</p><p>⦁    自定义报警参考</p><p>![image-20200307180746241](Zabbix 监控.assets/image-20200307180746241.png)</p><p>默认标题：故障{TRIGGER.STATUS},服务器:{HOSTNAME1}发生: {TRIGGER.NAME}故障!</p><p>告警主机:{HOSTNAME1}</p><p>告警时间:{EVENT.DATE} {EVENT.TIME}</p><p>告警等级:{TRIGGER.SEVERITY}</p><p>告警信息: {TRIGGER.NAME}</p><p>告警项目:{TRIGGER.KEY1}</p><p>问题详情:{ITEM.NAME}:{ITEM.VALUE}</p><p>当前状态:{TRIGGER.STATUS}:{ITEM.VALUE1}</p><p>事件ID:{EVENT.ID}</p><p>![image-20200307181044345](Zabbix 监控.assets/image-20200307181044345.png)</p><p>恢复标题：恢复{TRIGGER.STATUS}, 服务器:{HOSTNAME1}: {TRIGGER.NAME}已恢复!</p><p>告警主机:{HOSTNAME1}</p><p>告警时间:{EVENT.DATE} {EVENT.TIME}</p><p>告警等级:{TRIGGER.SEVERITY}</p><p>告警信息: {TRIGGER.NAME}</p><p>告警项目:{TRIGGER.KEY1}</p><p>问题详情:{ITEM.NAME}:{ITEM.VALUE}</p><p>当前状态:{TRIGGER.STATUS}:{ITEM.VALUE1}</p><p>事件ID:{EVENT.ID}</p><p>⦁    启用触发器动作</p><p>![](Zabbix 监控.assets/image-20200307175233994.png)</p><p>完成</p><h1 id="Zabbix-微信报警"><a href="#Zabbix-微信报警" class="headerlink" title="Zabbix 微信报警"></a>Zabbix 微信报警</h1><p>⦁    登陆企业微信公众号添加账户<br><a href="https://work.weixin.qq.com/wework_admin/loginpage_wx" target="_blank" rel="noopener">https://work.weixin.qq.com/wework_admin/loginpage_wx</a> </p><p>⦁    记录企业 ID (corpid)</p><p>![image-20200307190643135](Zabbix 监控.assets/image-20200307190643135.png)</p><p>⦁    添加部门和成员</p><p>![image-20200307192312619](Zabbix 监控.assets/image-20200307192312619.png)</p><p>……</p><p>⦁    创建应用</p><p>![image-20200307191118689](Zabbix 监控.assets/image-20200307191118689.png)</p><p>![image-20200307191514606](Zabbix 监控.assets/image-20200307191514606.png)</p><p>⦁    记录 AgentId 和 Secret (appsecret)</p><p>![image-20200307192638166](Zabbix 监控.assets/image-20200307192638166.png)</p><p>⦁    记录要发送的企业微信部门 ID</p><p>![image-20200307204138691](Zabbix 监控.assets/image-20200307204138691.png)</p><p>⦁    查看配置文件里的脚本目录路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">"^AlertScriptsPath"</span> /etc/zabbix/zabbix_server.conf</span><br><span class="line">AlertScriptsPath=/usr/lib/zabbix/alertscripts</span><br></pre></td></tr></table></figure><p>⦁    编写脚本</p><p>corpid=wwd327d0ea50c0dae0</p><p>appsecret=OxvRDNkcJdMuRZycMZmzKgNS-4jTdaYac4aeAxj9Fic</p><p>agentid=1000006</p><p>toparty=2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /usr/lib/zabbix/alertscripts/wechat_alarm.py &lt;&lt; EOF</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line">import json</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level = logging.DEBUG, format = <span class="string">'%(asctime)s, %(filename)s, %(levelname)s, %(message)s'</span>,</span><br><span class="line">                datefmt = <span class="string">'%a, %d %b %Y %H:%M:%S'</span>,</span><br><span class="line">                filename = os.path.join(<span class="string">'/tmp'</span>,<span class="string">'wechat_alarm.log'</span>),</span><br><span class="line">                filemode = <span class="string">'a'</span>)</span><br><span class="line">corpid=<span class="string">'wwd327d0ea50c0dae0'</span></span><br><span class="line">appsecret=<span class="string">'OxvRDNkcJdMuRZycMZmzKgNS-4jTdaYac4aeAxj9Fic'</span></span><br><span class="line">agentid=1000006</span><br><span class="line"></span><br><span class="line">token_url=<span class="string">'https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid='</span> + corpid + <span class="string">'&amp;corpsecret='</span> + appsecret</span><br><span class="line">req=requests.get(token_url)</span><br><span class="line">accesstoken=req.json()[<span class="string">'access_token'</span>]</span><br><span class="line"></span><br><span class="line">msgsend_url=<span class="string">'https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token='</span> + accesstoken</span><br><span class="line"></span><br><span class="line"><span class="comment">#touser=sys.argv[1]</span></span><br><span class="line">subject=sys.argv[2]</span><br><span class="line">toparty=<span class="string">'2|3'</span></span><br><span class="line">message=sys.argv[2] + <span class="string">"\n\n"</span> +sys.argv[3]</span><br><span class="line"></span><br><span class="line">params=&#123;</span><br><span class="line">      <span class="comment">#  "touser": touser,</span></span><br><span class="line">       <span class="string">"toparty"</span>: toparty,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="string">"msgtype"</span>: <span class="string">"text"</span>,</span><br><span class="line">    <span class="string">"agentid"</span>: agentid,</span><br><span class="line">    <span class="string">"text"</span>: &#123;</span><br><span class="line">            <span class="string">"content"</span>: message</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"safe"</span>:0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">req=requests.post(msgsend_url, data=json.dumps(params))</span><br><span class="line"></span><br><span class="line">logging.info(<span class="string">'sendto:'</span> + toparty + <span class="string">';;subject:'</span> + subject + <span class="string">';;message:'</span> + message)</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">chown -R zabbix: /usr/lib/zabbix/alertscripts</span><br><span class="line">chmod 744 /usr/lib/zabbix/alertscripts/wechat_alarm.py</span><br><span class="line"></span><br><span class="line">yum install -y python2-pip</span><br><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p>⦁    Web 端创建报警媒介</p><p>![image-20200307193253605](Zabbix 监控.assets/image-20200307193253605.png)</p><p>![image-20200307211911911](Zabbix 监控.assets/image-20200307211911911.png)</p><p>{ALERT.SENDTO}      # 发送给谁，该参数在邮件告警中有作用，但微信告警中没有</p><p>{ALERT.SUBJECT}     # 告警标题，该参数在邮件告警中有作用，但微信告警中没有</p><p>{ALERT.MESSAGE}    # 告警内容，在微信告警中有用</p><p>⦁    配置收件人</p><p>![image-20200307212810594](Zabbix 监控.assets/image-20200307212810594.png)</p><p>⦁    启用动作</p><p>![image-20200325222010660](Zabbix 监控.assets/image-20200325222010660.png)</p><p>⦁    针对个人的脚本</p><p>corpid=’wwd327d0ea50c0dae0’</p><p>appsecret=’OxvRDNkcJdMuRZycMZmzKgNS-4jTdaYac4aeAxj9Fic’</p><p>agentid=1000006</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /usr/lib/zabbix/alertscripts/wechat_alarm.py &lt;&lt; EOF</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line">import json</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level = logging.DEBUG, format = <span class="string">'%(asctime)s, %(filename)s, %(levelname)s, %(message)s'</span>,</span><br><span class="line">                datefmt = <span class="string">'%a, %d %b %Y %H:%M:%S'</span>,</span><br><span class="line">                filename = os.path.join(<span class="string">'/tmp'</span>,<span class="string">'wechat_alarm.log'</span>),</span><br><span class="line">                filemode = <span class="string">'a'</span>)</span><br><span class="line">corpid=<span class="string">'wwd327d0ea50c0dae0'</span></span><br><span class="line">appsecret=<span class="string">'OxvRDNkcJdMuRZycMZmzKgNS-4jTdaYac4aeAxj9Fic'</span></span><br><span class="line">agentid=1000006</span><br><span class="line"></span><br><span class="line">token_url=<span class="string">'https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid='</span> + corpid + <span class="string">'&amp;corpsecret='</span> + appsecret</span><br><span class="line">req=requests.get(token_url)</span><br><span class="line">accesstoken=req.json()[<span class="string">'access_token'</span>]</span><br><span class="line"></span><br><span class="line">msgsend_url=<span class="string">'https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token='</span> + accesstoken</span><br><span class="line"></span><br><span class="line">touser=sys.argv[1]</span><br><span class="line">subject=sys.argv[2]</span><br><span class="line"><span class="comment"># toparty='3|4|5|6'</span></span><br><span class="line">message=sys.argv[2] + <span class="string">"\n\n"</span> +sys.argv[3]</span><br><span class="line"></span><br><span class="line">params=&#123;</span><br><span class="line">        <span class="string">"touser"</span>: touser,</span><br><span class="line">      <span class="comment"># "toparty": toparty,</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="string">"msgtype"</span>: <span class="string">"text"</span>,</span><br><span class="line">    <span class="string">"agentid"</span>: agentid,</span><br><span class="line">    <span class="string">"text"</span>: &#123;</span><br><span class="line">            <span class="string">"content"</span>: message</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"safe"</span>:0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">req=requests.post(msgsend_url, data=json.dumps(params))</span><br><span class="line"></span><br><span class="line">logging.info(<span class="string">'sendto:'</span> + touser + <span class="string">';;subject:'</span> + subject + <span class="string">';;message:'</span> + message)</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>⦁    随机发送到指定用户玩笑脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line">num=$(<span class="built_in">echo</span> $((<span class="variable">$RANDOM</span>%28+1)))</span><br><span class="line">name=$(sed -n <span class="string">"<span class="variable">$&#123;num&#125;</span>p"</span> name.txt)</span><br><span class="line">ok_boy=$(grep -v <span class="string">"<span class="variable">$&#123;name&#125;</span>"</span> name.txt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ok <span class="keyword">in</span> <span class="variable">$&#123;ok_boy&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  python  wechat.py <span class="variable">$&#123;ok&#125;</span>  <span class="string">"<span class="variable">$1</span>"</span>  <span class="string">"<span class="variable">$2</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 基础入门</title>
      <link href="/2017/03/01/Nginx%20%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
      <url>/2017/03/01/Nginx%20%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h3 id="Nginx-介绍"><a href="#Nginx-介绍" class="headerlink" title="Nginx 介绍"></a>Nginx 介绍</h3><h5 id="1-Nginx-是什么-？"><a href="#1-Nginx-是什么-？" class="headerlink" title="1.Nginx 是什么 ？"></a>1.Nginx 是什么 ？</h5><p>Nginx 是一款轻量级 Web 服务器 / 反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在 BSD-like 协议下发行。其特点是占有内存少，<a href="https://baike.baidu.com/item/并发/11024806" target="_blank" rel="noopener">并发</a>能力强，事实上 nginx 的并发能力在同类型的网页服务器中表现较好，中国大陆使用 nginx 网站用户有：百度、<a href="https://baike.baidu.com/item/京东/210931" target="_blank" rel="noopener">京东</a>、<a href="https://baike.baidu.com/item/新浪/125692" target="_blank" rel="noopener">新浪</a>、<a href="https://baike.baidu.com/item/网易/185754" target="_blank" rel="noopener">网易</a>、<a href="https://baike.baidu.com/item/腾讯/112204" target="_blank" rel="noopener">腾讯</a>、<a href="https://baike.baidu.com/item/淘宝/145661" target="_blank" rel="noopener">淘宝</a> 等。</p><p>Nginx 是一个开源且高性能、可靠的 Http Web 服务、代理服务。</p><p>开源: 直接获取源代码</p><p>高性能: 支持海量并发</p><p>可靠: 服务稳定</p><h5 id="2-我们为什么选择-Nginx-服务-？"><a href="#2-我们为什么选择-Nginx-服务-？" class="headerlink" title="2.我们为什么选择 Nginx 服务 ？"></a>2.我们为什么选择 Nginx 服务 ？</h5><p>Nginx 非常轻量</p><p>功能模块少 (源代码仅保留 http 与核心模块代码,其余不够核心代码会作为插件来安装)</p><p>代码模块化 (易读，便于二次开发，对于开发人员非常友好)</p><p>互联网公司都选择 Nginx</p><p>1.Nginx 技术成熟，具备的功能是企业最常使用而且最需要的</p><p>2.适合当前主流架构趋势, 微服务、云架构、中间层</p><p>3.统一技术栈, 降低维护成本, 降低技术更新成本。</p><h5 id="3-Nginx-的重要特性"><a href="#3-Nginx-的重要特性" class="headerlink" title="3.Nginx 的重要特性"></a>3.Nginx 的重要特性</h5><p>Nginx 采用 Epool 网络模型， Apache 采用 Select 模型</p><p>Select：当用户发起一次请求， select 模型就会进行一次遍历扫描，从而导致性能低下。</p><p>Epool：当用户发起请求， epool 模型会直接进行处理，效率高效，并无连接限制</p><br><h3 id="Nginx-安装部署"><a href="#Nginx-安装部署" class="headerlink" title="Nginx 安装部署"></a>Nginx 安装部署</h3><p>1.源码编译(1.版本随意 2.安装复杂 3.升级繁琐)</p><p>2.epel 仓库(1.版本较低 2.安装简单 3.配置不易读)</p><p>3.官方仓库(1.版本较新 2.安装简单 3.配置易读，推荐)</p><p>下面分别介绍编译安装和 yum 安装方法</p><h4 id="⦁-编译安装方法"><a href="#⦁-编译安装方法" class="headerlink" title="⦁     编译安装方法"></a>⦁     编译安装方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建www用户</span></span><br><span class="line">groupadd www -g 666</span><br><span class="line">useradd www -s /sbin/nologin -M -u 666 -g 666</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖包</span></span><br><span class="line">yum install openssl-devel pcre-devel -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载解压软件包</span></span><br><span class="line">mkdir /data/soft -p</span><br><span class="line"><span class="built_in">cd</span> /data/soft/</span><br><span class="line">wget http://nginx.org/download/nginx-1.16.0.tar.gz</span><br><span class="line">tar zxvf nginx-1.16.0.tar.gz </span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置编译参数</span></span><br><span class="line"><span class="built_in">cd</span> /data/soft/nginx-1.16.0/</span><br><span class="line">./configure --<span class="built_in">help</span></span><br><span class="line">./configure --user=www --group=www --prefix=/opt/nginx-1.16.0/ --with-http_stub_status_module --with-http_ssl_module --with-pcre</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建软链接</span></span><br><span class="line">ln -s /opt/nginx-1.16.0/ /opt/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查语法</span></span><br><span class="line">/opt/nginx/sbin/nginx -t</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line">/opt/nginx/sbin/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查测试</span></span><br><span class="line">netstat -lntup | grep nginx</span><br><span class="line">curl 10.0.1.7</span><br></pre></td></tr></table></figure><h4 id="⦁-YUM-安装方法"><a href="#⦁-YUM-安装方法" class="headerlink" title="⦁     YUM 安装方法"></a>⦁     YUM 安装方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖包</span></span><br><span class="line">yum install openssl-devel pcre-devel -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置官方 yum 源</span></span><br><span class="line">cat &gt; /etc/yum.repos.d/nginx.repo &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line"></span><br><span class="line">[nginx-mainline]</span><br><span class="line">name=nginx mainline repo</span><br><span class="line">baseurl=http://nginx.org/packages/mainline/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 nginx 服务</span></span><br><span class="line">yum install nginx -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务并配置开机自启动</span></span><br><span class="line">systemctl start nginx</span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试访问 </span></span><br><span class="line">curl 10.0.1.7</span><br></pre></td></tr></table></figure><br><h4 id="⦁-Nginx-启动方式"><a href="#⦁-Nginx-启动方式" class="headerlink" title="⦁     Nginx 启动方式"></a>⦁     Nginx 启动方式</h4><p>编译安装启动管理方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">nginx</span><br><span class="line">nginx -s reload</span><br><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure><p>yum 安装启动管理方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">systemctl start nginx</span><br><span class="line">systemctl reload nginx</span><br><span class="line">systemctl restart nginx</span><br><span class="line">systemctl stop  nginx</span><br></pre></td></tr></table></figure><h3 id="Nginx-重要配置文件说明"><a href="#Nginx-重要配置文件说明" class="headerlink" title="Nginx 重要配置文件说明"></a>Nginx 重要配置文件说明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看配置文件</span></span><br><span class="line">rpm -ql nginx                      </span><br><span class="line">/etc/logrotate.d/nginx                     <span class="comment"># nginx 日志切割的配置文件</span></span><br><span class="line">/etc/nginx/nginx.conf                      <span class="comment"># nginx 主配置文件 </span></span><br><span class="line">/etc/nginx/conf.d                          <span class="comment"># 子配置文件</span></span><br><span class="line">/etc/nginx/conf.d/default.conf             <span class="comment"># 默认展示的页面一样 </span></span><br><span class="line">/etc/nginx/mime.types                      <span class="comment"># 媒体类型 （http 协议中的文件类型）</span></span><br><span class="line">/etc/sysconfig/nginx                       <span class="comment"># systemctl 管理 nginx 的使用的文件</span></span><br><span class="line">/usr/lib/systemd/system/nginx.service      <span class="comment"># systemctl 管理 nginx（开 关 重启 reload)配置文件       </span></span><br><span class="line">/usr/sbin/nginx                            <span class="comment"># nginx命令</span></span><br><span class="line">/usr/share/nginx/html                      <span class="comment"># 站点目录 网站的根目录 </span></span><br><span class="line">/var/<span class="built_in">log</span>/nginx                             <span class="comment"># nginx 日志 access.log 访问日志</span></span><br></pre></td></tr></table></figure><p>⦁     查看已经编译的模块 <code>nginx -V</code></p><p>⦁     配置文件注解</p><p>Nginx 主配置文件 /etc/nginx/nginx.conf 是一个纯文本类型的文件，整个配置文件是以区块的形式组织的。一般，每个区块以一对大括号{}来表示开始与结束。</p><p>Nginx 主配置文件整体分为三块，分别是 </p><p>CoreModule(核心模块)</p><p>EventModule(事件驱动模块)</p><p>HttpCoreModule(http 内核模块)</p><p>⦁     第一部分：配置文件主区域配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user nginx;                <span class="comment"># 定义运行 nginx 进程的用户</span></span><br><span class="line">worker_processes  1;       <span class="comment"># Nginx 运行的 work 进程数量(建议与 CPU 数量一致或 auto)</span></span><br><span class="line"></span><br><span class="line">error_log  /var/<span class="built_in">log</span>/nginx/error.log warn;  <span class="comment"># nginx 错误日志</span></span><br><span class="line">pid        /var/run/nginx.pid;             <span class="comment"># nginx 运行 pid</span></span><br></pre></td></tr></table></figure><p>⦁     第二部分：配置文件事件区域</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;  <span class="comment"># 每个 worker 进程支持的最大连接数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⦁     第三部分：配置 http 区域</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;          <span class="comment"># Nginx 支持的媒体类型库文件</span></span><br><span class="line">    default_type  application/octet-stream;       <span class="comment"># 默认的媒体类型 </span></span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line">    </span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;    <span class="comment"># 访问日志保存路径</span></span><br><span class="line">    </span><br><span class="line">    sendfile        on;                             <span class="comment"># 开启高效传输模式</span></span><br><span class="line">    <span class="comment">#tcp_nopush     on;                       </span></span><br><span class="line">    keepalive_timeout  65;                          <span class="comment"># 连接超时时间</span></span><br><span class="line">    <span class="comment">#gzip  on;                                      # 开启压缩</span></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;               <span class="comment"># 包含子配置文件</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⦁     第四部分：子配置文件内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">egrep -v <span class="string">"# | ^$"</span> /etc/nginx/conf.d/default.conf     </span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;             <span class="comment"># 指定监听端口</span></span><br><span class="line">    server_name  localhost;      <span class="comment"># 指定监听的域名</span></span><br><span class="line">    location / &#123;              </span><br><span class="line">        root   /usr/share/nginx/html;     <span class="comment"># 定义站点的目录</span></span><br><span class="line">        index  index.html index.htm;      <span class="comment"># 定义首页文件</span></span><br><span class="line">    &#125;</span><br><span class="line">    error_page   500 502 503 504  /50x.html;   <span class="comment"># 错误页面信息</span></span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>http server location 扩展了解项</p><p>http{} 层下允许有多个 Server{} 层，一个 Server{} 层下又允许有多个 Location</p><p>http{} 标签主要用来解决用户的请求与响应。</p><p>server{} 标签主要用来响应具体的某一个网站。</p><p>location{} 标签主要用于匹配网站具体 URL 路径。</p><h3 id="Nginx-虚拟主机配置实践"><a href="#Nginx-虚拟主机配置实践" class="headerlink" title="Nginx 虚拟主机配置实践"></a>Nginx 虚拟主机配置实践</h3><h4 id="⦁-基于域名的虚拟主机"><a href="#⦁-基于域名的虚拟主机" class="headerlink" title="⦁    基于域名的虚拟主机"></a>⦁    基于域名的虚拟主机</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/nginx/nginx.conf  &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/<span class="built_in">log</span>/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line">    </span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br><span class="line">    </span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line">    </span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#include /etc/nginx/conf.d/*.conf;</span></span><br><span class="line">    server   &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.rocc.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /usr/share/nginx/html/www;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server   &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  blog.rocc.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /usr/share/nginx/html/blog;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="⦁-基于端口的虚拟主机"><a href="#⦁-基于端口的虚拟主机" class="headerlink" title="⦁     基于端口的虚拟主机"></a>⦁     基于端口的虚拟主机</h4><p>端口号优先级比域名要高</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/nginx/nginx.conf &lt;&lt; <span class="string">'EOF'</span> </span><br><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/<span class="built_in">log</span>/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line">    </span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br><span class="line">    </span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line">    </span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#include /etc/nginx/conf.d/*.conf;</span></span><br><span class="line">    server   &#123;</span><br><span class="line">        listen       81;</span><br><span class="line">        server_name  www.rocc.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /usr/share/nginx/html/www;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server   &#123;</span><br><span class="line">        listen       82;</span><br><span class="line">        server_name  blog.rocc.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /usr/share/nginx/html/blog;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="⦁-基于-IP-的虚拟主机"><a href="#⦁-基于-IP-的虚拟主机" class="headerlink" title="⦁     基于 IP 的虚拟主机"></a>⦁     基于 IP 的虚拟主机</h4><p>添加第二 IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr add 10.0.0.11/24 dev eth0</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/nginx/nginx.conf &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/<span class="built_in">log</span>/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line">    </span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br><span class="line">    </span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line">    </span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#include /etc/nginx/conf.d/*.conf;</span></span><br><span class="line">    server   &#123;</span><br><span class="line">        listen       10.0.1.7:81;</span><br><span class="line">        server_name  www.rocc.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /usr/share/nginx/html/www;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server   &#123;</span><br><span class="line">        listen       10.0.1.11:82;</span><br><span class="line">        server_name  blog.rocc.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /usr/share/nginx/html/blog;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="⦁-Nginx-虚拟主机配置优化"><a href="#⦁-Nginx-虚拟主机配置优化" class="headerlink" title="⦁     Nginx 虚拟主机配置优化"></a>⦁     Nginx 虚拟主机配置优化</h4><p>所有配置都写入一个配置文件维护起来比较麻烦，如果修改错了，影响所有的页面，所以我们应该拆分 nginx 的配置文件为各个子配置</p><p>⦁     Nginx主配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/nginx/nginx.conf &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/<span class="built_in">log</span>/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line">    </span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br><span class="line">    </span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line">    </span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line">    </span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>⦁     子配置文件 www</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/nginx/conf.d/01-www.conf &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">server   &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.rocc.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html/www;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>⦁     子配置文件 blog</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/nginx/conf.d/02-blog.conf &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">server   &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  blog.rocc.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html/blog;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>⦁     创建代码目录及首页</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/share/nginx/html/&#123;www,blog&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"www"</span> &gt; /usr/share/nginx/html/www/index.html</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"blog"</span> &gt; /usr/share/nginx/html/blog/index.html</span><br></pre></td></tr></table></figure><p>⦁     检查语法重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br><span class="line"><span class="comment"># nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span></span><br><span class="line"><span class="comment"># nginx: configuration file /etc/nginx/nginx.conf test is successful</span></span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><p>⦁     访问测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tail -1 /etc/hosts </span><br><span class="line"><span class="comment"># 10.0.1.7 www.rocc.com blog.rocc.com</span></span><br><span class="line">curl www.rocc.com</span><br><span class="line"><span class="comment"># www</span></span><br><span class="line">curl blog.rocc.com</span><br><span class="line"><span class="comment"># blog</span></span><br></pre></td></tr></table></figure><h3 id="⦁-Nginx-状态模块"><a href="#⦁-Nginx-状态模块" class="headerlink" title="⦁     Nginx 状态模块"></a>⦁     Nginx 状态模块</h3><p>nginx状态模块：  –with-http_stub_status_module</p><p>⦁    状态模块配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; status.conf &lt;&lt; EOF</span><br><span class="line">server &#123;</span><br><span class="line">   listen 80;</span><br><span class="line">   server_name  status.rocc.com;</span><br><span class="line">   stub_status on;</span><br><span class="line">   access_log off;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">tail -1 /etc/hosts   </span><br><span class="line"><span class="comment"># 10.0.1.7 www.rocc.com blog.rocc.com status.rocc.com</span></span><br><span class="line"></span><br><span class="line">nginx -t</span><br><span class="line"><span class="comment"># nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span></span><br><span class="line"><span class="comment"># nginx: configuration file /etc/nginx/nginx.conf test is successful</span></span><br><span class="line"></span><br><span class="line">systemctl restart nginx</span><br><span class="line">curl status.rocc.com </span><br><span class="line"><span class="comment"># Active connections: 1 </span></span><br><span class="line"><span class="comment"># server accepts handled requests</span></span><br><span class="line"><span class="comment">#  1 1 1 </span></span><br><span class="line"><span class="comment"># Reading: 0 Writing: 1 Waiting: 0</span></span><br></pre></td></tr></table></figure><h3 id="Nginx-日志"><a href="#Nginx-日志" class="headerlink" title="Nginx 日志"></a>Nginx 日志</h3><p>⦁     日志字段解释</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$remote_addr</span> <span class="comment"># 记录客户端 IP 地址</span></span><br><span class="line"><span class="variable">$remote_user</span> <span class="comment"># 记录客户端用户名</span></span><br><span class="line"><span class="variable">$time_local</span> <span class="comment"># 记录通用的本地时间</span></span><br><span class="line"><span class="variable">$time_iso8601</span> <span class="comment"># 记录 ISO8601 标准格式下的本地时间</span></span><br><span class="line"><span class="variable">$request</span> <span class="comment"># 记录请求的方法以及请求的 http 协议</span></span><br><span class="line"><span class="variable">$status</span> <span class="comment"># 记录请求状态码(用于定位错误信息)</span></span><br><span class="line"><span class="variable">$body_bytes_sent</span> <span class="comment"># 发送给客户端的资源字节数，不包括响应头的大小</span></span><br><span class="line"><span class="variable">$bytes_sent</span> <span class="comment"># 发送给客户端的总字节数</span></span><br><span class="line"><span class="variable">$msec</span> <span class="comment"># 日志写入时间。单位为秒，精度是毫秒。</span></span><br><span class="line"><span class="variable">$http_referer</span> <span class="comment"># 记录从哪个页面链接访问过来的</span></span><br><span class="line"><span class="variable">$http_user_agent</span> <span class="comment"># 记录客户端浏览器相关信息</span></span><br><span class="line"><span class="variable">$http_x_forwarded_for</span> <span class="comment">#记录客户端 IP 地址</span></span><br><span class="line"><span class="variable">$request_length</span> <span class="comment"># 请求的长度（包括请求行， 请求头和请求正文）。</span></span><br><span class="line"><span class="variable">$request_time</span> <span class="comment"># 请求花费的时间，单位为秒，精度毫秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注:如果 Nginx 位于负载均衡器， nginx 反向代理之后， web 服务器无法直接获取到客 户端真实的 IP 地址。</span></span><br><span class="line"><span class="comment"># $remote_addr 获取的是反向代理的 IP 地址。 反向代理服务器在转发请求的 http 头信息中，</span></span><br><span class="line"><span class="comment"># 增加 X-Forwarded-For 信息，用来记录客户端 IP 地址和客户端请求的服务器地址。</span></span><br></pre></td></tr></table></figure><h3 id="Nginx-防坑指南"><a href="#Nginx-防坑指南" class="headerlink" title="Nginx 防坑指南"></a>Nginx 防坑指南</h3><p>1.端口优先级高于域名</p><p>2.ip + 端口的优先级是最高的</p><p>3.所有域名都匹配不上的时候,默认转发到根据 ASCII 码排序优先的配置文件</p><p>4.可以添加参数指定默认匹配的页面,这样就无需修改文件名了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    server_name  www.my.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /code/www;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="常用模块"><a href="#常用模块" class="headerlink" title="常用模块"></a>常用模块</h1><h2 id="1-Nginx-目录索引"><a href="#1-Nginx-目录索引" class="headerlink" title="1. Nginx 目录索引"></a>1. Nginx 目录索引</h2><h3 id="autoindex-语法"><a href="#autoindex-语法" class="headerlink" title="autoindex 语法"></a>autoindex 语法</h3><p>语法 Syntax ：autoindex on | off;</p><p>默认值 Default ：autoindex off;</p><p>环境 Context ：http, server, location</p><h3 id="autoindex-常用参数"><a href="#autoindex-常用参数" class="headerlink" title="autoindex 常用参数"></a>autoindex 常用参数</h3><p><strong>autoindex_exact_size off;</strong></p><p>默认为 on， 显示出文件的确切大小，单位是 bytes。</p><p>修改为 off，显示出文件的大概大小，单位是 kB 或者 MB 或者 GB。</p><p><strong>autoindex_localtime on;</strong></p><p>默认为 off，显示的文件时间为 GMT 时间。</p><p>修改为 on， 显示的文件时间为文件的服务器时间。</p><p><strong>charset utf-8,gbk;</strong></p><p>默认中文目录乱码，添加上解决乱码。</p><h3 id="配置实例"><a href="#配置实例" class="headerlink" title="配置实例"></a>配置实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  download.rocc.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root  /usr/share/nginx/html_download ;</span><br><span class="line">        charset utf-8,gbk;</span><br><span class="line">        autoindex on;</span><br><span class="line">        autoindex_localtime on;</span><br><span class="line">        autoindex_exact_size off;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-Nginx-状态监控"><a href="#2-Nginx-状态监控" class="headerlink" title="2. Nginx 状态监控"></a>2. Nginx 状态监控</h2><h3 id="stub-status-语法（ngx-http-stub-status-module）"><a href="#stub-status-语法（ngx-http-stub-status-module）" class="headerlink" title="stub_status 语法（ngx_http_stub_status_module）"></a>stub_status 语法（ngx_http_stub_status_module）</h3><p>语法 Syntax ：stub_status;</p><p>环境 Context ：server, location</p><h3 id="状态字段释义"><a href="#状态字段释义" class="headerlink" title="状态字段释义"></a>状态字段释义</h3><p>Active connections # 当前活动的连接数</p><p>accepts    # 当前的总连接数 TCP</p><p>handled    # 成功的连接数 TCP</p><p>requests    # 总的 http 请求数</p><p>Reading    # 请求</p><p>Writing    # 响应</p><p>Waiting # 等待的请求数，开启了 keepalive</p><p>注意, 一次 TCP 的连接，可以发起多次 http 的请求, 如下参数可配置进行验证</p><p>keepalive_timeout 0;    # 类似于关闭长连接</p><p>keepalive_timeout 65;    # 65s 没有活动则断开连接</p><h3 id="配置实例-1"><a href="#配置实例-1" class="headerlink" title="配置实例"></a>配置实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  download.rocc.com;</span><br><span class="line">access_log off;</span><br><span class="line"></span><br><span class="line">    location /status &#123;</span><br><span class="line">        stub_status;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Nginx-访问控制"><a href="#3-Nginx-访问控制" class="headerlink" title="3. Nginx 访问控制"></a>3. Nginx 访问控制</h2><h3 id="基于-IP-的访问控制-ngx-http-access-module"><a href="#基于-IP-的访问控制-ngx-http-access-module" class="headerlink" title="基于 IP 的访问控制 ngx_http_access_module"></a>基于 IP 的访问控制 ngx_http_access_module</h3><p><strong>允许配置语法</strong></p><p>Syntax: allow address | CIDR | unix: | all;</p><p>Default: —</p><p>Context: http, server, location, limit_except</p><p><strong>拒绝配置语法</strong></p><p>Syntax: deny address | CIDR | unix: | all;</p><p>Default: —</p><p>Context: http, server, location, limit_except</p><p><strong>配置实例（只允许 3.3.3.1 访问，其他全部拒绝）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">……                  # 省略</span><br><span class="line">    allow 3.3.3.1;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置实例（只拒绝 3.3.3.0/24 网段访问，其他全部允许访问）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">……                  # 省略</span><br><span class="line">    deny 3.3.3.0&#x2F;24;</span><br><span class="line">    allow all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于用户登录认证的访问控制-ngx-http-auth-basic-module"><a href="#基于用户登录认证的访问控制-ngx-http-auth-basic-module" class="headerlink" title="基于用户登录认证的访问控制 ngx_http_auth_basic_module"></a>基于用户登录认证的访问控制 ngx_http_auth_basic_module</h3><p><strong>访问提示字符串语法</strong></p><p>Syntax: auth_basic string | off;</p><p>Default: auth_basic off;</p><p>Context: http, server, location, limit_except</p><p><strong>账户密码文件语法</strong></p><p>Syntax: auth_basic_user_file file;</p><p>Default: -</p><p>Context: http, server, location, limit_except</p><p><strong>配置实例</strong></p><p>需要安装 httpd-tools，该包中携带了 htpasswd 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install httpd-tools -y</span><br></pre></td></tr></table></figure><p>创建新的密码文件, -c 创建新文件 -b 允许命令行输入密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htpasswd -b -c &#x2F;etc&#x2F;nginx&#x2F;auth_conf alan linux</span><br></pre></td></tr></table></figure><p>配置默认网站配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    server_name  rocc.com;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html ;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        auth_basic &quot;Auth access WWW Input Your Password!&quot;;</span><br><span class="line">        auth_basic_user_file auth_conf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nginx-请求限制"><a href="#Nginx-请求限制" class="headerlink" title="Nginx 请求限制"></a>Nginx 请求限制</h2><p>语法 (ngx_http_limit_req_module)</p><p>Syntax: limit_req_zone key zone=name:size rate=rate;</p><p>Default: -</p><p>Context: http</p><p>引用限速模块</p><p>Syntax: limit_conn zone number [burst=number] [nodelay];</p><p>Default: -</p><p>Context: http, server, location</p><p>参数介绍</p><p>定义一条规则</p><p>limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;</p><p>limit_req_zone    # 引用限速模块</p><p>$binary_remote_addr    # 判定条件，每个请求的 IP</p><p>zone=alan:10m    # 定义一个 zone 名称</p><p>rate=1r/s;    # 限制速度，1 秒 1 次</p><p>引用一条限速规则</p><p>limit_req zone=two burst=5 nodelay;</p><p>limit_req    # 引用限速规则语法</p><p>zone=alan    # 引用哪一条规则</p><p>burst=5    # 令牌桶，允许排队的数量</p><p>nodelay;    # 如果不希望在请求被限制时延迟过多的请求，则应使用参数 nodelay</p><p><strong>配置实例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">limit_req_zone $binary_remote_addr zone&#x3D;alan:10m rate&#x3D;1r&#x2F;s;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    server_name  rocc.com;</span><br><span class="line">    limit_req zone&#x3D;alan burst&#x3D;3 nodelay;</span><br><span class="line">access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;www.access.log  main;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html ;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nginx-Location"><a href="#Nginx-Location" class="headerlink" title="Nginx Location"></a>Nginx Location</h2><p>Location 语法</p><p>Syntax:    location [ = | ~ | <del>* | ^</del> ] uri { … }</p><p>location @name { … }</p><p>Default:    —</p><p>Context:    server, location</p><p>Location 语法优先级排序</p><h3 id="配置实例测试-Location-优先级"><a href="#配置实例测试-Location-优先级" class="headerlink" title="配置实例测试 Location 优先级"></a>配置实例测试 Location 优先级</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> server_name  rocc.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        rewrite ^  weibo.com ;</span><br><span class="line">    &#125;</span><br><span class="line">    location = / &#123;</span><br><span class="line">        rewrite ^  &lt;https://weibo.com/?topnav=1&amp;mod=logo&gt; ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /documents/ &#123;</span><br><span class="line">        rewrite ^  &lt;http://www.baidu.com&gt; ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location ^~ /q &#123;</span><br><span class="line">        rewrite ^  &lt;https://www.qq.com/?fromdefault&gt; ;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~* \\.(gif|jpg|jpeg)$ &#123;</span><br><span class="line">        rewrite ^  &lt;https://fanyi.baidu.com/?aldtype=16047<span class="comment">#auto/zh/&gt; ;</span></span><br><span class="line">    &#125;</span><br><span class="line">    location ~ \\.mp4$ &#123;</span><br><span class="line">        rewrite ^  &lt;https://man.linuxde.net/&gt; ;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~* /* &#123;</span><br><span class="line">        rewrite ^  &lt;http://www.baidu.com&gt; ;</span><br><span class="line">    &#125;</span><br><span class="line">    access_log off;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h1><h2 id="代理介绍"><a href="#代理介绍" class="headerlink" title="代理介绍"></a>代理介绍</h2><p><strong>现实生活中代理的场景:</strong></p><p>房东</p><p>订票平台</p><p><strong>正向代理与反向代理</strong></p><p>以访问 Google 为例，客户端连接到 VPN 相当于正向代理。</p><p>VPN 代理请求访问后端服务器并返回属于反向代理。</p><h2 id="Nginx-反向代理参数解释"><a href="#Nginx-反向代理参数解释" class="headerlink" title="Nginx 反向代理参数解释"></a>Nginx 反向代理参数解释</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header Host <span class="variable">$http_host</span>; </span><br><span class="line"><span class="comment"># lb 服务器将用户访问网站的 HOST 信息传递后后端的 web 服务器</span></span><br><span class="line"></span><br><span class="line">proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;    </span><br><span class="line"><span class="comment"># 将用户的真实 IP 传递给后端的 web 服务器</span></span><br><span class="line"></span><br><span class="line">proxy_connect_timeout 30;  <span class="comment"># 代理与后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line">proxy_send_timeout 60;     <span class="comment"># 后端服务器数据回传给 nginx 代理超时时间</span></span><br><span class="line">proxy_read_timeout 60;     <span class="comment"># 代理等待后端服务器的响应时间</span></span><br><span class="line"></span><br><span class="line">proxy_buffering on;               </span><br><span class="line"><span class="comment"># 把后端返回的内容先放到缓冲区当中，然后再返回给客户端,边收边传,不是全部接收完再传给客户端</span></span><br><span class="line"></span><br><span class="line">proxy_buffer_size 32k;     <span class="comment"># 设置 nginx 代理保存用户头信息的缓冲区大小</span></span><br><span class="line">proxy_buffers 4 128k;      <span class="comment"># proxy_buffers 缓冲区</span></span><br></pre></td></tr></table></figure><h2 id="优化代理配置文件"><a href="#优化代理配置文件" class="headerlink" title="优化代理配置文件"></a>优化代理配置文件</h2><p>将配置写入新文件，调用时使用 include 引用即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/nginx/proxy_params &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">proxy_connect_timeout 30;</span><br><span class="line">proxy_send_timeout 60;</span><br><span class="line">proxy_read_timeout 60;</span><br><span class="line">proxy_buffering on;</span><br><span class="line">proxy_buffer_size 32k;</span><br><span class="line">proxy_buffers 4 128k;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="Nginx-反向代理实践"><a href="#Nginx-反向代理实践" class="headerlink" title="Nginx 反向代理实践"></a>Nginx 反向代理实践</h2><p>lb01            10.0.0.11</p><p>web01    10.0.0.21</p><p>需求：访问 lb01 的 80 端口代理到 web01 的 8080 端口</p><h3 id="web01-配置"><a href="#web01-配置" class="headerlink" title="web01 配置"></a>web01 配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/nginx/conf.d/web.conf &lt;&lt; EOF</span><br><span class="line">server &#123;</span><br><span class="line">    listen 8080;</span><br><span class="line"><span class="comment">#    server_name www.rocc.top;</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /code;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">mkdir /code -p</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"web01"</span> &gt; /code/index.html</span><br><span class="line"></span><br><span class="line">nginx -t</span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><h3 id="lb01-配置"><a href="#lb01-配置" class="headerlink" title="lb01 配置"></a>lb01 配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;proxy.conf &lt;&lt; EOF</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.rocc.top;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_pass &lt;http:&#x2F;&#x2F;10.0.0.21:8080&gt;;</span><br><span class="line">        include proxy_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">nginx -t </span><br><span class="line">systemctl restart nginx</span><br><span class="line"></span><br><span class="line">echo &#39;10.0.0.11 www.rocc.top&#39; &gt;&gt; &#x2F;etc&#x2F;hosts</span><br></pre></td></tr></table></figure><h3 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl www.rocc.top</span><br></pre></td></tr></table></figure><h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><h2 id="为什么需要负载均衡"><a href="#为什么需要负载均衡" class="headerlink" title="为什么需要负载均衡"></a>为什么需要负载均衡</h2><p>我们的 Web 服务器直接面向用户，往往要承载大量并发请求，单台服务器难以负荷。</p><p>我使用多台 WEB 服务器组成集群，前端使用 Nginx 负载均衡，将请求分散的打到我们的后端服务器集群中实现负载的分发。</p><p>那么会大大提升系统的吞吐率、请求性能、高容灾。</p><h2 id="负载均衡和反向代理的关系"><a href="#负载均衡和反向代理的关系" class="headerlink" title="负载均衡和反向代理的关系"></a>负载均衡和反向代理的关系</h2><p>因为反向代理多台机器，所以可以达到负载均衡的效果</p><h2 id="负载均衡配置场景"><a href="#负载均衡配置场景" class="headerlink" title="负载均衡配置场景"></a>负载均衡配置场景</h2><h3 id="四层负载均衡"><a href="#四层负载均衡" class="headerlink" title="四层负载均衡"></a>四层负载均衡</h3><p>所谓四层负载均衡指的是 OSI 七层模型中的传输层。</p><p>Nginx 已经能支持 TCP/IP 的控制，所以只需要对客户端的请求进行 TCP/IP 协议的包转发就可以实现负载均衡。</p><p>它的好处是性能非常快、只需要底层进行应用处理，而不需要进行一些复杂的逻辑。</p><h3 id="七层负载均衡"><a href="#七层负载均衡" class="headerlink" title="七层负载均衡"></a>七层负载均衡</h3><p>七层负载均衡它是在应用层，那么它可以完成很多应用方面的协议请求。</p><p>比如我们说的 http 应用的负载均衡，它可以实现 http 信息的改写、头信息的改写、安全应用规则控制、URL 匹配规则控制、以及转发,rewrite 等等的规则。</p><p>所以在应用层的服务里面，我们可以做的内容就更多，那么 Nginx 则是一个典型的七层负载均衡。</p><h3 id="四层与七层负载均衡对比"><a href="#四层与七层负载均衡对比" class="headerlink" title="四层与七层负载均衡对比"></a>四层与七层负载均衡对比</h3><p>四层负载均衡数据包在底层就进行了分发，而七层负载均衡数据包则是在最顶层进行分发</p><p>由此可以看出，七层负载均衡效率没有四负载均衡高。</p><p>但七层负载均衡更贴近于服务。</p><p>如:http 协议就是七层协议，我们可以用 Nginx 可以作会话保持，URL 路径规则匹配、head 头改写等等</p><p>这些是四层负载均衡无法实现的。</p><h2 id="Nginx-负载均衡实践"><a href="#Nginx-负载均衡实践" class="headerlink" title="Nginx 负载均衡实践"></a>Nginx 负载均衡实践</h2><h3 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h3><p>访问 bbs.rocc.top 跳转到 172.16.1.7</p><p>访问 <a href="https://www.notion.so/www.rocc.top" target="_blank" rel="noopener">www.rocc.top</a> 跳转到 172.16.1.8</p><h3 id="主机目录规划"><a href="#主机目录规划" class="headerlink" title="主机目录规划"></a>主机目录规划</h3><p>lb01            10.0.0.5</p><p>web01    172.16.1.7</p><p>web02    172.16.1.8</p><h3 id="Nginx-配置文件"><a href="#Nginx-配置文件" class="headerlink" title="Nginx 配置文件"></a>Nginx 配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/nginx/conf.d/www.conf &lt;&lt; EOF</span><br><span class="line">server &#123;</span><br><span class="line">    server_name www.rocc.top;</span><br><span class="line">    listen 80;</span><br><span class="line">    root /code/;</span><br><span class="line">    index www.html;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt; /etc/nginx/conf.d/bbs.conf &lt;&lt; EOF</span><br><span class="line">server &#123;</span><br><span class="line">    server_name bbs.rocc.top;</span><br><span class="line">    listen 80;</span><br><span class="line">    root /code/;</span><br><span class="line">    index bbs.html;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="生成测试页面"><a href="#生成测试页面" class="headerlink" title="生成测试页面"></a>生成测试页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$(hostname)</span> bbs"</span> &gt; /code/bbs.html</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$(hostname)</span> www"</span> &gt; /code/www.html</span><br></pre></td></tr></table></figure><h3 id="Web-服务器测试访问"><a href="#Web-服务器测试访问" class="headerlink" title="Web 服务器测试访问"></a>Web 服务器测试访问</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">systemctl restart nginx</span><br><span class="line">curl -H <span class="string">'Host:www.rocc.top'</span> 127.0.0.1</span><br><span class="line">curl -H <span class="string">'Host:bbs.rocc.top'</span> 127.0.0.1</span><br></pre></td></tr></table></figure><h3 id="lb-服务器-nginx-配置"><a href="#lb-服务器-nginx-配置" class="headerlink" title="lb 服务器 nginx 配置"></a>lb 服务器 nginx 配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/nginx/conf.d/proxy.conf &lt;&lt; EOF</span><br><span class="line">upstream bbs_pools&#123;</span><br><span class="line">        server 172.16.1.7;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">upstream www_pools&#123;</span><br><span class="line">        server 172.16.1.8;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.rocc.top;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://www_pools;</span><br><span class="line">        include proxy_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name bbs.rocc.top;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://bbs_pools;</span><br><span class="line">        include proxy_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nginx -t </span><br><span class="line">systemctl restart nginx</span><br><span class="line">curl -H <span class="string">'Host:www.rocc.top'</span> 10.0.0.5</span><br><span class="line">curl -H <span class="string">'Host:bbs.rocc.top'</span> 10.0.0.5</span><br></pre></td></tr></table></figure><h2 id="负载均衡调度算法实验"><a href="#负载均衡调度算法实验" class="headerlink" title="负载均衡调度算法实验"></a>负载均衡调度算法实验</h2><h3 id="Weight-实验"><a href="#Weight-实验" class="headerlink" title="Weight 实验"></a>Weight 实验</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream www_pools &#123;</span><br><span class="line">   server 172.16.1.7 weight=1;</span><br><span class="line">   server 172.16.1.8 weight=2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ip-hash-实验"><a href="#ip-hash-实验" class="headerlink" title="ip_hash 实验"></a>ip_hash 实验</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream www_pools &#123;</span><br><span class="line">   ip_hash;</span><br><span class="line">   server 172.16.1.7 ;</span><br><span class="line">   server 172.16.1.8 ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="url-hash-实验"><a href="#url-hash-实验" class="headerlink" title="url_hash 实验"></a>url_hash 实验</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream www_pools &#123;</span><br><span class="line">   <span class="built_in">hash</span>   <span class="variable">$request_uri</span>;  </span><br><span class="line">   server 172.16.1.7 ;</span><br><span class="line">   server 172.16.1.8 ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试命令"><a href="#测试命令" class="headerlink" title="测试命令"></a>测试命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..100&#125;;<span class="keyword">do</span> curl -s -H <span class="string">"host:www.rocc.top"</span> 127.0.0.1;<span class="keyword">done</span> | grep web02 | wc -l</span><br></pre></td></tr></table></figure><h2 id="负载均衡配置参数实验"><a href="#负载均衡配置参数实验" class="headerlink" title="负载均衡配置参数实验"></a>负载均衡配置参数实验</h2><h3 id="Down-参数"><a href="#Down-参数" class="headerlink" title="Down 参数"></a>Down 参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">upstream www_pools &#123;</span><br><span class="line">   server 172.16.1.7 down;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Backup-参数"><a href="#Backup-参数" class="headerlink" title="Backup 参数"></a>Backup 参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> upstream www_pools &#123;</span><br><span class="line">   server 172.16.1.7 down;</span><br><span class="line">   server 172.16.1.8 backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="根据条件转发实验"><a href="#根据条件转发实验" class="headerlink" title="根据条件转发实验"></a>根据条件转发实验</h2><h3 id="根据客户端类型转发"><a href="#根据客户端类型转发" class="headerlink" title="根据客户端类型转发"></a>根据客户端类型转发</h3><p>需求：</p><p>如果用户是 iphone 就跳转到 iphone 页面</p><p>如果用户是安卓就跳转到安卓页面</p><p>如果用户是 pc 就跳转到 pc 页面</p><p>如果用户是 IE 就返回 403</p><p><strong>Web 服务器 nginx 配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/nginx/conf.d/sj.conf &lt;&lt; EOF</span><br><span class="line">server &#123;</span><br><span class="line">    listen 8080;</span><br><span class="line">    server_name sj.rocc.top;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /code/android;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 8081;</span><br><span class="line">    server_name sj.rocc.top;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /code/iphone;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 8082;</span><br><span class="line">    server_name sj.rocc.top;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /code/pc;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p><strong>生成测试页面</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /code/&#123;android,iphone,pc&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$(hostname)</span> PC"</span> &gt; /code/pc/index.html</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$(hostname)</span> Iphone"</span> &gt; /code/iphone/index.html</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$(hostname)</span> Android"</span> &gt; /code/android/index.html</span><br><span class="line">nginx -t</span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><p><strong>lb 服务器配置 nginx</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/nginx/conf.d/sj.conf &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">upstream android &#123;</span><br><span class="line">    server 172.16.1.8:8080;</span><br><span class="line">&#125;</span><br><span class="line">upstream iphone &#123;</span><br><span class="line">    server 172.16.1.7:8081;</span><br><span class="line">&#125;</span><br><span class="line">upstream pc &#123;</span><br><span class="line">    server 172.16.1.7:8082;</span><br><span class="line">    server 172.16.1.8:8082;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name sj.rocc.top;</span><br><span class="line">    location / &#123;</span><br><span class="line">        <span class="comment">#默认跳转至 pc 站点</span></span><br><span class="line">        proxy_pass &lt;http://pc&gt;;</span><br><span class="line">        include proxy_params;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#如果客户端是 Iphone 则跳转到 iphone 的资源池</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~* <span class="string">"Iphone"</span>) &#123;</span><br><span class="line">            proxy_pass &lt;http://iphone&gt;;</span><br><span class="line">        &#125; </span><br><span class="line">    </span><br><span class="line">        <span class="comment">#如果客户端是 Android 则跳转到 android 的资源池</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~* <span class="string">"Android"</span>)&#123;</span><br><span class="line">            proxy_pass &lt;http://android&gt;;</span><br><span class="line">        &#125; </span><br><span class="line">    </span><br><span class="line">        <span class="comment">#如果客户端是 IE 浏览器，则返回 403 错误。</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~* <span class="string">"msie"</span>)&#123;</span><br><span class="line">            <span class="built_in">return</span> 403;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p><strong>检查并重启 nginx</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><p><strong>测试访问</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"10.0.0.5 sj.oldboy.com"</span> &gt;&gt; /etc/hosts </span><br><span class="line">curl sj.oldboy.com</span><br><span class="line">curl -A <span class="string">"iphone"</span> sj.rocc.top      </span><br><span class="line">curl -A <span class="string">"android"</span> sj.rocc.top </span><br><span class="line">curl -A <span class="string">"msie"</span> sj.rocc.top</span><br></pre></td></tr></table></figure><h3 id="根据文件类型转发"><a href="#根据文件类型转发" class="headerlink" title="根据文件类型转发"></a>根据文件类型转发</h3><p>需求</p><p>访问图片格式就跳转到web01</p><p>访问其他地址就跳转到web02</p><p><strong>Web 服务器配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/nginx/conf.d/www.conf &lt;&lt; EOF</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.rocc.top;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /code;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p><strong>生成测试页面</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$(hostname)</span> www"</span> &gt; /code/index.html</span><br><span class="line"><span class="built_in">cd</span> /code/ &amp;&amp; wget -O sun.jpg &lt;http://pic.51yuansu.com/pic3/cover/02/27/64/59c008e1c7954_610.jpg&gt;</span><br></pre></td></tr></table></figure><p><strong>lb 服务器 nginx 配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/nginx/conf.d/jpg.conf &lt;&lt; EOF</span><br><span class="line">upstream static &#123;</span><br><span class="line">    server 172.16.1.7;</span><br><span class="line">&#125;</span><br><span class="line">upstream default &#123;</span><br><span class="line">    server 172.16.1.8;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.rocc.top;</span><br><span class="line">    location / &#123;</span><br><span class="line">            proxy_pass &lt;http://default&gt;;</span><br><span class="line">             include proxy_params;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ .*.(gif|jpg|jpeg|png|bmp|swf|css|js)$ &#123;</span><br><span class="line">            proxy_pass &lt;http://static&gt;;</span><br><span class="line">            include proxy_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p><strong>访问测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl www.rocc.top</span><br><span class="line">curl www.rocc.top/sun.jpg</span><br></pre></td></tr></table></figure><h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><h2 id="影响性能的主要因素"><a href="#影响性能的主要因素" class="headerlink" title="影响性能的主要因素"></a>影响性能的主要因素</h2><p>1、网络</p><ul><li>网络的流量</li><li>网络是否丢包</li><li>这些会影响 http 的请求与调用</li></ul><p>2、系统</p><ul><li>硬件有没有磁盘损坏，磁盘速率</li><li>系统的负载、内存、系统稳定性</li></ul><p>3、服务</p><ul><li>连接优化、请求优化</li><li>根据业务形态做对应的服务设置</li></ul><p>4、程序</p><ul><li>接口性能</li><li>处理速度</li><li>程序执行效率</li></ul><p>5、数据库</p><p>每个架构服务与服务之间都或多或少有一些关联，我们需要将整个架构进行分层，找到对应系统或服务的短板，然后进行优化。</p><h2 id="系统性能优化"><a href="#系统性能优化" class="headerlink" title="系统性能优化"></a>系统性能优化</h2><p>文件句柄（文件描述符），Linux 一切皆文件，文件句柄可以理解为就是一个索引。</p><ul><li>文件句柄会随着我们进程的调用频繁增加</li><li>系统默认文件句柄是有限制的，不能让一个进程无限的调用</li><li>需要限制每个进程和每个服务使用多大的文件句柄</li><li>文件句柄是必须要调整的优化参数</li></ul><p>设置方式：</p><ul><li>系统全局性修改</li><li>用户局部性修改</li><li>进程局部性修改</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">配置文件 &#x2F;etc&#x2F;security&#x2F;limits.conf</span><br><span class="line"></span><br><span class="line">1、系统全局性修改</span><br><span class="line"># * 代表所有用户</span><br><span class="line">* soft nofile 25535</span><br><span class="line">* hard nofile 25535</span><br><span class="line"></span><br><span class="line">2.用户局部性修改</span><br><span class="line"># 针对 root 用户，soft 仅提醒，hard 限制，nofile 打开最大文件数</span><br><span class="line">root soft nofile 65535</span><br><span class="line">root hard nofile 65535</span><br><span class="line"></span><br><span class="line">3.进程局部性修改</span><br><span class="line"># 针对 nginx 进程 （nginx 配置文件中设置）</span><br><span class="line">worker_rlimit_nofile 100000</span><br><span class="line"></span><br><span class="line">4.调整内核参数：让 time_wait 状态重用(端口重用)[flag]</span><br><span class="line">vim &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line">net.ipv4.tcp_tw_reuse &#x3D; 1</span><br><span class="line">net.ipv4.tcp_timestamps &#x3D; 1</span><br><span class="line"></span><br><span class="line"># 查看添加的内核参数</span><br><span class="line">sysctl -p</span><br><span class="line"></span><br><span class="line"># 查看所有内核参数</span><br><span class="line">sysctl -a</span><br></pre></td></tr></table></figure><p>在高并发短连接的 TCP 服务器上，当服务器处理完请求后立刻主动正常关闭连接。这个场景下会出现大量 socket 处于 TIME_WAIT 状态。如果客户端的并发量持续很高，此时部分客户端就会显示连接不上。 我来解释下这个场景。主动正常关闭 TCP 连接，都会出现 TIMEWAIT。</p><p>为什么我们要关注这个高并发短连接呢？有两个方面需要注意：</p><ol><li>高并发可以让服务器在短时间范围内同时占用大量端口，而端口有个 <code>0 ~ 65535</code> 的范围，并不是很多，刨除系统和其他服务要用的，剩下的就更少了。</li><li>在这个场景中，短连接表示业务处理 + 传输数据的时间远远小于 <code>TIMEWAIT</code> 超时的时间的连接</li></ol><p>这里有个相对长短的概念，比如取一个 web 页面,<code>1</code> 秒钟的 <code>http</code> 短连接处理完业务，在关闭连接之后，这个业务用过的端口会停留在<code>TIMEWAIT</code> 状态几分钟，而这几分钟，其他<code>HTTP</code>请求来临的时候是无法占用此端口的。单用这个业务计算服务器的利用率会发现，服务器干正经事的时间和端口（资源）被挂着无法被使用的时间的比例是 1：几百，服务器资源严重浪费。（说个题外话，从这个意义出发来考虑服务器性能调优的话，长连接业务的服务就不需要考虑<code>TIMEWAIT</code>状态。同时，假如你对服务器业务场景非常熟悉，你会发现，在实际业务场景中，一般长连接对应的业务的并发量并不会很高。</p><h2 id="Nginx-性能优化"><a href="#Nginx-性能优化" class="headerlink" title="Nginx 性能优化"></a>Nginx 性能优化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/<span class="built_in">log</span>/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment"># cpu 亲和</span></span><br><span class="line"><span class="comment"># nginx 进程数，建议按照 cpu 的核心数来指定</span></span><br><span class="line">worker_processes auto;</span><br><span class="line"><span class="comment"># 将不同的进程绑定到不同的 CPU 核心</span></span><br><span class="line">worker_cpu_affinity auto;</span><br><span class="line"></span><br><span class="line"><span class="comment"># worker 进程的最大打开文件数</span></span><br><span class="line">worker_rlimit_nofile 30000</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">  <span class="comment"># 网络 i/o 模型</span></span><br><span class="line">  use epoll;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 调整 Nginx 单个进程允许的客户端最大连接数（max_clients = worker_processes * worker_connections）</span></span><br><span class="line">  worker_connections 10000;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 默认情况下，Nginx 进程只会在一个时刻接收一个新的连接，我们可以配置 multi_accept 为 on，实现在一个时刻内可以接收多个新的连接，提高处理效率。该参数默认是 off，建议开启。</span></span><br><span class="line">  multi_accept on;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 指定使用 utf-8 字符集</span></span><br><span class="line">    charset utf-8;</span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line"></span><br><span class="line">    log_format json <span class="string">'&#123; "time_local": "$time_local", '</span></span><br><span class="line">                             <span class="string">'"remote_addr": "$remote_addr", '</span></span><br><span class="line">                             <span class="string">'"referer": "$http_referer", '</span></span><br><span class="line">                             <span class="string">'"request": "$request", '</span></span><br><span class="line">                             <span class="string">'"status": $status, '</span></span><br><span class="line">                             <span class="string">'"bytes": $body_bytes_sent, '</span></span><br><span class="line">                             <span class="string">'"agent": "$http_user_agent", '</span></span><br><span class="line">                             <span class="string">'"x_forwarded": "$http_x_forwarded_for", '</span></span><br><span class="line">                             <span class="string">'"up_addr": "$upstream_addr",'</span></span><br><span class="line">                             <span class="string">'"up_host": "$upstream_http_host",'</span></span><br><span class="line">                             <span class="string">'"upstream_time": "$upstream_response_time",'</span></span><br><span class="line">                             <span class="string">'"request_time": "$request_time"'</span></span><br><span class="line">       <span class="string">' &#125;'</span>;</span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  json;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启文件的高效传输</span></span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 静态资源服务时建议开启</span></span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态资源服务时建议开启</span></span><br><span class="line">    tcp_nodelay        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Gzip 压缩模块</span></span><br><span class="line">    gzip  on;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 关闭 IE 6 版本的压缩（IE 6 不支持压缩）</span></span><br><span class="line">    gzip_disable <span class="string">"MSIE [1-6]\\."</span>;</span><br><span class="line">    gzip_http_version 1.1;</span><br><span class="line">    </span><br><span class="line"><span class="comment"># Virtal Server </span></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更详细的 Nginx 参数性能优化参考 <a href="https://segmentfault.com/a/1190000017933715" target="_blank" rel="noopener">https://segmentfault.com/a/1190000017933715</a></p><h3 id="优化-Nginx-进程数量"><a href="#优化-Nginx-进程数量" class="headerlink" title="优化 Nginx 进程数量"></a>优化 Nginx 进程数量</h3><p>配置参数如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker_processes 1; <span class="comment"># 指定 Nginx 要开启的进程数，结尾的数字就是进程的个数，可以为 auto</span></span><br></pre></td></tr></table></figure><p>这个参数调整的是 Nginx 服务的 worker 进程数，Nginx 有 Master 进程和 worker 进程之分，Master 为管理进程、真正接待“顾客”的是 worker 进程。</p><p>进程个数的策略：worker 进程数可以设置为等于 CPU 的核数。高流量高并发场合也可以考虑将进程数提高至 CPU 核数 x 2。这个参数除了要和 CPU 核数匹配之外，也与硬盘存储的数据及系统的负载有关，设置为 CPU 核数是个好的起始配置，也是官方建议的。</p><p>当然，如果想省麻烦也可以配置为<code>worker_processes auto;</code>，将由 Nginx 自行决定 worker 数量。当访问量快速增加时，Nginx 就会临时 fork 新进程来缩短系统的瞬时开销和降低服务的时间。</p><h3 id="将不同的进程绑定到不同的CPU"><a href="#将不同的进程绑定到不同的CPU" class="headerlink" title="将不同的进程绑定到不同的CPU"></a>将不同的进程绑定到不同的CPU</h3><p>默认情况下，Nginx 的多个进程有可能运行在同一个 CPU 核上，导致 Nginx 进程使用硬件的资源不均，这就需要制定进程分配到指定的 CPU 核上处理，达到充分有效利用硬件的目的。配置参数如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">worker_processes 4;</span><br><span class="line">worker_cpu_affinity 0001 0010 0100 1000;</span><br></pre></td></tr></table></figure><p>其中 <code>worker_cpu_affinity</code> 就是配置 Nginx 进程与 CPU 亲和力的参数，即把不同的进程分给不同的 CPU 核处理。这里的<code>0001 0010 0100 1000</code>是掩码，分别代表第1、2、3、4核CPU。上述配置会为每个进程分配一核CPU处理。</p><p>当然，如果想省麻烦也可以配置<code>worker_cpu_affinity auto;</code>，将由 Nginx 按需自动分配。</p><h3 id="Nginx-事件处理模型优化"><a href="#Nginx-事件处理模型优化" class="headerlink" title="Nginx 事件处理模型优化"></a>Nginx 事件处理模型优化</h3><p>Nginx 的连接处理机制在不同的操作系统中会采用不同的 I/O 模型，在 linux 下，Nginx 使用 epoll 的 I/O 多路复用模型，在 Freebsd 中使用 kqueue 的 I/O 多路复用模型，在 Solaris 中使用 /dev/poll 方式的 I/O 多路复用模型，在 Windows 中使用 icop，等等。</p><p>配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">  use epoll;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>events</code> 指令是设定 Nginx 的工作模式及连接数上限。<code>use</code>指令用来指定 Nginx 的工作模式。Nginx 支持的工作模式有 select、 poll、 kqueue、 epoll 、 rtsig 和/ dev/poll。当然，也可以不指定事件处理模型，Nginx 会自动选择最佳的事件处理模型。</p><h3 id="单个进程允许的客户端最大连接数"><a href="#单个进程允许的客户端最大连接数" class="headerlink" title="单个进程允许的客户端最大连接数"></a>单个进程允许的客户端最大连接数</h3><p>通过调整控制连接数的参数来调整 Nginx 单个进程允许的客户端最大连接数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">  worker_connections 20480;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>worker_connections</code> 也是个事件模块指令，用于定义 Nginx 每个进程的最大连接数，默认是 1024。</p><p>最大连接数的计算公式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max_clients = worker_processes * worker_connections;</span><br></pre></td></tr></table></figure><p>如果作为反向代理，因为浏览器默认会开启 2 个连接到 server，而且 Nginx 还会使用fds（file descriptor）从同一个连接池建立连接到 upstream 后端。则最大连接数的计算公式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max_clients = worker_processes * worker_connections / 4;</span><br></pre></td></tr></table></figure><p>另外，<strong>进程的最大连接数受 Linux 系统进程的最大打开文件数限制</strong>，在执行操作系统命令 <code>ulimit -HSn 65535</code>或配置相应文件后， <code>worker_connections</code> 的设置才能生效。</p><h3 id="配置获取更多连接数"><a href="#配置获取更多连接数" class="headerlink" title="配置获取更多连接数"></a>配置获取更多连接数</h3><p>默认情况下，Nginx 进程只会在一个时刻接收一个新的连接，我们可以配置<code>multi_accept</code> 为 <code>on</code>，实现在一个时刻内可以接收多个新的连接，提高处理效率。该参数默认是 <code>off</code>，建议开启。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">  multi_accept on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置-worker-进程的最大打开文件数"><a href="#配置-worker-进程的最大打开文件数" class="headerlink" title="配置 worker 进程的最大打开文件数"></a>配置 worker 进程的最大打开文件数</h3><p>调整配置 Nginx worker 进程的最大打开文件数，这个控制连接数的参数为<code>worker_rlimit_nofile</code>。该参数的实际配置如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker_rlimit_nofile 65535;</span><br></pre></td></tr></table></figure><p>可设置为系统优化后的 <code>ulimit -HSn</code> 的结果。</p><h3 id="优化域名的散列表大小"><a href="#优化域名的散列表大小" class="headerlink" title="优化域名的散列表大小"></a>优化域名的散列表大小</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  server_names_hash_bucket_size 128;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数作用:设置存放域名( server names)的最大散列表的存储桶( bucket)的大小。 默认值依赖 CPU 的缓存行。</p><p><code>server_names_hash_bucket_size</code> 的值是不能带单位 的。配置主机时必须设置该值，否则无法运行 Nginx，或者无法通过测试 。 该设置与 <code>server_ names_hash_max_size</code> 共同控制保存服务器名的 hash 表， hash bucket size 总是等于 hash 表的大小， 并且是一路处理器缓存大小的倍数。若 hash bucket size 等于一路处理器缓存的大小，那么在查找键时， 最坏的情况下在内存中查找的次数为 2。第一次是确定存储单元的地址，第二次是在存储单元中查找键值 。 若报 出 hash max size 或 hash bucket size 的提示，则需要增加 <code>server_names_hash_max size</code> 的值。</p><h3 id="TCP-优化"><a href="#TCP-优化" class="headerlink" title="TCP 优化"></a>TCP 优化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  sendfile on;</span><br><span class="line">  tcp_nopush on;</span><br><span class="line"></span><br><span class="line">  keepalive_timeout 120;</span><br><span class="line">  tcp_nodelay on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一行的 <code>sendfile</code> 配置可以提高 Nginx 静态资源托管效率。sendfile 是一个系统调用，直接在内核空间完成文件发送，不需要先 read 再 write，没有上下文切换开销。</p><p>TCP_NOPUSH 是 FreeBSD 的一个 socket 选项，对应 Linux 的 TCP_CORK，Nginx 里统一用 <code>tcp_nopush</code> 来控制它，并且只有在启用了 <code>sendfile</code> 之后才生效。启用它之后，数据包会累计到一定大小之后才会发送，减小了额外开销，提高网络效率。</p><p>TCP_NODELAY 也是一个 socket 选项，启用后会禁用 Nagle 算法，尽快发送数据，某些情况下可以节约 200ms（Nagle 算法原理是：在发出去的数据还未被确认之前，新生成的小数据先存起来，凑满一个 MSS 或者等到收到确认后再发送）。Nginx 只会针对处于 keep-alive 状态的 TCP 连接才会启用 <code>tcp_nodelay</code>。</p><h3 id="优化连接参数"><a href="#优化连接参数" class="headerlink" title="优化连接参数"></a>优化连接参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  client_header_buffer_size 32k;</span><br><span class="line">  large_client_header_buffers 4 32k;</span><br><span class="line">  client_max_body_size 1024m;</span><br><span class="line">  client_body_buffer_size 10m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这部分更多是更具业务场景来决定的。例如<code>client_max_body_size</code>用来决定请求体的大小，用来限制上传文件的大小。上面列出的参数可以作为起始参数。</p><h3 id="配置压缩优化"><a href="#配置压缩优化" class="headerlink" title="配置压缩优化"></a>配置压缩优化</h3><p><strong>Gzip 压缩</strong></p><p>我们在上线前，代码（JS、CSS 和 HTML）会做压缩，图片也会做压缩（PNGOUT、Pngcrush、JpegOptim、Gifsicle 等）。对于文本文件，在服务端发送响应之前进行 GZip 压缩也很重要，通常压缩后的文本大小会减小到原来的 1/4 - 1/3。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  gzip on;</span><br><span class="line">  gzip_buffers 16 8k;</span><br><span class="line">  gzip_comp_level 6;</span><br><span class="line">  gzip_http_version 1.0;</span><br><span class="line">  gzip_min_length 1000;</span><br><span class="line">  gzip_proxied any;</span><br><span class="line">  gzip_vary on;</span><br><span class="line">  gzip_types</span><br><span class="line">    text/xml application/xml application/atom+xml application/rss+xml application/xhtml+xml image/svg+xml</span><br><span class="line">    text/javascript application/javascript application/x-javascript</span><br><span class="line">    text/x-json application/json application/x-web-app-manifest+json</span><br><span class="line">    text/css text/plain text/x-component</span><br><span class="line">    font/opentype application/x-font-ttf application/vnd.ms-fontobject</span><br><span class="line">    image/x-icon;</span><br><span class="line">  gzip_disable <span class="string">"MSIE [1-6]\\.(?!.*SV1)"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这部分内容比较简单，只有两个地方需要解释下：</p><p><code>gzip_vary</code> 用来输出 Vary 响应头，用来解决某些缓存服务的一个问题，详情请看我之前的博客：HTTP 协议中 Vary 的一些研究。</p><p><code>gzip_disable</code> 指令接受一个正则表达式，当请求头中的 UserAgent 字段满足这个正则时，响应不会启用 GZip，这是为了解决在某些浏览器启用 GZip 带来的问题。</p><p>默认 Nginx 只会针对 HTTP/1.1 及以上的请求才会启用 GZip，因为部分早期的 HTTP/1.0 客户端在处理 GZip 时有 Bug。现在基本上可以忽略这种情况，于是可以指定 gzip_http_version 1.0 来针对 HTTP/1.0 及以上的请求开启 GZip。</p><p><strong>Brotli 压缩</strong></p><p>Brotli 是基于LZ77算法的一个现代变体、霍夫曼编码和二阶上下文建模。Google软件工程师在2015年9月发布了包含通用无损数据压缩的Brotli增强版本，特别侧重于HTTP压缩。其中的编码器被部分改写以提高压缩比，编码器和解码器都提高了速度，流式API已被改进，增加更多压缩质量级别。</p><p>需要安装<code>libbrotli</code>、<code>ngx_brotli</code>，重新编译 Nginx 时，带上<code>--add-module=/path/to/ngx_brotli</code>即可，然后配置如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  brotli on;</span><br><span class="line">  brotli_comp_level 6;</span><br><span class="line">  brotli_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Brotli 可与 Gzip 共存在一个配置文件中。</p><h3 id="静态资源优化"><a href="#静态资源优化" class="headerlink" title="静态资源优化"></a>静态资源优化</h3><p>静态资源优化，可以减少连接请求数，同时也不需要对这些资源请求打印日志。但副作用是资源更新可能无法及时。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    <span class="comment"># 图片、视频</span></span><br><span class="line">    location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ &#123;</span><br><span class="line">      expires 30d;</span><br><span class="line">      access_log off;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 字体</span></span><br><span class="line">    location ~ .*\\.(eot|ttf|otf|woff|svg)$ &#123;</span><br><span class="line">      expires 30d;</span><br><span class="line">      access_log off;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># js、css</span></span><br><span class="line">    location ~ .*\\.(js|css)?$ &#123;</span><br><span class="line">      expires 7d;</span><br><span class="line">      access_log off;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="制作内部网络-yum-仓库"><a href="#制作内部网络-yum-仓库" class="headerlink" title="制作内部网络 yum 仓库"></a>制作内部网络 yum 仓库</h1><p>安装所需的软件 <code>createrepo nginx</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install createrepo nginx -y</span><br></pre></td></tr></table></figure><p>配置 nginx 索引模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/nginx/conf.d/yum.conf &lt;&lt; EOF</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    server_name  yum.alan.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        autoindex on;</span><br><span class="line">        autoindex_exact_size off;</span><br><span class="line">        autoindex_localtime on;</span><br><span class="line">        charset utf-8,gbk;</span><br><span class="line">        root    /yum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>准备软件仓库目录并下载需要的软件至该目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install --downloadonly --downloaddir=/yum nginx screen httpd -y</span><br></pre></td></tr></table></figure><p>生成 yum 元数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createrepo /yum</span><br></pre></td></tr></table></figure><p>客户端生成本地源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/yum.repos.d/local.repo &lt;&lt; EOF</span><br><span class="line">[<span class="built_in">local</span>]</span><br><span class="line">name=<span class="built_in">local</span></span><br><span class="line"><span class="built_in">enable</span>=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">baseurl=http://172.16.1.11</span><br></pre></td></tr></table></figure><p>客户端测试安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum makecache</span><br><span class="line">yum install httpd</span><br></pre></td></tr></table></figure><p>更新软件包的操作步骤：</p><p>第一种方法：真实下载</p><p>1.打开 yum 缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">"keepcache"</span> /etc/yum.conf </span><br><span class="line">keepcache=1</span><br></pre></td></tr></table></figure><p>2.清空原来的缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br></pre></td></tr></table></figure><p>3.下载软件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum remove php-mysql-5.4 php php-fpm php-common</span><br><span class="line">rpm -Uvh &lt;https:&#x2F;&#x2F;dl.fedoraproject.org&#x2F;pub&#x2F;epel&#x2F;epel-release-latest-7.noarch.rpm&gt;</span><br><span class="line">rpm -Uvh &lt;https:&#x2F;&#x2F;mirror.webtatic.com&#x2F;yum&#x2F;el7&#x2F;webtatic-release.rpm&gt;</span><br><span class="line">yum install php71w php71w-cli php71w-common php71w-devel php71w-embedded php71w-gd php71w-mcrypt php71w-mbstring php71w-pdo php71w-xml php71w-fpm php71w-mysqlnd php71w-opcache -y</span><br></pre></td></tr></table></figure><p>4.移动已经缓存下来的 rpm 包到 yum 仓库目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /var/cache/yum/ -<span class="built_in">type</span> f -name <span class="string">"*.rpm"</span>|xargs mv -t  /yum/</span><br></pre></td></tr></table></figure><p>5.生成新的 yum 元数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createrepo --update  /yum/</span><br></pre></td></tr></table></figure><p>第二种方法：只下载不安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install --downloadonly --downloaddir= /yum php71w php71w-cli php71w-common php71w-devel php71w-embedded php71w-gd php71w-mcrypt php71w-mbstring php71w-pdo php71w-xml php71w-fpm php71w-mysqlnd php71w-opcache</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
